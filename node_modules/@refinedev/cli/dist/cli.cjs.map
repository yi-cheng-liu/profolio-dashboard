{"version":3,"sources":["../src/cli.ts","../src/components/update-warning-table/table.ts","../src/utils/spinner/index.ts","../src/utils/package/index.ts","../src/components/version-table/index.ts","../src/utils/text/index.ts","../src/commands/check-updates/index.tsx","../src/definitions/projectTypes.ts","../src/definitions/uiFrameworks.ts","../src/definitions/package.ts","../src/utils/project/index.ts","../src/utils/resource/index.ts","../src/utils/compile/index.ts","../src/commands/add/sub-commands/resource/create-resources.ts","../src/commands/create-resource/index.ts","../src/utils/env/index.ts","../src/commands/proxy/index.ts","../src/commands/runner/start/index.ts","../src/update-notifier/index.tsx","../src/utils/encode/index.ts","../src/commands/runner/projectScripts.ts","../src/commands/runner/runScript.ts","../src/commands/runner/utils/index.ts","../src/commands/runner/dev/index.ts","../src/commands/devtools/index.ts","../src/transformers/add-devtools-component.ts","../src/utils/swizzle/prettierFormat.ts","../src/utils/refine/index.ts","../src/commands/runner/build/index.ts","../src/commands/runner/run/index.ts","../src/commands/swizzle/index.tsx","../src/utils/swizzle/index.ts","../src/utils/swizzle/provideCliHelpers.ts","../src/index.ts","../src/utils/swizzle/import.ts","../src/utils/swizzle/appendAfterImports.ts","../src/utils/swizzle/getFileContent.ts","../src/components/swizzle-message/index.tsx","../src/utils/swizzle/codes.ts","../src/utils/swizzle/renderCodeMarkdown.ts","../src/utils/marked-terminal-renderer/index.ts","../src/utils/swizzle/parseSwizzleBlocks.ts","../src/utils/swizzle/getPathPrefix.ts","../src/commands/swizzle/install-required-packages/index.ts","../src/commands/update/index.ts","../src/commands/update/interactive/index.ts","../src/utils/array/index.ts","../src/commands/whoami/index.ts","../src/commands/add/prompt.ts","../src/commands/add/sub-commands/integration/prompt.ts","../src/commands/add/sub-commands/integration/run-transformer.ts","../src/commands/add/sub-commands/integration/utils/prettify-choice.ts","../src/commands/add/sub-commands/integration/packages/ant-design.ts","../src/commands/add/sub-commands/integration/packages/react-router.ts","../src/commands/add/sub-commands/integration/packages/index.ts","../src/commands/add/sub-commands/provider/prompt.ts","../src/commands/add/sub-commands/provider/create-providers.ts","../src/commands/add/sub-commands/provider/providers.ts","../src/commands/add/sub-commands/integration/command.ts","../src/commands/add/sub-commands/provider/command.ts","../src/commands/add/sub-commands/resource/command.ts","../src/commands/add/index.ts","../src/utils/os/index.ts","../src/telemetry/index.ts","../src/utils/announcement/index.tsx"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from \"commander\";\n\nimport figlet from \"figlet\";\n\nimport checkUpdates from \"@commands/check-updates\";\nimport createResource from \"@commands/create-resource\";\nimport proxy from \"@commands/proxy\";\nimport { build, dev, run, start } from \"@commands/runner\";\nimport swizzle from \"@commands/swizzle\";\nimport update from \"@commands/update\";\nimport whoami from \"@commands/whoami\";\nimport devtools from \"@commands/devtools\";\nimport add from \"@commands/add\";\nimport { telemetryHook } from \"@telemetryindex\";\nimport { printAnnouncements } from \"@utils/announcement\";\nimport \"@utils/env\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_CLI_VERSION = \"1.0.0\";\n\nconst bootstrap = () => {\n  const program = new Command();\n\n  program\n    .version(\n      `@refinedev/cli@${REFINE_CLI_VERSION}`,\n      \"-v, --version\",\n      \"Output the current version.\",\n    )\n    .description(\n      figlet.textSync(\"refine\", {\n        font: \"Isometric1\",\n        horizontalLayout: \"full\",\n        verticalLayout: \"full\",\n        whitespaceBreak: true,\n      }),\n    )\n    .usage(\"<command> [options]\")\n    .helpOption(\"-h, --help\", \"Output usage information.\");\n\n  // load commands\n  swizzle(program);\n  createResource(program);\n  update(program);\n  dev(program);\n  build(program);\n  start(program);\n  run(program);\n  checkUpdates(program);\n  whoami(program);\n  proxy(program);\n  devtools(program);\n  add(program);\n\n  program.hook(\"preAction\", async (thisCommand) => {\n    if (thisCommand.args.includes(\"dev\")) {\n      await printAnnouncements();\n    }\n  });\n\n  program.hook(\"postAction\", (thisCommand) => {\n    const command = thisCommand.args[0];\n\n    if ([\"run\"].includes(command)) return;\n\n    telemetryHook();\n  });\n\n  program.parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.outputHelp();\n  }\n};\n\nbootstrap();\n","import type { RefinePackageInstalledVersionData } from \"@definitions/package\";\nimport chalk from \"chalk\";\nimport center from \"center-align\";\nimport { getDependencies, getPreferedPM, getScripts } from \"@utils/package\";\nimport { getVersionTable } from \"@components/version-table\";\n\nexport interface UpdateWarningTableParams {\n  data: RefinePackageInstalledVersionData[];\n}\n\nexport const printUpdateWarningTable = async (\n  params: UpdateWarningTableParams,\n) => {\n  const data = params?.data;\n  const tableHead = Object.keys(data?.[0] || {});\n  if (!data || !tableHead.length) return;\n\n  const { table, width } = getVersionTable(data);\n  console.log();\n  console.log(center(\"Update Available\", width));\n  console.log(table);\n  console.log(\n    center(\n      `To update ${chalk.bold(\"`Refine`\")} packages with wanted version`,\n      width,\n    ),\n  );\n  console.log(\n    center(\n      ` Run the following command: ${chalk.yellowBright(\n        await getInstallCommand(),\n      )}`,\n      width,\n    ),\n  );\n  console.log();\n};\n\nexport const getInstallCommand = async () => {\n  const fallbackCommand = \"npx @refinedev/cli update\";\n\n  const dependencies = getDependencies();\n  const scriptKeys = Object.keys(getScripts());\n\n  const hasCli = dependencies.includes(\"@refinedev/cli\");\n  const hasScript = scriptKeys.includes(\"refine\");\n\n  if (!hasCli && !hasScript) {\n    return fallbackCommand;\n  }\n\n  const pm = await getPreferedPM();\n\n  if (hasScript) {\n    return `${pm.name} run refine update`;\n  }\n\n  if (hasCli) {\n    return \"npx refine update\";\n  }\n\n  return fallbackCommand;\n};\n","import ora from \"ora\";\n\nconst spinner = async <T>(fn: () => Promise<T>, message: string) => {\n  const spinner = ora({\n    color: \"cyan\",\n    text: message,\n  }).start();\n  const result = await fn();\n  spinner.stop();\n  return result;\n};\n\nexport default spinner;\n","import spinner from \"@utils/spinner\";\nimport execa from \"execa\";\nimport { existsSync, pathExists, readFileSync, readJSON } from \"fs-extra\";\nimport globby from \"globby\";\nimport path from \"path\";\nimport preferredPM from \"preferred-pm\";\n\n// TODO: Add package.json type\nexport const getPackageJson = (): any => {\n  if (!existsSync(\"package.json\")) {\n    throw new Error(\"./package.json not found\");\n  }\n\n  return JSON.parse(readFileSync(\"package.json\", \"utf8\"));\n};\n\nexport const getDependencies = (): string[] => {\n  const packageJson = getPackageJson();\n  return Object.keys(packageJson.dependencies || {});\n};\n\nexport const getDependenciesWithVersion = (): string[] => {\n  const packageJson = getPackageJson();\n  return packageJson.dependencies;\n};\n\nexport const getDevDependencies = (): string[] => {\n  const packageJson = getPackageJson();\n  return Object.keys(packageJson.devDependencies || {});\n};\n\nexport const getAllDependencies = (): string[] => {\n  return [...getDependencies(), ...getDependencies()];\n};\n\nexport const getScripts = (): Record<string, string> => {\n  const packageJson = getPackageJson();\n  return packageJson.scripts;\n};\n\nexport const getInstalledRefinePackages = async () => {\n  try {\n    const execution = await execa(\"npm\", [\"ls\", \"--depth=0\", \"--json\"], {\n      reject: false,\n    });\n\n    const dependencies = JSON.parse(execution.stdout)?.dependencies || {};\n    const refineDependencies = Object.keys(dependencies).filter(\n      (dependency) =>\n        dependency.startsWith(\"@refinedev\") ||\n        dependency.startsWith(\"@pankod/refine-\"),\n    );\n\n    const normalize: {\n      name: string;\n      version: string;\n    }[] = [];\n\n    for (const dependency of refineDependencies) {\n      const version = dependencies[dependency].version;\n      normalize.push({\n        name: dependency,\n        version,\n      });\n    }\n\n    return normalize;\n  } catch (error) {\n    return Promise.resolve(null);\n  }\n};\n\nexport const getInstalledRefinePackagesFromNodeModules = async () => {\n  const REFINE_PACKAGES = [\"ably\", \"airtable\", \"antd\", \"appwrite\", \"chakra-ui\", \"codemod\", \"core\", \"devtools\", \"devtools-internal\", \"devtools-server\", \"devtools-shared\", \"devtools-ui\", \"graphql\", \"hasura\", \"inferencer\", \"kbar\", \"mantine\", \"medusa\", \"mui\", \"nestjs-query\", \"nestjsx-crud\", \"nextjs-router\", \"react-hook-form\", \"react-router-v6\", \"react-table\", \"remix-router\", \"shared\", \"simple-rest\", \"strapi\", \"strapi-v4\", \"supabase\"];\n\n  try {\n    const packagesFromGlobbySearch = await globby(\"node_modules/@refinedev/*\", {\n      onlyDirectories: true,\n    });\n\n    const packageDirsFromModules = REFINE_PACKAGES.flatMap((pkg) => {\n      try {\n        const pkgPath = require.resolve(\n          path.join(\"@refinedev\", pkg, \"package.json\"),\n        );\n\n        return [path.dirname(pkgPath)];\n      } catch (err) {\n        return [];\n      }\n    });\n\n    const refinePackages: Array<{\n      name: string;\n      path: string;\n      version: string;\n    }> = [];\n\n    await Promise.all(\n      [...packageDirsFromModules, ...packagesFromGlobbySearch].map(\n        async (packageDir) => {\n          const hasPackageJson = await pathExists(`${packageDir}/package.json`);\n          if (hasPackageJson) {\n            const packageJson = await readJSON(`${packageDir}/package.json`);\n\n            refinePackages.push({\n              name: packageJson.name,\n              version: packageJson.version,\n              path: packageDir,\n            });\n          }\n        },\n      ),\n    );\n\n    return refinePackages;\n  } catch (err) {\n    return [];\n  }\n};\n\nexport const isPackageHaveRefineConfig = async (packagePath: string) => {\n  return await pathExists(`${packagePath}/refine.config.js`);\n};\n\nexport const pmCommands = {\n  npm: {\n    install: [\"install\", \"--save\"],\n    installDev: [\"install\", \"--save-dev\"],\n    outdatedJson: [\"outdated\", \"--json\"],\n  },\n  yarn: {\n    install: [\"add\"],\n    installDev: [\"add\", \"-D\"],\n    outdatedJson: [\"outdated\", \"--json\"],\n  },\n  pnpm: {\n    install: [\"add\"],\n    installDev: [\"add\", \"-D\"],\n    outdatedJson: [\"outdated\", \"--format\", \"json\"],\n  },\n  bun: {\n    install: [\"add\"],\n    installDev: [\"add\", \"--dev\"],\n    outdatedJson: [\"outdated\", \"--format\", \"json\"],\n  },\n};\n\nexport const getPreferedPM = async () => {\n  const pm = await spinner(\n    () => preferredPM(process.cwd()),\n    \"Getting package manager...\",\n  );\n\n  if (!pm) {\n    throw new Error(\"Package manager not found.\");\n  }\n\n  return pm;\n};\n\nexport const installPackages = async (packages: string[]) => {\n  const pm = await getPreferedPM();\n\n  try {\n    const installCommand = pmCommands[pm.name].install;\n\n    const execution = execa(pm.name, [...installCommand, ...packages], {\n      stdio: \"inherit\",\n    });\n\n    execution.on(\"message\", (message) => {\n      console.log(message);\n    });\n\n    execution.on(\"error\", (error) => {\n      console.log(error);\n    });\n\n    execution.on(\"exit\", (exitCode) => {\n      if (exitCode === 0) {\n        console.log(\"All `Refine` packages updated  🎉\");\n        return;\n      }\n\n      console.log(`Application exited with code ${exitCode}`);\n    });\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n\nexport const installPackagesSync = async (packages: string[]) => {\n  const pm = await getPreferedPM();\n\n  try {\n    const installCommand = pmCommands[pm.name].install;\n\n    const execution = execa.sync(pm.name, [...installCommand, ...packages], {\n      stdio: \"inherit\",\n    });\n\n    if (execution.failed || execution.exitCode !== 0) {\n      throw new Error(execution.stderr);\n    }\n\n    return execution;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n\nexport interface PackageNameAndVersion {\n  name: string;\n  version: string | null;\n}\n\nexport const parsePackageNameAndVersion = (\n  str: string,\n): PackageNameAndVersion => {\n  const versionStartIndex = str.lastIndexOf(\"@\");\n\n  if (versionStartIndex <= 0) {\n    return {\n      name: str,\n      version: null,\n    };\n  }\n\n  return {\n    name: str.slice(0, versionStartIndex),\n    version: str.slice(versionStartIndex + 1),\n  };\n};\n\nexport const getRefineProjectId = () => {\n  const packageJson = getPackageJson();\n\n  return packageJson?.refine?.projectId;\n};\n\nexport const isDevtoolsInstalled = async () => {\n  const installedPackages = await getInstalledRefinePackagesFromNodeModules();\n\n  return installedPackages.some((pkg) => pkg.name === \"@refinedev/devtools\");\n};\n\nexport const getNotInstalledPackages = (packages: string[]) => {\n  const dependencies = getDependencies();\n\n  return packages.filter((pkg) => !dependencies.includes(pkg));\n};\n\nexport const installMissingPackages = async (packages: string[]) => {\n  console.log(\"🌱 Checking dependencies...\");\n\n  const missingPackages = getNotInstalledPackages(packages);\n\n  if (missingPackages.length > 0) {\n    console.log(`🌱 Installing ${missingPackages.join(\", \")}`);\n\n    await installPackagesSync(missingPackages);\n\n    console.log(\"🎉 Installation complete...\");\n  } else {\n    console.log(\"🎉 All required packages are already installed\");\n  }\n};\n\nexport const hasIncomatiblePackages = (packages: string[]): boolean => {\n  const allDependencies = getAllDependencies();\n\n  const incompatiblePackages = packages.filter((pkg) =>\n    allDependencies.includes(pkg),\n  );\n\n  if (incompatiblePackages.length > 0) {\n    console.log(\n      `🚨 This feature doesn't support ${incompatiblePackages.join(\n        \", \",\n      )} package.`,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { RefinePackageInstalledVersionData } from \"@definitions/package\";\nimport Table from \"cli-table3\";\nimport chalk from \"chalk\";\nimport { removeANSIColors } from \"@utils/text\";\n\nconst columns = {\n  name: \"name\",\n  current: \"current\",\n  wanted: \"wanted\",\n  latest: \"latest\",\n  changelog: \"changelog\",\n} as const;\n\nconst orderedColumns: (typeof columns)[keyof typeof columns][] = [\n  columns.name,\n  columns.current,\n  columns.wanted,\n  columns.latest,\n  columns.changelog,\n];\n\nexport const getVersionTable = (\n  packages: RefinePackageInstalledVersionData[] = [],\n) => {\n  const tableHead = Object.keys(packages?.[0] || {});\n  if (!packages || !tableHead.length) return { table: \"\", width: 0 };\n\n  const terminalWidth = process.stdout.columns || 80;\n\n  const nameColumnWidth =\n    Math.max(...packages.map((row) => row.name.length)) + 2;\n  const versionColumnWidth = 7 + 2;\n  const bordersWidth = 6;\n  const changelogColumnWidth = Math.min(\n    35,\n    terminalWidth - nameColumnWidth - versionColumnWidth * 3 - bordersWidth,\n  );\n\n  const columnWidths = {\n    name: nameColumnWidth,\n    current: versionColumnWidth,\n    wanted: versionColumnWidth,\n    latest: versionColumnWidth,\n    changelog: changelogColumnWidth,\n  } as const;\n\n  const table = new Table({\n    head: orderedColumns,\n    wordWrap: false,\n    wrapOnWordBoundary: true,\n    colWidths: orderedColumns.map((column) => columnWidths[column]),\n    style: {\n      head: [\"blue\"],\n    },\n  });\n\n  const ellipsisFromCenter = (text: string, length: number) => {\n    // if text is longer than length, cut it from the center to fit the length (add ellipsis)\n    if (text.length > length) {\n      const fitLength = length - 3;\n      const start = text.slice(0, Math.floor(fitLength / 2));\n      const end = text.slice(-Math.ceil(fitLength / 2));\n      return `${start}...${end}`;\n    }\n    return text;\n  };\n\n  packages.forEach((row) => {\n    table.push(\n      orderedColumns.map((column) => {\n        const columnValue = row[column];\n        if (!columnValue) return columnValue;\n\n        if (column === \"latest\" || column === \"wanted\") {\n          const installedVersion = parseVersions(row.current);\n          const latestVersion = parseVersions(columnValue);\n          const colors = getColorsByVersionDiffrence(\n            installedVersion,\n            latestVersion,\n          );\n          const textMajor = chalk[colors.major](latestVersion.major);\n          const textMinor = chalk[colors.minor](latestVersion.minor);\n          const textPatch = chalk[colors.patch](latestVersion.patch);\n          return `${textMajor}.${textMinor}.${textPatch}`;\n        }\n\n        if (column === \"changelog\") {\n          return chalk.blueBright.underline(columnValue);\n        }\n\n        return columnValue;\n      }),\n    );\n  });\n\n  const tableString = table.toString();\n  const tableWidth = removeANSIColors(\n    tableString.split(\"\\n\")?.[0] || \"\",\n  ).length;\n\n  return { table: tableString, width: tableWidth };\n};\n\nconst parseVersions = (text: string) => {\n  const versions = text.split(\".\");\n  return {\n    major: versions[0],\n    minor: versions[1],\n    patch: versions[2],\n  };\n};\n\nconst getColorsByVersionDiffrence = (\n  installedVersion: ReturnType<typeof parseVersions>,\n  nextVersion: ReturnType<typeof parseVersions>,\n) => {\n  const isMajorDiffrence =\n    installedVersion.major.trim() !== nextVersion.major.trim();\n\n  if (isMajorDiffrence)\n    return {\n      major: \"red\",\n      minor: \"red\",\n      patch: \"red\",\n    } as const;\n\n  const isMinorDiffrence =\n    installedVersion.minor.trim() !== nextVersion.minor.trim();\n\n  if (isMinorDiffrence)\n    return {\n      major: \"white\",\n      minor: \"yellow\",\n      patch: \"yellow\",\n    } as const;\n\n  const isPatchDiffrence =\n    installedVersion.patch.trim() !== nextVersion.patch.trim();\n  if (isPatchDiffrence)\n    return {\n      major: \"white\",\n      minor: \"white\",\n      patch: \"green\",\n    } as const;\n\n  return {\n    major: \"white\",\n    minor: \"white\",\n    patch: \"white\",\n  } as const;\n};\n","export const uppercaseFirstChar = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const removeANSIColors = (str: string): string => {\n  return str.replace(\n    // biome-ignore lint/suspicious/noControlCharactersInRegex: we want to remove invisible characters here.\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n    \"\",\n  );\n};\n","import type { Command } from \"commander\";\nimport { printUpdateWarningTable } from \"@components/update-warning-table\";\nimport { pmCommands } from \"@utils/package\";\nimport execa from \"execa\";\nimport spinner from \"@utils/spinner\";\nimport type {\n  NpmOutdatedResponse,\n  RefinePackageInstalledVersionData,\n} from \"@definitions/package\";\nimport semverDiff from \"semver-diff\";\n\nconst load = (program: Command) => {\n  return program\n    .command(\"check-updates\")\n    .description(\"Check all installed `Refine` packages are up to date\")\n    .action(action);\n};\n\nconst action = async () => {\n  const packages = await spinner(isRefineUptoDate, \"Checking for updates...\");\n  if (!packages.length) {\n    console.log(\"All `Refine` packages are up to date 🎉\\n\");\n    return;\n  }\n\n  await printUpdateWarningTable({ data: packages });\n};\n\n/**\n *\n * @returns `Refine` packages that have updates.\n * @returns `[]` if no Refine package found.\n * @returns `[]` if all `Refine` packages are up to date.\n */\nexport const isRefineUptoDate = async () => {\n  const refinePackages = await getOutdatedRefinePackages();\n\n  return refinePackages;\n};\n\nexport const getOutdatedRefinePackages = async () => {\n  const packages = await getOutdatedPackageList();\n  if (!packages) return [];\n\n  const list: RefinePackageInstalledVersionData[] = [];\n  let changelog: string | undefined = undefined;\n\n  Object.keys(packages).forEach((packageName) => {\n    const dependency = packages[packageName];\n\n    if (packageName.includes(\"@refinedev\")) {\n      changelog = packageName.replace(/@refinedev\\//, \"https://c.refine.dev/\");\n\n      list.push({\n        name: packageName,\n        current: dependency.current,\n        wanted: dependency.wanted,\n        latest: dependency.latest,\n        changelog,\n      });\n    }\n  });\n\n  // When user has installed `next` version, it will be ahead of the `latest` version. But `npm outdated` command still returns as an outdated package.\n  // So we need to filter out the if `current` version is ahead of `latest` version.\n  // ex: in the npm registry `next` version is 1.1.1 -> [current:1.1.1, wanted:1.1.1, latest:1.1.0]\n  const filteredList = list.filter((item) => {\n    const diff = semverDiff(item.current, item.latest);\n    return !!diff;\n  });\n\n  return filteredList;\n};\n\nexport const getOutdatedPackageList = async () => {\n  const pm = \"npm\";\n\n  const { stdout, timedOut } = await execa(pm, pmCommands[pm].outdatedJson, {\n    reject: false,\n    timeout: 25 * 1000,\n  });\n\n  if (timedOut) {\n    throw new Error(\"Timed out while checking for updates.\");\n  }\n\n  if (!stdout) return null;\n\n  return JSON.parse(stdout) as NpmOutdatedResponse | null;\n};\n\nexport default load;\n","export enum ProjectTypes {\n  REACT_SCRIPT = \"react-scripts\",\n  REMIX = \"remix\",\n  NEXTJS = \"nextjs\",\n  VITE = \"vite\",\n  CRACO = \"craco\",\n  PARCEL = \"parcel\",\n  UNKNOWN = \"unknown\",\n}\n","export enum UIFrameworks {\n  ANTD = \"antd\",\n  MUI = \"mui\",\n  MANTINE = \"mantine\",\n  CHAKRA = \"chakra-ui\",\n}\n","export enum PackageManagerTypes {\n  NPM = \"npm\",\n  YARN = \"yarn\",\n  PNPM = \"pnpm\",\n}\n\nexport type NpmOutdatedResponse = Record<\n  string,\n  {\n    current: string;\n    wanted: string;\n    latest: string;\n    dependet?: string;\n  }\n>;\n\nexport type RefinePackageInstalledVersionData = {\n  name: string;\n  current: string;\n  wanted: string;\n  latest: string;\n  changelog?: string;\n};\n","import { ProjectTypes, UIFrameworks } from \"@definitions\";\nimport { getDependencies, getDevDependencies } from \"@utils/package\";\n\nexport const getProjectType = (platform?: ProjectTypes): ProjectTypes => {\n  if (platform) {\n    return platform;\n  }\n  // read dependencies from package.json\n  const dependencies = getDependencies();\n  const devDependencies = getDevDependencies();\n\n  // check for craco\n  // craco and react-scripts installs together. We need to check for craco first\n  if (\n    dependencies.includes(\"@craco/craco\") ||\n    devDependencies.includes(\"@craco/craco\")\n  ) {\n    return ProjectTypes.CRACO;\n  }\n\n  // check for react-scripts\n  if (\n    dependencies.includes(\"react-scripts\") ||\n    devDependencies.includes(\"react-scripts\")\n  ) {\n    return ProjectTypes.REACT_SCRIPT;\n  }\n\n  // check for next\n  if (dependencies.includes(\"next\") || devDependencies.includes(\"next\")) {\n    return ProjectTypes.NEXTJS;\n  }\n\n  // check for remix\n  if (\n    dependencies.includes(\"@remix-run/react\") ||\n    devDependencies.includes(\"@remix-run/react\")\n  ) {\n    return ProjectTypes.REMIX;\n  }\n\n  // check for vite\n  if (dependencies.includes(\"vite\") || devDependencies.includes(\"vite\")) {\n    return ProjectTypes.VITE;\n  }\n\n  if (dependencies.includes(\"parcel\") || devDependencies.includes(\"parcel\")) {\n    return ProjectTypes.PARCEL;\n  }\n\n  return ProjectTypes.UNKNOWN;\n};\n\nexport const getUIFramework = (): UIFrameworks | undefined => {\n  // read dependencies from package.json\n  const dependencies = getDependencies();\n\n  // check for antd\n  if (dependencies.includes(\"@refinedev/antd\")) {\n    return UIFrameworks.ANTD;\n  }\n\n  // check for mui\n  if (dependencies.includes(\"@refinedev/mui\")) {\n    return UIFrameworks.MUI;\n  }\n\n  // check for chakra\n  if (dependencies.includes(\"@refinedev/chakra-ui\")) {\n    return UIFrameworks.CHAKRA;\n  }\n\n  // check for mantine\n  if (dependencies.includes(\"@refinedev/mantine\")) {\n    return UIFrameworks.MANTINE;\n  }\n\n  return;\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\nexport const getResourcePath = (\n  projectType: ProjectTypes,\n): { path: string; alias: string } => {\n  switch (projectType) {\n    case ProjectTypes.NEXTJS:\n      return {\n        path: \"src/components\",\n        alias: \"../src/components\",\n      };\n    case ProjectTypes.REMIX:\n      return {\n        path: \"app/components\",\n        alias: \"~/components\",\n      };\n  }\n\n  // vite and react\n  return {\n    path: \"src/pages\",\n    alias: \"pages\",\n  };\n};\n\nexport const getProviderPath = (\n  projectType: ProjectTypes,\n): { path: string; alias: string } => {\n  switch (projectType) {\n    case ProjectTypes.NEXTJS:\n      return {\n        path: \"src/providers\",\n        alias: \"../src/providers\",\n      };\n    case ProjectTypes.REMIX:\n      return {\n        path: \"app/providers\",\n        alias: \"~/providers\",\n      };\n  }\n\n  // vite and react\n  return {\n    path: \"src/providers\",\n    alias: \"providers\",\n  };\n};\n\nexport const getFilesPathByProject = (projectType?: ProjectTypes) => {\n  switch (projectType) {\n    case ProjectTypes.REMIX:\n      return \"./app\";\n    default:\n      return \"./src\";\n  }\n};\n","import Handlebars from \"handlebars\";\nimport {\n  readFileSync,\n  readdirSync,\n  createFileSync,\n  writeFileSync,\n  unlinkSync,\n} from \"fs-extra\";\n\nexport const compile = (filePath: string, params: any): string => {\n  const content = readFileSync(filePath);\n\n  Handlebars.registerHelper(\"ifIn\", (elem, list, options) => {\n    if (elem.includes(list)) {\n      return options.fn(Handlebars);\n    }\n    return options.inverse(Handlebars);\n  });\n\n  Handlebars.registerHelper(\"formatInferencerComponent\", (string) => {\n    if (!string) {\n      return;\n    }\n\n    switch (string) {\n      case \"chakra-ui\":\n        return \"ChakraUI\";\n\n      default:\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  });\n\n  Handlebars.registerHelper(\"capitalize\", (string) => {\n    if (!string) {\n      return;\n    }\n\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  });\n\n  const template = Handlebars.compile(content.toString());\n  return template(params);\n};\n\nexport const compileDir = (dirPath: string, params: any) => {\n  const files = readdirSync(dirPath);\n\n  files.forEach((file: string) => {\n    const templateFilePath = `${dirPath}/${file}`;\n    // create file\n    const compiledFilePath = `${dirPath}/${file.replace(\".hbs\", \"\")}`;\n    createFileSync(compiledFilePath);\n\n    // write compiled file\n    writeFileSync(compiledFilePath, compile(templateFilePath, params));\n\n    // delete template file (*.hbs)\n    unlinkSync(templateFilePath);\n  });\n};\n","import { compileDir } from \"@utils/compile\";\nimport { getProjectType, getUIFramework } from \"@utils/project\";\nimport { getResourcePath } from \"@utils/resource\";\nimport { uppercaseFirstChar } from \"@utils/text\";\nimport execa from \"execa\";\nimport {\n  copySync,\n  mkdirSync,\n  moveSync,\n  pathExistsSync,\n  unlinkSync,\n} from \"fs-extra\";\nimport inquirer from \"inquirer\";\nimport { join } from \"path\";\nimport { plural } from \"pluralize\";\nimport temp from \"temp\";\n\nconst defaultActions = [\"list\", \"create\", \"edit\", \"show\"];\n\nexport const createResources = async (\n  params: { actions?: string; path?: string },\n  resources: string[],\n) => {\n  const destinationPath =\n    params?.path || getResourcePath(getProjectType()).path;\n  let actions = params.actions || defaultActions.join(\",\");\n\n  if (!resources.length) {\n    const { name, selectedActions } = await inquirer.prompt<{\n      name: string;\n      selectedActions: string[];\n    }>([\n      {\n        type: \"input\",\n        name: \"name\",\n        message: \"Resource Name (users, products, orders etc.)\",\n        validate: (value) => {\n          if (!value) {\n            return \"Resource Name is required\";\n          }\n\n          return true;\n        },\n      },\n      {\n        type: \"checkbox\",\n        name: \"selectedActions\",\n        message: \"Select Actions\",\n        choices: defaultActions,\n        default: params?.actions?.split(\",\"),\n      },\n    ]);\n\n    resources = [name];\n    actions = selectedActions.join(\",\");\n  }\n\n  resources.forEach((resourceName) => {\n    const customActions = actions ? actions.split(\",\") : undefined;\n    const resourceFolderName = plural(resourceName).toLowerCase();\n\n    // check exist resource\n    const resourcePath = join(\n      process.cwd(),\n      destinationPath,\n      resourceFolderName,\n    );\n\n    if (pathExistsSync(resourcePath)) {\n      console.error(\n        `❌ Resource (${join(\n          destinationPath,\n          resourceFolderName,\n        )}) already exist!`,\n      );\n      return;\n    }\n\n    // uppercase first letter\n    const resource = uppercaseFirstChar(resourceName);\n\n    // get the project type\n    const uiFramework = getUIFramework();\n\n    const sourceDir = `${__dirname}/../templates/resource`;\n\n    // create temp dir\n    const tempDir = generateTempDir();\n\n    // copy template files\n    copySync(sourceDir, tempDir);\n\n    const compileParams = {\n      resourceName,\n      resource,\n      actions: customActions || defaultActions,\n      uiFramework,\n    };\n\n    // compile dir\n    compileDir(tempDir, compileParams);\n\n    // delete ignored actions\n    if (customActions) {\n      defaultActions.forEach((action) => {\n        if (!customActions.includes(action)) {\n          unlinkSync(`${tempDir}/${action}.tsx`);\n        }\n      });\n    }\n\n    // create desctination dir\n    mkdirSync(destinationPath, { recursive: true });\n\n    // copy to destination\n    const destinationResourcePath = `${destinationPath}/${resourceFolderName}`;\n\n    let moveSyncOptions = {};\n\n    // empty dir override\n    if (pathExistsSync(destinationResourcePath)) {\n      moveSyncOptions = { overwrite: true };\n    }\n    moveSync(tempDir, destinationResourcePath, moveSyncOptions);\n\n    // clear temp dir\n    temp.cleanupSync();\n\n    const jscodeshiftExecutable = require.resolve(\".bin/jscodeshift\");\n    const { stderr } = execa.sync(jscodeshiftExecutable, [\n      \"./\",\n      \"--extensions=ts,tsx,js,jsx\",\n      \"--parser=tsx\",\n      `--transform=${__dirname}/../src/transformers/resource.ts`,\n      \"--ignore-pattern=.cache\",\n      \"--ignore-pattern=node_modules\",\n      \"--ignore-pattern=build\",\n      \"--ignore-pattern=.next\",\n      \"--ignore-pattern=dist\",\n      // pass custom params to transformer file\n      `--__actions=${compileParams.actions}`,\n      `--__pathAlias=${getResourcePath(getProjectType()).alias}`,\n      `--__resourceFolderName=${resourceFolderName}`,\n      `--__resource=${resource}`,\n      `--__resourceName=${resourceName}`,\n    ]);\n\n    if (stderr) {\n      console.log(stderr);\n    }\n\n    console.log(\n      `🎉 Resource (${destinationResourcePath}) generated successfully!`,\n    );\n  });\n\n  return;\n};\n\nconst generateTempDir = (): string => {\n  temp.track();\n  return temp.mkdirSync(\"resource\");\n};\n","import type { Command } from \"commander\";\nimport { getProjectType } from \"@utils/project\";\nimport { getResourcePath } from \"@utils/resource\";\nimport { createResources } from \"@commands/add/sub-commands/resource/create-resources\";\n\nconst load = (program: Command) => {\n  const projectType = getProjectType();\n  const { path } = getResourcePath(projectType);\n\n  return program\n    .command(\"create-resource\")\n    .allowExcessArguments(true)\n    .description(\n      `Create a new resource files (deprecated, please use \"add resource\" command)`,\n    )\n    .option(\n      \"-a, --actions [actions]\",\n      \"Only generate the specified actions. (ex: list,create,edit,show)\",\n      \"list,create,edit,show\",\n    )\n    .option(\"-p, --path [path]\", \"Path to generate the resource files\", path)\n    .action(action);\n};\n\nconst action = async (\n  params: { actions: string; path: string },\n  options: Command,\n) => {\n  createResources(params, options.args);\n};\n\nexport default load;\n","import type { NODE_ENV } from \"@definitions/node\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst envSearchMap: Record<Exclude<NODE_ENV, \"custom\">, RegExp> = {\n  development: /dev/i,\n  production: /prod/i,\n  test: /test|tst/i,\n  \"continuous-integration\": /ci/i,\n  \"user-acceptance-testing\": /uat/i,\n  \"system-integration-testing\": /sit/i,\n};\n\nexport const getNodeEnv = (): NODE_ENV => {\n  const nodeEnv = process.env.NODE_ENV;\n\n  if (!nodeEnv) {\n    return \"development\";\n  }\n\n  let env: NODE_ENV = \"custom\";\n\n  for (const [key, value] of Object.entries(envSearchMap)) {\n    if (value.test(nodeEnv)) {\n      env = key as NODE_ENV;\n      break;\n    }\n  }\n\n  return env;\n};\n\nexport const ENV = {\n  NODE_ENV: getNodeEnv(),\n  REFINE_NO_TELEMETRY: process.env.REFINE_NO_TELEMETRY || \"false\",\n  UPDATE_NOTIFIER_IS_DISABLED:\n    process.env.UPDATE_NOTIFIER_IS_DISABLED || \"false\",\n  UPDATE_NOTIFIER_CACHE_TTL:\n    process.env.UPDATE_NOTIFIER_CACHE_TTL || 1000 * 60 * 60 * 24, // 24 hours,\n  REFINE_PROXY_DOMAIN: process.env.REFINE_PROXY_DOMAIN || \"https://refine.dev\",\n  REFINE_PROXY_TARGET:\n    process.env.REFINE_PROXY_TARGET || \"http://localhost:3000\",\n  REFINE_PROXY_PORT: process.env.REFINE_PROXY_PORT || \"7313\",\n  REFINE_PROXY_REWRITE_URL:\n    process.env.REFINE_REWRITE_URL || \"http://localhost:7313\",\n};\n","import { ENV } from \"@utils/env\";\nimport type { Command } from \"commander\";\nimport express from \"express\";\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport type { OnProxyResCallback } from \"http-proxy-middleware/dist/types\";\n\nconst load = (program: Command) => {\n  return program\n    .command(\"proxy\")\n    .description(\"Manage proxy settings\")\n    .action(action)\n    .option(\n      \"-p, --port [port]\",\n      \"Port to serve the proxy server. You can also set this with the `REFINE_PROXY_PORT` environment variable.\",\n      ENV.REFINE_PROXY_PORT,\n    )\n    .option(\n      \"-t, --target [target]\",\n      \"Target to proxy. You can also set this with the `REFINE_PROXY_TARGET` environment variable.\",\n      ENV.REFINE_PROXY_TARGET,\n    )\n    .option(\n      \"-d, --domain [domain]\",\n      \"Domain to proxy. You can also set this with the `REFINE_PROXY_DOMAIN` environment variable.\",\n      ENV.REFINE_PROXY_DOMAIN,\n    )\n    .option(\n      \"-r, --rewrite-url [rewrite URL]\",\n      \"Rewrite URL for redirects. You can also set this with the `REFINE_PROXY_REWRITE_URL` environment variable.\",\n      ENV.REFINE_PROXY_REWRITE_URL,\n    );\n};\n\nconst action = async ({\n  port,\n  target,\n  domain,\n  rewriteUrl,\n}: {\n  port: string;\n  target: string;\n  domain: string;\n  rewriteUrl: string;\n}) => {\n  const app = express();\n\n  const targetUrl = new URL(target);\n\n  const onProxyRes: OnProxyResCallback | undefined =\n    targetUrl.protocol === \"http:\"\n      ? (proxyRes) => {\n          if (proxyRes.headers[\"set-cookie\"]) {\n            proxyRes.headers[\"set-cookie\"]?.forEach((cookie, i) => {\n              if (proxyRes?.headers?.[\"set-cookie\"]) {\n                proxyRes.headers[\"set-cookie\"][i] = cookie.replace(\n                  \"Secure;\",\n                  \"\",\n                );\n              }\n            });\n          }\n        }\n      : undefined;\n\n  app.use(\n    \"/.refine\",\n    createProxyMiddleware({\n      target: `${domain}/.refine`,\n      changeOrigin: true,\n      pathRewrite: { \"^/.refine\": \"\" },\n      logProvider: () => ({\n        log: console.log,\n        info: (msg) => {\n          if (`${msg}`.includes(\"Proxy rewrite rule created\")) return;\n\n          if (`${msg}`.includes(\"Proxy created\")) {\n            console.log(\n              `Proxying localhost:${port}/.refine to ${domain}/.refine`,\n            );\n          } else if (msg) {\n            console.log(msg);\n          }\n        },\n        warn: console.warn,\n        debug: console.debug,\n        error: console.error,\n      }),\n    }),\n  );\n\n  app.use(\n    \"/.auth\",\n    createProxyMiddleware({\n      target: `${domain}/.auth`,\n      changeOrigin: true,\n      cookieDomainRewrite: {\n        \"refine.dev\": \"\",\n      },\n      headers: {\n        \"auth-base-url-rewrite\": `${rewriteUrl}/.auth`,\n      },\n      pathRewrite: { \"^/.auth\": \"\" },\n      logProvider: () => ({\n        log: console.log,\n        info: (msg) => {\n          if (`${msg}`.includes(\"Proxy rewrite rule created\")) return;\n\n          if (`${msg}`.includes(\"Proxy created\")) {\n            console.log(`Proxying localhost:${port}/.auth to ${domain}/.auth`);\n          } else if (msg) {\n            console.log(msg);\n          }\n        },\n        warn: console.warn,\n        debug: console.debug,\n        error: console.error,\n      }),\n      onProxyRes,\n    }),\n  );\n\n  app.use(\n    \"*\",\n    createProxyMiddleware({\n      target: `${target}`,\n      changeOrigin: true,\n      ws: true,\n      logProvider: () => ({\n        log: console.log,\n        info: (msg) => {\n          if (`${msg}`.includes(\"Proxy created\")) {\n            console.log(`Proxying localhost:${port} to ${target}`);\n          } else if (msg) {\n            console.log(msg);\n          }\n        },\n        warn: console.warn,\n        debug: console.debug,\n        error: console.error,\n      }),\n    }),\n  );\n\n  app.listen(Number(port));\n};\n\nexport default load;\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { type Command, Option } from \"commander\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { getPlatformOptionDescription, getRunnerDescription } from \"../utils\";\n\nconst start = (program: Command) => {\n  return program\n    .command(\"start\")\n    .description(getRunnerDescription(\"start\"))\n    .allowUnknownOption(true)\n    .addOption(\n      new Option(\n        \"-p, --platform <platform>\",\n        getPlatformOptionDescription(),\n      ).choices(\n        Object.values(ProjectTypes).filter(\n          (type) => type !== ProjectTypes.UNKNOWN,\n        ),\n      ),\n    )\n    .argument(\"[args...]\")\n    .action(action);\n};\n\nconst action = async (\n  args: string[],\n  { platform }: { platform: ProjectTypes },\n) => {\n  const projectType = getProjectType(platform);\n\n  const binPath = projectScripts[projectType].getBin(\"start\");\n  const command = projectScripts[projectType].getStart(args);\n\n  await updateNotifier();\n\n  runScript(binPath, command);\n};\n\nexport default start;\n","import Conf from \"conf\";\nimport chalk from \"chalk\";\nimport { isRefineUptoDate } from \"@commands/check-updates\";\nimport { printUpdateWarningTable } from \"@components/update-warning-table\";\nimport type { RefinePackageInstalledVersionData } from \"@definitions/package\";\nimport { getInstalledRefinePackages } from \"@utils/package\";\nimport { ENV } from \"@utils/env\";\nimport { stringToBase64 } from \"@utils/encode\";\n\nconst STORE_NAME = \"refine-update-notifier\";\n\nexport interface Store {\n  key: string;\n  lastUpdated: number;\n  packages: RefinePackageInstalledVersionData[];\n}\n\nexport const store = new Conf<Store>({\n  projectName: STORE_NAME,\n  defaults: {\n    key: \"\",\n    lastUpdated: 0,\n    packages: [],\n  },\n});\n\n// update notifier should not throw any unhandled error to prevent breaking user workflow.\nexport const updateNotifier = async () => {\n  if (isUpdateNotifierDisabled()) return;\n\n  const shouldUpdate = await shouldUpdatePackagesCache();\n  if (shouldUpdate === null) return;\n  if (shouldUpdate) {\n    updatePackagesCache();\n    return;\n  }\n\n  showWarning();\n  updatePackagesCache();\n};\n\n/**\n * renders outdated packages table if there is any\n */\nconst showWarning = async () => {\n  const packages = store.get(\"packages\");\n  if (!packages?.length) return;\n\n  await printUpdateWarningTable({ data: packages });\n  console.log(\"\\n\");\n};\n\n/**\n * @returns `null` It's mean something went wrong while checking key or cache. so we should not update cache.\n * @returns `boolean` if cache should be updated or not\n *   if cache is expired or key is invalid, update cache in background and not show warning\n */\nexport const shouldUpdatePackagesCache = async () => {\n  const isKeyValid = await validateKey();\n  const isExpired = isPackagesCacheExpired();\n\n  if (isKeyValid === null) return null;\n\n  if (isExpired || !isKeyValid) return true;\n\n  return false;\n};\n\n/**\n * @returns `null` something went wrong\n * @returns `packages` if packages updated\n */\nexport const updatePackagesCache = async () => {\n  try {\n    const packages = await isRefineUptoDate();\n\n    store.set(\"packages\", packages);\n    store.set(\"lastUpdated\", Date.now());\n    store.set(\"key\", await generateKeyFromPackages());\n\n    return packages;\n  } catch (error) {\n    // invalidate store\n    store.set(\"packages\", []);\n    store.set(\"lastUpdated\", Date.now());\n    store.set(\"key\", \"\");\n    return null;\n  }\n};\n\nexport const isPackagesCacheExpired = () => {\n  const lastUpdated = store.get(\"lastUpdated\");\n\n  if (!lastUpdated) return true;\n\n  const now = Date.now();\n\n  const diff = now - lastUpdated;\n  const cacheTTL = Number(ENV.UPDATE_NOTIFIER_CACHE_TTL);\n\n  return diff >= cacheTTL;\n};\n\n/**\n * @returns `true` if key is valid\n * @returns `false` if key is invalid\n * @returns `null` if there is an error\n */\nexport const validateKey = async () => {\n  const key = store.get(\"key\");\n  const newKey = await generateKeyFromPackages();\n\n  if (newKey === null) return null;\n\n  return key === newKey;\n};\n\n/**\n * @returns `null` if there is an error\n * @returns `string` if key is generated\n */\nexport const generateKeyFromPackages = async () => {\n  const packages = await getInstalledRefinePackages();\n  if (!packages) {\n    console.error(\n      chalk.red(\n        \"Something went wrong when trying to get installed `Refine` packages.\",\n      ),\n    );\n\n    return null;\n  }\n\n  const currentVersionsWithName = packages.map((p) => `${p.name}@${p.version}`);\n  const hash = stringToBase64(currentVersionsWithName.toString());\n\n  return hash;\n};\n\nexport const isUpdateNotifierDisabled = () => {\n  return ENV.UPDATE_NOTIFIER_IS_DISABLED.toLocaleLowerCase() === \"true\";\n};\n","export const stringToBase64 = (str: string) => {\n  if (typeof btoa !== \"undefined\") {\n    return btoa(str);\n  }\n\n  return Buffer.from(str).toString(\"base64\");\n};\n\nexport const base64ToString = (base64: string) => {\n  if (typeof atob !== \"undefined\") {\n    return atob(base64);\n  }\n  return Buffer.from(base64, \"base64\").toString();\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\n/**\n * Map `Refine` cli commands to project script\n */\nexport const projectScripts = {\n  [ProjectTypes.REACT_SCRIPT]: {\n    getDev: (args: string[]) => [\"start\", ...args],\n    getStart: (args: string[]) => [\"start\", ...args],\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: () => require.resolve(\".bin/react-scripts\"),\n  },\n  [ProjectTypes.VITE]: {\n    getDev: (args: string[]) => [\"dev\", ...args],\n    getStart: (args: string[]) => [\"preview\", ...args],\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: () => require.resolve(\".bin/vite\"),\n  },\n  [ProjectTypes.NEXTJS]: {\n    getDev: (args: string[]) => [\"dev\", ...args],\n    getStart: (args: string[]) => [\"start\", ...args],\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: () => require.resolve(\".bin/next\"),\n  },\n  [ProjectTypes.REMIX]: {\n    getDev: (args: string[]) => [\"dev\", ...args],\n    getStart: (args: string[]) => {\n      // remix-serve accepts a path to the entry file as an argument\n      // if we have arguments, we will pass them to remix-serve and do nothing.\n      // ex: `refine start ./build/index.js`\n      const hasArgs = args?.length;\n      if (hasArgs) {\n        return args;\n      }\n\n      // otherwise print a warning and use `./build/index.js` as default\n      console.log();\n      console.warn(\n        \"🚨 Remix requires a path to the entry file. Please provide it as an argument to `refine start` command in package.json scripts\",\n      );\n      console.warn(\"Refine will use `./build/index.js` as default\");\n      console.warn(\"Example: `refine start ./build/index.js`\");\n      console.log();\n\n      return [\"./build/index.js\"];\n    },\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: (type?: \"dev\" | \"start\" | \"build\") => {\n      const binName = type === \"start\" ? \"remix-serve\" : \"remix\";\n      return require.resolve(`.bin/${binName}`);\n    },\n  },\n  [ProjectTypes.CRACO]: {\n    getDev: (args: string[]) => [\"start\", ...args],\n    getStart: (args: string[]) => [\"start\", ...args],\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: () => require.resolve(\".bin/craco\"),\n  },\n  [ProjectTypes.PARCEL]: {\n    getDev: (args: string[]) => [\"start\", ...args],\n    getStart: (args: string[]) => [\"start\", ...args],\n    getBuild: (args: string[]) => [\"build\", ...args],\n    getBin: () => require.resolve(\".bin/parcel\"),\n  },\n  [ProjectTypes.UNKNOWN]: {\n    getDev: (args: string[]) => [...args],\n    getStart: (args: string[]) => [...args],\n    getBuild: (args: string[]) => [...args],\n    getBin: () => {\n      return \"unknown\";\n    },\n  },\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport execa from \"execa\";\n\nexport const runScript = async (binPath: string, args: string[]) => {\n  if (binPath === \"unknown\") {\n    const supportedProjectTypes = Object.values(ProjectTypes)\n      .filter((v) => v !== \"unknown\")\n      .join(\", \");\n\n    console.error(\n      `We couldn't find executable for your project. Supported executables are ${supportedProjectTypes}.\\nPlease use your own script directly. If you think this is an issue, please report it at: https://github.com/refinedev/refine/issues`,\n    );\n\n    return;\n  }\n\n  const execution = execa(binPath, args, {\n    stdio: \"pipe\",\n    windowsHide: false,\n    env: {\n      FORCE_COLOR: \"true\",\n      ...process.env,\n    },\n  });\n\n  execution.stdout?.pipe(process.stdout);\n  execution.stderr?.pipe(process.stderr);\n\n  return await execution;\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\n\nexport const getRunnerDescription = (runner: \"dev\" | \"start\" | \"build\") => {\n  let projectType = getProjectType();\n\n  let command: string[] = [];\n  switch (runner) {\n    case \"dev\":\n      command = projectScripts[projectType].getDev([\"\"]);\n      break;\n    case \"start\":\n      command = projectScripts[projectType].getStart([\"\"]);\n      break;\n    case \"build\":\n      command = projectScripts[projectType].getBuild([\"\"]);\n      break;\n  }\n\n  if (projectType === ProjectTypes.REMIX && runner === \"start\") {\n    projectType = \"remix-serve\" as ProjectTypes;\n  }\n\n  return `It runs: \\`${projectType} ${command.join(\n    \" \",\n  )}\\`. Also accepts all the arguments \\`${projectType}\\` accepts.`;\n};\n\nexport const getPlatformOptionDescription = () => {\n  return `Platform to run command on. \\nex: ${Object.values(ProjectTypes).join(\n    \", \",\n  )}`;\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { type Command, Option } from \"commander\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { devtoolsRunner } from \"src/commands/devtools\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { getPlatformOptionDescription, getRunnerDescription } from \"../utils\";\nimport { isDevtoolsInstalled } from \"@utils/package\";\n\nconst dev = (program: Command) => {\n  return program\n    .command(\"dev\")\n    .description(getRunnerDescription(\"dev\"))\n    .allowUnknownOption(true)\n    .addOption(\n      new Option(\n        \"-p, --platform <platform>\",\n        getPlatformOptionDescription(),\n      ).choices(\n        Object.values(ProjectTypes).filter(\n          (type) => type !== ProjectTypes.UNKNOWN,\n        ),\n      ),\n    )\n    .addOption(\n      new Option(\n        \"-d, --devtools <devtools>\",\n        \"Start Refine Devtools server\",\n      ).default(\"true\", \"true if devtools is installed\"),\n    )\n    .argument(\"[args...]\")\n    .action(action);\n};\n\nconst action = async (\n  args: string[],\n  { platform, ...params }: { devtools: string; platform: ProjectTypes },\n) => {\n  const projectType = getProjectType(platform);\n\n  const binPath = projectScripts[projectType].getBin(\"dev\");\n  const command = projectScripts[projectType].getDev(args);\n\n  await updateNotifier();\n\n  const devtoolsDefault = await isDevtoolsInstalled();\n\n  const devtools = params.devtools === \"false\" ? false : devtoolsDefault;\n\n  if (devtools) {\n    devtoolsRunner({ exitOnError: false });\n  }\n\n  runScript(binPath, command);\n};\n\nexport default dev;\n","import { server } from \"@refinedev/devtools-server\";\nimport { addDevtoolsComponent } from \"@transformers/add-devtools-component\";\nimport {\n  getInstalledRefinePackagesFromNodeModules,\n  getPackageJson,\n  getPreferedPM,\n  installPackagesSync,\n  isDevtoolsInstalled,\n} from \"@utils/package\";\nimport { hasDefaultScript } from \"@utils/refine\";\nimport spinner from \"@utils/spinner\";\nimport boxen from \"boxen\";\nimport cardinal from \"cardinal\";\nimport chalk from \"chalk\";\nimport { Argument, type Command } from \"commander\";\nimport dedent from \"dedent\";\nimport semver from \"semver\";\n\ntype DevtoolsCommand = \"start\" | \"init\";\n\nconst commands: DevtoolsCommand[] = [\"start\", \"init\"];\nconst defaultCommand: DevtoolsCommand = \"start\";\n\nconst minRefineCoreVersionForDevtools = \"4.42.0\";\n\nconst load = (program: Command) => {\n  return program\n    .command(\"devtools\")\n    .description(\n      \"Start or install Refine Devtools server; it starts on port 5001.\",\n    )\n    .addArgument(\n      new Argument(\"[command]\", \"devtools related commands\")\n        .choices(commands)\n        .default(defaultCommand),\n    )\n    .addHelpText(\n      \"after\",\n      `\nCommands:\n    start     Start Refine Devtools server\n    init      Install Refine Devtools client and adds it to your project\n`,\n    )\n    .action(action);\n};\n\nexport const action = async (command: DevtoolsCommand) => {\n  switch (command) {\n    case \"start\":\n      devtoolsRunner();\n      return;\n    case \"init\":\n      devtoolsInstaller();\n      return;\n  }\n};\n\nconst devtoolsInstaller = async () => {\n  const corePackage = await getRefineCorePackage();\n\n  const isInstalled = await spinner(\n    isDevtoolsInstalled,\n    \"Checking if devtools is installed...\",\n  );\n  if (isInstalled) {\n    console.log(\"🎉 Refine Devtools is already installed\");\n    return;\n  }\n\n  if (\n    corePackage &&\n    (await validateCorePackageIsNotDeprecated({ pkg: corePackage }))\n  ) {\n    return;\n  }\n\n  console.log(\"🌱 Installing Refine Devtools...\");\n  const packagesToInstall = [\"@refinedev/devtools@latest\"];\n  // we should update core package if it is lower than minRefineCoreVersionForDevtools\n  if (\n    !corePackage ||\n    semver.lt(corePackage.version, minRefineCoreVersionForDevtools)\n  ) {\n    packagesToInstall.push(\"@refinedev/core@latest\");\n    console.log(\"🌱 Refine core package is being updated for devtools...\");\n  }\n  await installPackagesSync(packagesToInstall);\n\n  // empty line\n  console.log(\"\");\n  console.log(\"\");\n\n  console.log(\"🌱 Adding devtools component to your project....\");\n  await addDevtoolsComponent();\n  console.log(\n    \"✅ Refine Devtools package and components added to your project\",\n  );\n  // if core package is updated, we should show the updated version\n  if (packagesToInstall.includes(\"@refinedev/core@latest\")) {\n    const updatedCorePackage = await getRefineCorePackage();\n    console.log(\n      `✅ Refine core package updated from ${\n        corePackage?.version ?? \"unknown\"\n      } to ${updatedCorePackage?.version ?? \"unknown\"}`,\n    );\n    console.log(\n      `   Changelog: ${chalk.underline.blueBright(\n        `https://c.refine.dev/core#${\n          corePackage?.version.replaceAll(\".\", \"\") ?? \"\"\n        }`,\n      )}`,\n    );\n  }\n\n  // empty line\n  console.log(\"\");\n\n  const { dev } = hasDefaultScript();\n  if (dev) {\n    console.log(\n      `🙌 You're good to go. \"npm run dev\" will automatically starts the devtools server.`,\n    );\n    console.log(\n      `👉 You can also start the devtools server manually by running \"refine devtools start\"`,\n    );\n    return;\n  }\n\n  if (!dev) {\n    const scriptDev = getPackageJson().scripts?.dev;\n\n    console.log(\n      `🚨 Your have modified the \"dev\" script in your package.json. Because of that, \"npm run dev\" will not start the devtools server automatically.`,\n    );\n    console.log(`👉 You can append \"refine devtools\" to \"dev\" script`);\n    console.log(\n      `👉 You can start the devtools server manually by running \"refine devtools\"`,\n    );\n\n    // empty line\n    console.log(\"\");\n    console.log(\n      boxen(\n        cardinal.highlight(\n          dedent(`\n                {\n                    \"scripts\": {\n                        \"dev\": \"${scriptDev} & refine devtools\",\n                        \"refine\": \"refine\"\n                    }\n                }  \n        `),\n        ),\n        {\n          padding: 1,\n          title: \"package.json\",\n          dimBorder: true,\n          borderColor: \"blueBright\",\n          borderStyle: \"round\",\n        },\n      ),\n    );\n  }\n};\n\nexport const devtoolsRunner = async ({\n  exitOnError = true,\n}: { exitOnError?: boolean } = {}) => {\n  const corePackage = await getRefineCorePackage();\n\n  if (corePackage) {\n    if (await validateCorePackageIsNotDeprecated({ pkg: corePackage })) {\n      return;\n    }\n\n    if (semver.lt(corePackage.version, minRefineCoreVersionForDevtools)) {\n      console.log(\n        `🚨 You're using an old version of Refine(${corePackage.version}). Refine version should be @4.42.0 or higher to use devtools.`,\n      );\n      const pm = await getPreferedPM();\n      console.log(\n        `👉 You can update @refinedev/core package by running \"${pm.name} run refine update\"`,\n      );\n      return;\n    }\n  }\n\n  server({\n    onError: () => {\n      if (exitOnError) {\n        process.exit(1);\n      }\n    },\n  }).catch((e) => {});\n};\n\nconst getRefineCorePackage = async () => {\n  const installedRefinePackages =\n    await getInstalledRefinePackagesFromNodeModules();\n  const corePackage = installedRefinePackages?.find(\n    (pkg) =>\n      pkg.name === \"@refinedev/core\" || pkg.name === \"@pankod/refine-core\",\n  );\n\n  if (!corePackage) {\n    return undefined;\n  }\n\n  return corePackage;\n};\n\nexport const validateCorePackageIsNotDeprecated = async ({\n  pkg,\n}: {\n  pkg: { name: string; version: string };\n}) => {\n  if (pkg.name === \"@pankod/refine-core\" || semver.lt(pkg.version, \"4.0.0\")) {\n    console.log(\n      `🚨 You're using an old version of Refine(${pkg.version}). Refine version should be @4.42.0 or higher to use devtools.`,\n    );\n    console.log(\"You can follow migration guide to update Refine.\");\n    console.log(\n      chalk.blue(\"https://refine.dev/docs/migration-guide/3x-to-4x/\"),\n    );\n    return true;\n  }\n\n  return false;\n};\n\nexport default load;\n","import type {\n  API,\n  FileInfo,\n  JSCodeshift,\n  JSXElement,\n  ASTPath,\n  Collection,\n} from \"jscodeshift\";\nimport execa from \"execa\";\nimport { prettierFormat } from \"../utils/swizzle/prettierFormat\";\n\nexport const parser = \"tsx\";\n\n// runs .bin/jscodeshift with the default export transformer on the current directory\nexport const addDevtoolsComponent = async () => {\n  const jscodeshiftExecutable = require.resolve(\".bin/jscodeshift\");\n  const { stderr } = execa.sync(jscodeshiftExecutable, [\n    \"./\",\n    \"--extensions=ts,tsx,js,jsx\",\n    \"--parser=tsx\",\n    `--transform=${__dirname}/../src/transformers/add-devtools-component.ts`,\n    \"--ignore-pattern=.cache\",\n    \"--ignore-pattern=node_modules\",\n    \"--ignore-pattern=build\",\n    \"--ignore-pattern=.next\",\n    \"--ignore-pattern=dist\",\n  ]);\n\n  if (stderr) {\n    console.log(stderr);\n  }\n};\n\nexport default async function transformer(file: FileInfo, api: API) {\n  const j = api.jscodeshift;\n  const source = j(file.source);\n\n  const refineElement = source.find(j.JSXElement, {\n    openingElement: {\n      name: {\n        name: \"Refine\",\n      },\n    },\n  });\n\n  const hasRefineElement = refineElement.length !== 0;\n\n  if (!hasRefineElement) {\n    return;\n  }\n\n  if (hasDevtoolsImport(j, source) && hasDevtoolsProvider(j, source)) {\n    return;\n  }\n\n  addDevtoolsImport(j, source);\n  refineElement.forEach((path) => {\n    wrapWithDevtoolsProvider(j, path);\n  });\n\n  return await prettierFormat(source.toSource());\n}\n\nexport const hasDevtoolsImport = (j: JSCodeshift, source: Collection) => {\n  return source.find(j.ImportDeclaration, {\n    source: {\n      value: \"@refinedev/devtools\",\n    },\n  }).length;\n};\n\nexport const hasDevtoolsProvider = (j: JSCodeshift, source: Collection) => {\n  return source.find(j.JSXElement, {\n    openingElement: {\n      name: {\n        name: \"DevtoolsProvider\",\n      },\n    },\n  }).length;\n};\n\nexport const addDevtoolsImport = (j: JSCodeshift, source: Collection) => {\n  const devtoolsImport = j.importDeclaration(\n    [\n      j.importSpecifier(j.identifier(\"DevtoolsProvider\")),\n      j.importSpecifier(j.identifier(\"DevtoolsPanel\")),\n    ],\n    j.literal(\"@refinedev/devtools\"),\n  );\n\n  source.get().node.program.body.unshift(devtoolsImport);\n};\n\nconst wrapWithDevtoolsProvider = (\n  j: JSCodeshift,\n  refineEelement: ASTPath<JSXElement>,\n) => {\n  const panel = j.jsxElement(\n    j.jsxOpeningElement(j.jsxIdentifier(\"DevtoolsPanel\")),\n  );\n  panel.openingElement.selfClosing = true;\n\n  const provider = j.jsxElement(\n    j.jsxOpeningElement(j.jsxIdentifier(\"DevtoolsProvider\")),\n    j.jsxClosingElement(j.jsxIdentifier(\"DevtoolsProvider\")),\n    // Pass in the refineEelement component as children\n    [refineEelement.value, panel],\n  );\n\n  j(refineEelement).replaceWith(provider);\n  return { panel, provider };\n};\n","import { format, resolveConfig } from \"prettier\";\n\nexport const prettierFormat = async (code: string) => {\n  try {\n    const prettierConfig = await resolveConfig(process.cwd());\n\n    return format(code, {\n      ...(prettierConfig ?? {}),\n      parser: \"typescript\",\n    });\n  } catch (err) {\n    return code;\n  }\n};\n","import { getPackageJson } from \"@utils/package\";\n\ntype ReturnType = {\n  dev: boolean;\n};\n\n/**\n * Checks if the project has a refine script in package.json\n */\nexport const hasDefaultScript = (): ReturnType => {\n  const packageJson = getPackageJson();\n\n  const scripts = packageJson.scripts || {};\n\n  const isDefault =\n    ((scripts?.dev || \"\") as string).match(/refine dev(\\s|$|;){1}/) !== null;\n\n  return {\n    dev: isDefault,\n  };\n};\n","import { Command, Option } from \"commander\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { getPlatformOptionDescription, getRunnerDescription } from \"../utils\";\nimport { ProjectTypes } from \"@definitions/projectTypes\";\n\nconst build = (program: Command) => {\n    return program\n        .command(\"build\")\n        .description(getRunnerDescription(\"build\"))\n        .allowUnknownOption(true)\n        .addOption(\n            new Option(\n                \"-p, --platform <platform>\",\n                getPlatformOptionDescription(),\n            ).choices(\n                Object.values(ProjectTypes).filter(\n                    (type) => type !== ProjectTypes.UNKNOWN,\n                ),\n            ),\n        )\n        .argument(\"[args...]\")\n        .action(action);\n};\n\nconst action = async (\n    args: string[],\n    { platform }: { platform: ProjectTypes },\n) => {\n    const projectType =  getProjectType(platform);\n\n    const binPath = projectScripts[projectType].getBin(\"build\");\n    const command = projectScripts[projectType].getBuild(args);\n\n\n    await updateNotifier();\n\n    try {\n        await runScript(binPath, command);\n    } catch (error) {\n        process.exit(1);\n    }\n};\n\nexport default build;\n","import { getPreferedPM, getScripts } from \"@utils/package\";\nimport chalk from \"chalk\";\nimport type { Command } from \"commander\";\nimport { runScript } from \"../runScript\";\n\nconst run = (program: Command) => {\n  return program\n    .command(\"run\")\n    .description(\n      \"Runs a defined package script. If no `command` is provided, it will list the available scripts\",\n    )\n    .allowUnknownOption(true)\n    .argument(\"[command] [args...]\")\n    .action(action);\n};\n\nconst action = async (args: string[]) => {\n  const [script, ...restArgs] = args;\n\n  const scriptsInPackage = getScripts();\n\n  // Show available scripts when no script is provided\n  if (!script) {\n    console.log(`Available via ${chalk.blue(\"`refine run`\")}:\\n`);\n    for (const [key, value] of Object.entries(scriptsInPackage)) {\n      console.log(`  ${key}`);\n      console.log(`    ${chalk.dim(value)}`);\n      console.log();\n    }\n\n    return;\n  }\n\n  // Check if script exists in package.json\n  const isDefinedScript = Object.keys(scriptsInPackage).includes(script);\n  // If script is not defined, run from node_modules\n  if (!isDefinedScript) {\n    const binPath = `${process.cwd()}/node_modules/.bin/${script}`;\n    runScript(binPath, restArgs);\n    return;\n  }\n\n  const pm = await getPreferedPM();\n  runScript(pm.name, [\"run\", script, ...restArgs]);\n};\n\nexport default run;\n","import React from \"react\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport type { Command, OptionValues } from \"commander\";\nimport inquirerAutoCompletePrompt from \"inquirer-autocomplete-prompt\";\nimport { ensureFile, pathExists, readFile, writeFile } from \"fs-extra\";\n\nimport { getRefineConfig } from \"@utils/swizzle\";\nimport { prettierFormat } from \"@utils/swizzle/prettierFormat\";\nimport {\n  getInstalledRefinePackagesFromNodeModules,\n  isPackageHaveRefineConfig,\n} from \"@utils/package\";\n\nimport { printSwizzleMessage } from \"@components/swizzle-message\";\n\nimport type { SwizzleFile } from \"@definitions\";\nimport { parseSwizzleBlocks } from \"@utils/swizzle/parseSwizzleBlocks\";\nimport { reorderImports } from \"@utils/swizzle/import\";\nimport { SWIZZLE_CODES } from \"@utils/swizzle/codes\";\nimport boxen from \"boxen\";\nimport { getPathPrefix } from \"@utils/swizzle/getPathPrefix\";\nimport { installRequiredPackages } from \"./install-required-packages\";\n\nconst swizzle = (program: Command) => {\n  return program\n    .command(\"swizzle\")\n    .description(\n      `Export a component or a function from ${chalk.bold(\n        \"Refine\",\n      )} packages to customize it in your project`,\n    )\n    .action(action);\n};\n\nconst getAutocompleteSource =\n  (\n    rawList: Array<{\n      label: string;\n      group?: string;\n      value?: Record<string, unknown>;\n    }>,\n  ) =>\n  (_answers: {}, input = \"\") => {\n    const filtered = rawList.filter(\n      (el) =>\n        el.label.toLowerCase().includes(input.toLowerCase()) ||\n        el.group?.toLowerCase().includes(input.toLowerCase()),\n    );\n\n    return filtered.flatMap((component, index, arr) => {\n      const hasTitle =\n        component?.group && arr[index - 1]?.group !== component.group;\n      const withTitle =\n        hasTitle && component.group\n          ? [new inquirer.Separator(chalk.bold(component.group))]\n          : [];\n\n      return [\n        ...withTitle,\n        {\n          name: ` ${component.label}`,\n          value: component?.value ? component.value : component,\n        },\n      ];\n    });\n  };\n\nconst action = async (_options: OptionValues) => {\n  inquirer.registerPrompt(\"autocomplete\", inquirerAutoCompletePrompt);\n\n  const installedPackages = await getInstalledRefinePackagesFromNodeModules();\n\n  const packagesWithConfig: Array<{ name: string; path: string }> = [];\n\n  await Promise.all(\n    installedPackages.map(async (pkg) => {\n      const hasConfig = await isPackageHaveRefineConfig(pkg.path);\n      const isNotDuplicate =\n        packagesWithConfig.findIndex((el) => el.name === pkg.name) === -1;\n      if (hasConfig && isNotDuplicate) {\n        packagesWithConfig.push(pkg);\n      }\n    }),\n  );\n\n  if (packagesWithConfig.length === 0) {\n    console.log(\"No Refine packages found with swizzle configuration.\");\n    return;\n  }\n\n  console.log(\n    `${boxen(\n      `Found ${chalk.blueBright(\n        packagesWithConfig.length,\n      )} installed ${chalk.blueBright.bold(\n        \"Refine\",\n      )} packages with swizzle configuration.`,\n      {\n        padding: 1,\n        textAlignment: \"center\",\n        dimBorder: true,\n        borderColor: \"blueBright\",\n        borderStyle: \"round\",\n      },\n    )}\\n`,\n  );\n\n  const packageConfigs = await Promise.all(\n    packagesWithConfig.map(async (pkg) => {\n      const config = (await getRefineConfig(pkg.path, true)) ??\n        (await getRefineConfig(pkg.path, false)) ?? {\n          swizzle: { items: [] },\n        };\n      return {\n        ...pkg,\n        config,\n      };\n    }),\n  );\n\n  const { selectedPackage } = await inquirer.prompt<{\n    selectedPackage: (typeof packageConfigs)[number];\n  }>([\n    {\n      type: \"autocomplete\",\n      pageSize: 10,\n      name: \"selectedPackage\",\n      message: \"Which package do you want to swizzle?\",\n      emptyText: \"No packages found.\",\n      source: getAutocompleteSource(\n        packageConfigs\n          .sort((a, b) =>\n            (a.config?.group ?? \"\").localeCompare(b.config?.group ?? \"\"),\n          )\n          .map((pkg) => ({\n            label: pkg.config?.name ?? pkg.name,\n            value: pkg,\n            group: pkg.config?.group,\n          })),\n      ),\n    },\n  ]);\n\n  const {\n    swizzle: { items, transform },\n  } = selectedPackage.config;\n\n  let selectedComponent: SwizzleFile | undefined = undefined;\n\n  if (items.length === 0) {\n    console.log(\n      `No swizzle items found for ${chalk.bold(\n        selectedPackage.config?.name ?? selectedPackage.name,\n      )}`,\n    );\n    return;\n  }\n  if (items.length === 1) {\n    selectedComponent = items[0];\n  } else if (items.length > 1) {\n    const response = await inquirer.prompt<{\n      selectedComponent: SwizzleFile;\n    }>([\n      {\n        type: \"list\",\n        pageSize: 10,\n        name: \"selectedComponent\",\n        message: \"Which component do you want to swizzle?\",\n        emptyText: \"No components found.\",\n        choices: getAutocompleteSource(\n          items.sort((a, b) => a.group.localeCompare(b.group)),\n        )({}, \"\"),\n      },\n    ]);\n    selectedComponent = response.selectedComponent;\n  }\n\n  if (!selectedComponent) {\n    console.log(\n      `No swizzle items selected for ${chalk.bold(\n        selectedPackage.config?.name ?? selectedPackage.name,\n      )}`,\n    );\n    return;\n  }\n\n  // this will be prepended to `destPath` values\n  const projectPathPrefix = getPathPrefix();\n\n  const createdFiles = await Promise.all(\n    selectedComponent.files.map(async (file) => {\n      try {\n        const srcPath = file.src\n          ? path.join(selectedPackage.path, file.src)\n          : undefined;\n        const destPath = file.dest\n          ? path.join(process.cwd(), projectPathPrefix, file.dest)\n          : undefined;\n\n        if (!srcPath) {\n          console.log(\"No src path found for file\", file);\n          return [\"\", SWIZZLE_CODES.SOURCE_PATH_NOT_FOUND] as [\n            targetPath: string,\n            statusCode: string,\n          ];\n        }\n\n        if (!destPath) {\n          console.log(\"No destination path found for file\", file);\n          return [\"\", SWIZZLE_CODES.TARGET_PATH_NOT_FOUND] as [\n            targetPath: string,\n            statusCode: string,\n          ];\n        }\n\n        const hasSrc = await pathExists(srcPath);\n\n        if (!hasSrc) {\n          return [destPath, SWIZZLE_CODES.SOURCE_PATH_NOT_A_FILE] as [\n            targetPath: string,\n            statusCode: string,\n          ];\n        }\n\n        const srcContent = await readFile(srcPath, \"utf-8\");\n        const isDestExist = await pathExists(destPath);\n\n        if (isDestExist) {\n          return [destPath, SWIZZLE_CODES.TARGET_ALREADY_EXISTS] as [\n            targetPath: string,\n            statusCode: string,\n          ];\n        }\n\n        await ensureFile(destPath);\n\n        const parsedContent = parseSwizzleBlocks(srcContent);\n\n        const fileTransformedContent =\n          file.transform?.(parsedContent) ?? parsedContent;\n\n        const transformedContent =\n          transform?.(fileTransformedContent, srcPath, destPath) ??\n          fileTransformedContent;\n\n        const reorderedContent = reorderImports(transformedContent);\n\n        const formatted = await prettierFormat(reorderedContent);\n\n        await writeFile(destPath, formatted);\n\n        return [destPath, SWIZZLE_CODES.SUCCESS] as [\n          targetPath: string,\n          statusCode: string,\n        ];\n      } catch (error) {\n        return [\"\", SWIZZLE_CODES.UNKNOWN_ERROR] as [\n          targetPath: string,\n          statusCode: string,\n        ];\n      }\n    }),\n  );\n\n  if (createdFiles.length > 0) {\n    printSwizzleMessage({\n      files: createdFiles,\n      label: selectedComponent.label,\n      message: selectedComponent.message,\n    });\n\n    if (selectedComponent?.requiredPackages?.length) {\n      await installRequiredPackages(selectedComponent.requiredPackages);\n    }\n  }\n};\n\nexport default swizzle;\n","import path from \"path\";\nimport type { RefineConfig } from \"@definitions\";\nimport { provideCliHelpers } from \"./provideCliHelpers\";\n\nexport const getRefineConfig = async (\n  packagePath: string,\n  isAbsolute?: boolean,\n) => {\n  try {\n    provideCliHelpers(packagePath, isAbsolute);\n\n    const config = require(\n      path.join(\n        isAbsolute ? packagePath : path.join(process.cwd(), packagePath),\n        \"refine.config.js\",\n      ),\n    ) as RefineConfig;\n\n    return config;\n  } catch (error) {\n    return undefined;\n  }\n};\n","import path from \"path\";\nimport * as RefineCLI from \"../../index\";\nimport { getFileContent } from \"./getFileContent\";\n\nconst Module = require(\"module\");\nconst originalRequire = Module.prototype.require;\n\nexport const provideCliHelpers = (\n  packagePath: string,\n  isAbsolute?: boolean,\n) => {\n  Module.prototype.require = function (...args: Parameters<NodeRequire>) {\n    if ((args[0] as unknown as string) === \"@refinedev/cli\") {\n      return {\n        ...RefineCLI,\n        getFileContent: (filePath: string) => {\n          return getFileContent.call(\n            {\n              absolutePackageDir: isAbsolute\n                ? packagePath\n                : path.join(process.cwd(), packagePath),\n            },\n            filePath,\n          );\n        },\n      };\n    }\n\n    //do your thing here\n    return originalRequire.apply(this, args);\n  };\n};\n","export * from \"./definitions/index.js\";\nexport { getImports, getNameChangeInImport } from \"./utils/swizzle/import.js\";\nexport { appendAfterImports } from \"./utils/swizzle/appendAfterImports.js\";\nexport { getFileContent } from \"./utils/swizzle/getFileContent.js\";\nexport type { ImportMatch, NameChangeMatch } from \"./utils/swizzle/import.js\";\n","const packageRegex =\n  /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\nexport type ImportMatch = {\n  statement: string;\n  importPath: string;\n  defaultImport?: string;\n  namedImports?: string;\n  namespaceImport?: string;\n};\n\nexport type NameChangeMatch = {\n  statement: string;\n  fromName: string;\n  toName: string;\n  afterCharacter?: string;\n};\n\nexport const getImports = (content: string): Array<ImportMatch> => {\n  const matches = content.matchAll(packageRegex);\n\n  const imports: Array<ImportMatch> = [];\n\n  for (const match of matches) {\n    const [\n      statement,\n      defaultImport,\n      namedImports,\n      namespaceImport,\n      importPath,\n    ] = match;\n\n    imports.push({\n      statement,\n      importPath,\n      ...(defaultImport && { defaultImport }),\n      ...(namedImports && { namedImports }),\n      ...(namespaceImport && { namespaceImport }),\n    });\n  }\n\n  return imports?.filter(Boolean);\n};\n\nexport const getNameChangeInImport = (\n  namedImportString: string,\n): Array<NameChangeMatch> => {\n  const matches = namedImportString.matchAll(nameChangeRegex);\n\n  const nameChanges: Array<NameChangeMatch> = [];\n\n  for (const match of matches) {\n    const [statement, fromName, _as, toName, afterCharacter] = match;\n\n    nameChanges.push({\n      statement,\n      fromName: fromName.trim(),\n      toName: toName.trim(),\n      afterCharacter,\n    });\n  }\n\n  return nameChanges;\n};\n\n/** @internal */\nexport const getContentBeforeImport = (\n  content: string,\n  importMatch: ImportMatch,\n): string => {\n  // get the content before the import statement and between the last import statement and the current one\n  const contentBeforeImport = content.substring(\n    0,\n    content.indexOf(importMatch.statement),\n  );\n  // get the last import statement\n  const lastImportStatement = getImports(contentBeforeImport).pop();\n\n  // if there is no last import statement, return the content before the current import statement\n  if (!lastImportStatement) {\n    return contentBeforeImport;\n  }\n\n  // get the content between the last import statement and the current one\n  const contentBetweenImports = contentBeforeImport.substring(\n    contentBeforeImport.indexOf(lastImportStatement?.statement) +\n      lastImportStatement?.statement?.length,\n  );\n\n  // return the content before the current import statement and between the last import statement and the current one\n  return contentBetweenImports;\n};\n\n/** @internal */\nexport const isImportHasBeforeContent = (\n  content: string,\n  importMatch: ImportMatch,\n): boolean => {\n  const contentBeforeImport = importMatch\n    ? getContentBeforeImport(content, importMatch)\n    : \"\";\n\n  return !!contentBeforeImport.trim();\n};\n\nconst IMPORT_ORDER = [\"react\", \"@refinedev/core\", \"@refinedev/\"];\n\nexport const reorderImports = (content: string): string => {\n  let newContent = content;\n  // imports can have comments before them, we need to preserve those comments and import statements.\n  // so we need to filter out the imports with comments before.\n  const allImports = getImports(content);\n  // remove `import type` imports\n  const allModuleImports = allImports.filter(\n    (importMatch) => !importMatch.statement.includes(\"import type \"),\n  );\n  const typeImports = allImports.filter((importMatch) =>\n    importMatch.statement.includes(\"import type\"),\n  );\n\n  const importsWithBeforeContent: ImportMatch[] = [];\n  const importsWithoutBeforeContent: ImportMatch[] = [];\n\n  allModuleImports.forEach((importMatch) => {\n    if (isImportHasBeforeContent(content, importMatch)) {\n      importsWithBeforeContent.push(importMatch);\n    } else {\n      importsWithoutBeforeContent.push(importMatch);\n    }\n  });\n\n  // insertion point is the first import statement, others will be replaced to empty string and added to the first import line\n  const insertionPoint = newContent.indexOf(\n    importsWithoutBeforeContent?.[0]?.statement,\n  );\n\n  // remove all the imports without comments before\n  importsWithoutBeforeContent.forEach((importMatch) => {\n    newContent = newContent.replace(importMatch.statement, \"\");\n  });\n\n  // remove all type imports\n  typeImports.forEach((importMatch) => {\n    newContent = newContent.replace(importMatch.statement, \"\");\n  });\n\n  // we need to merge the imports from the same package unless one of them is a namespace import]\n  const importsByPackage = importsWithoutBeforeContent.reduce(\n    (acc, importMatch) => {\n      const { importPath } = importMatch;\n\n      if (acc[importPath]) {\n        acc[importPath].push(importMatch);\n      } else {\n        acc[importPath] = [importMatch];\n      }\n\n      return acc;\n    },\n    {} as Record<string, ImportMatch[]>,\n  );\n\n  // merge the imports from the same package\n  const mergedImports = Object.entries(importsByPackage).map(\n    ([importPath, importMatches]) => {\n      // example: A\n      const defaultImport = importMatches.find(\n        (importMatch) => importMatch.defaultImport,\n      );\n\n      // example: * as A\n      const namespaceImport = importMatches.find(\n        (importMatch) => importMatch.namespaceImport,\n      );\n\n      // example: { A, B }\n      // example: { A as C, B }\n      // content inside the curly braces should be merged\n      const namedImports = importMatches\n        .filter((importMatch) => importMatch.namedImports)\n        .map((importMatch) => {\n          // remove curly braces and trim then split by comma (can be multiline)\n          const namedImports = (importMatch.namedImports ?? \"\")\n            .replace(/{|}/g, \"\")\n            .trim()\n            .split(\",\")\n            .map((namedImport) => namedImport.trim());\n\n          return namedImports.filter(Boolean).join(\", \");\n        })\n        .join(\", \");\n\n      let importLine = \"\";\n\n      // default import and namespace import can not be used together\n      // but we can use default import and named imports together\n      // so we need to merge them\n      if (namespaceImport) {\n        importLine += `${namespaceImport.statement}\\n`;\n      }\n      if (defaultImport || namedImports) {\n        if (defaultImport && namedImports) {\n          importLine += `import ${defaultImport.defaultImport}, { ${namedImports} } from \"${importMatches[0].importPath}\";\\n`;\n        } else if (defaultImport) {\n          importLine += `import ${defaultImport.defaultImport} from \"${importMatches[0].importPath}\";\\n`;\n        } else {\n          importLine += `import { ${namedImports} } from \"${importMatches[0].importPath}\";\\n`;\n        }\n      }\n\n      return [importPath, importLine] as [\n        importPath: string,\n        importLine: string,\n      ];\n    },\n  );\n\n  // sort the imports without comments before\n  // sort should be done by IMPORT_ORDER and alphabetically\n  // priority is exact match in IMPORT_ORDER, then includes match in IMPORT_ORDER, then alphabetically\n  const sortedImports = [...mergedImports].sort(\n    ([aImportPath], [bImportPath]) => {\n      const aImportOrderIndex = IMPORT_ORDER.findIndex((order) =>\n        aImportPath.includes(order),\n      );\n      const bImportOrderIndex = IMPORT_ORDER.findIndex((order) =>\n        bImportPath.includes(order),\n      );\n\n      if (aImportOrderIndex === bImportOrderIndex) {\n        return aImportPath.localeCompare(bImportPath);\n      }\n\n      if (aImportOrderIndex === -1) {\n        return 1;\n      }\n\n      if (bImportOrderIndex === -1) {\n        return -1;\n      }\n\n      return aImportOrderIndex - bImportOrderIndex;\n    },\n  );\n\n  // add the sorted imports to the insertion point keep the before and after content\n  // add the type imports after the sorted imports\n  const joinedModuleImports = sortedImports\n    .map(([, importLine]) => importLine)\n    .join(\"\");\n  const joinedTypeImports = typeImports\n    .map((importMatch) => importMatch.statement)\n    .join(\"\\n\");\n\n  newContent =\n    newContent.substring(0, insertionPoint) +\n    joinedModuleImports +\n    joinedTypeImports +\n    newContent.substring(insertionPoint);\n\n  return newContent;\n};\n","import { getImports } from \"./import\";\n\nexport const appendAfterImports = (content: string, append: string): string => {\n  const imports = getImports(content);\n  const lastImport = imports[imports.length - 1];\n\n  const lastImportIndex = lastImport\n    ? content.indexOf(lastImport.statement)\n    : content.length - 1;\n\n  return `${content.slice(\n    0,\n    lastImportIndex + lastImport?.statement.length,\n  )}\\n${append}\\n${content.slice(\n    lastImportIndex + lastImport?.statement.length,\n  )}`;\n};\n","import { readFileSync } from \"fs-extra\";\nimport { join } from \"path\";\n\nexport function getFileContent(\n  this: undefined | { absolutePackageDir?: string },\n  path: string,\n): string | undefined {\n  if (!this?.absolutePackageDir) {\n    return undefined;\n  }\n  try {\n    return readFileSync(join(this.absolutePackageDir, path)).toString();\n  } catch (err) {\n    return undefined;\n  }\n}\n","import React from \"react\";\nimport dedent from \"dedent\";\nimport { SWIZZLE_CODES } from \"@utils/swizzle/codes\";\nimport chalk from \"chalk\";\nimport { markedTerminalRenderer } from \"@utils/marked-terminal-renderer\";\n\ntype Params = {\n  label: string;\n  files: [targetPath: string, statusCode: string][];\n  message?: string;\n};\n\nexport const printSwizzleMessage = ({\n  label,\n  files,\n  message = \"**`Warning:`** You should use the component where you want to use it.\",\n}: Params) => {\n  const errors = files.filter(([, statusCode]) =>\n    Object.values(SWIZZLE_CODES)\n      .filter((code) => code !== SWIZZLE_CODES.SUCCESS)\n      .includes(statusCode),\n  );\n\n  let status = \"success\";\n\n  switch (errors.length) {\n    // no errors\n    case 0:\n      status = \"success\";\n      break;\n    // all errors\n    case files.length:\n      status = \"error\";\n      break;\n    // some errors\n    default:\n      status = \"warning\";\n      break;\n  }\n\n  const clearFilePath = (filePath: string) => {\n    const relative = filePath?.replace(process.cwd(), \"\");\n\n    if (relative?.startsWith(\"/\")) {\n      return relative.slice(1);\n    }\n    if (relative?.startsWith(\"./\")) {\n      return relative.slice(2);\n    }\n    return relative;\n  };\n\n  const printStatusMessage = () => {\n    switch (status) {\n      case \"success\":\n        console.log(\n          chalk.blueBright(`Successfully swizzled ${chalk.bold(label)}`),\n        );\n        return;\n      case \"warning\":\n        console.log(\n          chalk.yellowBright(\n            `Swizzle completed with errors for ${chalk.bold(label)}`,\n          ),\n        );\n        return;\n      case \"error\":\n        console.log(chalk.redBright(`Swizzle failed for ${chalk.bold(label)}`));\n        return;\n      default:\n        return;\n    }\n  };\n\n  const printFiles = () => {\n    const chalks = [];\n\n    chalks.push(chalk.dim(`File${files.length > 1 ? \"s\" : \"\"} created:`));\n    chalks.push(\n      files\n        .map(([targetPath, statusCode]) => {\n          if (statusCode === SWIZZLE_CODES.SUCCESS) {\n            return chalk.cyanBright.dim(` - ${clearFilePath(targetPath)}`);\n          }\n          if (statusCode === SWIZZLE_CODES.TARGET_ALREADY_EXISTS) {\n            return chalk.cyanBright.dim(\n              ` - ${chalk.yellowBright.bold(\n                \"[FILE_ALREADY_EXISTS] \",\n              )}${clearFilePath(targetPath)}`,\n            );\n          }\n          if (statusCode === SWIZZLE_CODES.SOURCE_PATH_NOT_A_FILE) {\n            return chalk.cyanBright.dim(\n              ` - ${chalk.yellowBright.bold(\n                \"[SOURCE NOT FOUND] \",\n              )}${clearFilePath(targetPath)}`,\n            );\n          }\n\n          return chalk.cyanBright.dim(\n            ` - ${chalk.yellowBright.bold(`[${statusCode}]`)}${clearFilePath(\n              targetPath,\n            )}`,\n          );\n        })\n        .join(\"\\n\"),\n    );\n\n    console.log(chalks.join(\"\\n\"));\n  };\n\n  const printSwizzleMessage = () => {\n    if (message && status !== \"error\") {\n      console.log(markedTerminalRenderer(dedent(`\\n${message}`)));\n    }\n  };\n\n  console.log(\"\");\n  printStatusMessage();\n  printFiles();\n  console.log(\"\");\n  printSwizzleMessage();\n};\n","export const SWIZZLE_CODES = {\n  SUCCESS: \"SUCCESS\",\n  UNKNOWN_ERROR: \"UNKNOWN_ERROR\",\n  SOURCE_PATH_NOT_FOUND: \"SOURCE_PATH_NOT_FOUND\",\n  TARGET_PATH_NOT_FOUND: \"TARGET_PATH_NOT_FOUND\",\n  SOURCE_PATH_NOT_A_FILE: \"SOURCE_PATH_NOT_A_FILE\",\n  TARGET_ALREADY_EXISTS: \"TARGET_ALREADY_EXISTS\",\n};\n","import chalk from \"chalk\";\nimport cardinal from \"cardinal\";\nimport boxen from \"boxen\";\n\nconst getCodeData = (content: string): { title?: string; code: string } => {\n  const titleRegexp = /^(?:\\/\\/\\s?title:\\s?)(.*?)\\n/g;\n\n  const [commentLine, titleMatch] = titleRegexp.exec(content) ?? [];\n\n  if (titleMatch) {\n    const title = titleMatch.trim();\n    const code = content.replace(commentLine || \"\", \"\");\n\n    return { title, code };\n  }\n\n  return { code: content };\n};\n\nexport const renderCodeMarkdown = (content: string) => {\n  const { title, code: rawCode } = getCodeData(content);\n\n  let highlighted = \"\";\n\n  // run cardinal on codeContent\n  try {\n    const code = cardinal.highlight(rawCode, {\n      jsx: true,\n    });\n    highlighted = code;\n  } catch (err) {\n    highlighted = rawCode;\n  }\n\n  // wrap to boxen\n  const boxed = boxen(highlighted, {\n    padding: 1,\n    margin: 0,\n    borderStyle: \"round\",\n    borderColor: \"gray\",\n    titleAlignment: \"left\",\n    title: title ? chalk.bold(title) : undefined,\n  });\n\n  return boxed;\n};\n","import { renderCodeMarkdown } from \"@utils/swizzle/renderCodeMarkdown\";\nimport { marked } from \"marked\";\nimport TerminalRenderer from \"marked-terminal\";\n\nexport const markedTerminalRenderer = (markdown: string) => {\n  return marked(markdown, {\n    renderer: new TerminalRenderer({ code: renderCodeMarkdown }) as any,\n  });\n};\n","export const parseSwizzleBlocks = (content: string) => {\n  const regex =\n    /(\\/\\/|\\/\\*)(\\s?)swizzle-remove-start([\\s\\S]*?)(\\/\\/|\\/\\*)(\\s?)swizzle-remove-end(\\s*)(\\*\\/)?/g;\n\n  return content.replace(regex, \"\");\n};\n","import type { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { getFilesPathByProject } from \"@utils/resource\";\n\nexport const getPathPrefix = () => {\n  let projectType: ProjectTypes | undefined = undefined;\n\n  try {\n    projectType = getProjectType();\n  } catch (error) {\n    projectType = undefined;\n  }\n\n  const pathPrefix = getFilesPathByProject(projectType);\n\n  return pathPrefix;\n};\n","import inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport { getPreferedPM, installPackages, pmCommands } from \"@utils/package\";\n\nexport const installRequiredPackages = async (requiredPackages: string[]) => {\n  const installRequiredPackages =\n    await promptForPackageInstallation(requiredPackages);\n\n  if (!installRequiredPackages) {\n    await displayManualInstallationCommand(requiredPackages);\n  } else {\n    await installPackages(requiredPackages);\n  }\n};\n\nexport const promptForPackageInstallation = async (\n  requiredPackages: string[],\n) => {\n  const message =\n    \"This component requires following packages to be installed:\\n\"\n      .concat(requiredPackages.map((pkg) => ` - ${pkg}`).join(\"\\n\"))\n      .concat(\"\\nDo you want to install them?\");\n\n  const { installRequiredPackages } = await inquirer.prompt<{\n    installRequiredPackages: boolean;\n  }>([\n    {\n      type: \"confirm\",\n      name: \"installRequiredPackages\",\n      default: true,\n      message,\n    },\n  ]);\n\n  return installRequiredPackages;\n};\n\nexport const displayManualInstallationCommand = async (\n  requiredPackages: string[],\n) => {\n  const pm = await getPreferedPM();\n  const pmCommand = pmCommands[pm.name].install.join(\" \");\n  const packages = requiredPackages.join(\" \");\n  const command = `${pm.name} ${pmCommand} ${packages}`;\n\n  console.log(\"\\nYou can install them manually by running this command:\");\n  console.log(chalk.bold.blueBright(command));\n};\n","import inquirer from \"inquirer\";\nimport center from \"center-align\";\nimport { type Command, Option } from \"commander\";\nimport spinner from \"@utils/spinner\";\nimport { isRefineUptoDate } from \"@commands/check-updates\";\nimport { getPreferedPM, installPackages, pmCommands } from \"@utils/package\";\nimport { promptInteractiveRefineUpdate } from \"@commands/update/interactive\";\nimport type { RefinePackageInstalledVersionData } from \"@definitions/package\";\nimport { getVersionTable } from \"@components/version-table\";\n\nenum Tag {\n  Wanted = \"wanted\",\n  Latest = \"latest\",\n  Next = \"next\",\n}\n\ninterface OptionValues {\n  tag: Tag;\n  dryRun: boolean;\n  all: boolean;\n}\n\nconst load = (program: Command) => {\n  return program\n    .command(\"update\")\n    .description(\n      \"Interactively select and update all `Refine` packages to selected version. To skip the interactive mode, use the `--all` option.\",\n    )\n    .addOption(\n      new Option(\"-t, --tag [tag]\", \"Select version to update to.\")\n        .choices([\"next\", \"latest\"])\n        .default(\n          \"wanted\",\n          \"Version ranges in the `package.json` will be installed\",\n        ),\n    )\n    .option(\n      \"-a, --all\",\n      \"Update all `Refine` packages to the selected `tag`. If `tag` is not provided, version ranges in the `package.json` will be installed. This option skips the interactive mode.\",\n      false,\n    )\n    .option(\n      \"-d, --dry-run\",\n      \"Get outdated packages installation command without automatic updating. If `tag` is not provided, version ranges in the `package.json` will be used.\",\n      false,\n    )\n    .action(action);\n};\n\nconst action = async (options: OptionValues) => {\n  const { tag, dryRun, all } = options;\n\n  const packages = await spinner(isRefineUptoDate, \"Checking for updates...\");\n  if (!packages?.length) {\n    console.log(\"All `Refine` packages are up to date 🎉\");\n    return;\n  }\n\n  let selectedPackages: string[] | null | undefined = null;\n\n  if (all) {\n    runAll(tag, packages);\n  } else {\n    const { table, width } = getVersionTable(packages) ?? \"\";\n\n    console.log(center(\"Available Updates\", width));\n    console.log(table);\n\n    const { allByPrompt } = await inquirer.prompt<{ allByPrompt: boolean }>([\n      {\n        type: \"list\",\n        name: \"allByPrompt\",\n        message:\n          \"Do you want to update all Refine packages for minor and patch versions?\",\n        choices: [\n          {\n            name: \"Yes (Recommended)\",\n            value: true,\n          },\n          {\n            name: \"No, use interactive mode\",\n            value: false,\n          },\n        ],\n      },\n    ]);\n\n    if (allByPrompt) {\n      selectedPackages = runAll(tag, packages);\n    } else {\n      selectedPackages = await promptInteractiveRefineUpdate(packages);\n    }\n  }\n\n  if (!selectedPackages) return;\n\n  if (dryRun) {\n    printInstallCommand(selectedPackages);\n    return;\n  }\n\n  pmInstall(selectedPackages);\n};\n\nconst runAll = (tag: Tag, packages: RefinePackageInstalledVersionData[]) => {\n  if (tag === Tag.Wanted) {\n    const isAllPackagesAtWantedVersion = packages.every(\n      (pkg) => pkg.current === pkg.wanted,\n    );\n    if (isAllPackagesAtWantedVersion) {\n      console.log(\n        \"All `Refine` packages are up to date with the wanted version 🎉\",\n      );\n      return null;\n    }\n  }\n\n  const packagesWithVersion = packages.map((pkg) => {\n    const version = tag === Tag.Wanted ? pkg.wanted : tag;\n    return `${pkg.name}@${version}`;\n  });\n\n  return packagesWithVersion;\n};\n\nconst printInstallCommand = async (packages: string[]) => {\n  const pm = await getPreferedPM();\n  const commandInstall = pmCommands[pm.name].install;\n  console.log(`${pm.name} ${commandInstall.join(\" \")} ${packages.join(\" \")}`);\n};\n\nconst pmInstall = (packages: string[]) => {\n  console.log(\"Updating `Refine` packages...\");\n  console.log(packages.map((pkg) => ` - ${pkg}`).join(\"\\n\"));\n  installPackages(packages);\n};\n\nexport default load;\n","import inquirer from \"inquirer\";\nimport semverDiff from \"semver-diff\";\nimport chalk from \"chalk\";\nimport { findDuplicates } from \"@utils/array\";\nimport { parsePackageNameAndVersion } from \"@utils/package\";\nimport type { RefinePackageInstalledVersionData } from \"@definitions/package\";\n\ntype UIGroup = {\n  patch: {\n    name: string;\n    from: string;\n    to: string;\n  }[];\n  minor: {\n    name: string;\n    from: string;\n    to: string;\n  }[];\n  major: {\n    name: string;\n    from: string;\n    to: string;\n  }[];\n};\n\nexport const promptInteractiveRefineUpdate = async (\n  packages: RefinePackageInstalledVersionData[],\n) => {\n  const uiGroup = createUIGroup(packages);\n  if (!uiGroup) {\n    console.log(\"All `Refine` packages are up to date. 🎉\");\n    return;\n  }\n\n  const inquirerUI = createInquirerUI(uiGroup);\n\n  const answers = await inquirer.prompt<{\n    packages: string[];\n  }>([\n    {\n      type: \"checkbox\",\n      name: \"packages\",\n      message: \"Choose packages to update\",\n      pageSize: inquirerUI.pageSize,\n      choices: inquirerUI.choices,\n      validate: validatePrompt,\n    },\n  ]);\n\n  return answers.packages.length > 0 ? answers.packages : null;\n};\n\nexport const validatePrompt = (input: string[]) => {\n  const inputParsed = input.map((pckg) => {\n    return parsePackageNameAndVersion(pckg);\n  });\n\n  const names = inputParsed.map((pckg) => pckg.name);\n  const duplicates = findDuplicates(names);\n\n  if (duplicates.length > 0) {\n    return `You can't update the same package more than once. Please choice one.\\n Duplicates: ${duplicates.join(\n      \", \",\n    )}`;\n  }\n\n  return true;\n};\n\nexport const createUIGroup = (\n  packages: RefinePackageInstalledVersionData[],\n): UIGroup | null => {\n  if (packages.length === 0) {\n    return null;\n  }\n\n  const packagesCategorized: UIGroup = {\n    patch: [],\n    minor: [],\n    major: [],\n  };\n\n  packages.forEach((pckg) => {\n    const current = pckg.current;\n\n    const diffWanted = semverDiff(current, pckg.wanted) as keyof UIGroup;\n    const diffLatest = semverDiff(current, pckg.latest) as keyof UIGroup;\n\n    if (diffWanted === diffLatest) {\n      if (diffLatest) {\n        packagesCategorized[diffLatest].push({\n          name: pckg.name,\n          from: current,\n          to: pckg.latest,\n        });\n        return;\n      }\n    }\n\n    if (diffWanted) {\n      packagesCategorized[diffWanted].push({\n        name: pckg.name,\n        from: current,\n        to: pckg.wanted,\n      });\n    }\n\n    if (diffLatest) {\n      packagesCategorized[diffLatest].push({\n        name: pckg.name,\n        from: current,\n        to: pckg.latest,\n      });\n    }\n  });\n\n  return packagesCategorized;\n};\n\nconst createInquirerUI = (uiGroup: UIGroup) => {\n  let maxNameLength = 0;\n  let maxFromLength = 0;\n\n  [uiGroup.patch, uiGroup.minor, uiGroup.major].forEach((group) => {\n    group.forEach((pckg) => {\n      if (pckg.name.length > maxNameLength) {\n        maxNameLength = pckg.name.length;\n      }\n\n      if (pckg.from.length > maxFromLength) {\n        maxFromLength = pckg.from.length;\n      }\n    });\n  });\n\n  maxNameLength += 2;\n\n  const choices: (\n    | inquirer.Separator\n    | {\n        name: string;\n        value: string;\n      }\n  )[] = [];\n\n  const packageColumnText = \"Package\".padEnd(maxNameLength);\n  const currentColumnText = \"From\".padEnd(maxFromLength);\n  const toColumnText = \"To\";\n  const header = `\\n   ${packageColumnText} ${currentColumnText}${toColumnText.padStart(\n    maxFromLength,\n  )}`;\n  choices.push(new inquirer.Separator(header));\n\n  if (uiGroup.patch.length > 0) {\n    choices.push(\n      new inquirer.Separator(chalk.reset.bold.blue(\"\\nPatch Updates\")),\n    );\n    uiGroup.patch.forEach((pckg) => {\n      choices.push({\n        name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n          maxFromLength,\n        )} -> ${pckg.to}`,\n        value: `${pckg.name}@${pckg.to}`,\n      });\n    });\n  }\n\n  if (uiGroup.minor.length > 0) {\n    choices.push(\n      new inquirer.Separator(chalk.reset.bold.blue(\"\\nMinor Updates\")),\n    );\n    uiGroup.minor.forEach((pckg) => {\n      choices.push({\n        name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n          maxFromLength,\n        )} -> ${pckg.to}`,\n        value: `${pckg.name}@${pckg.to}`,\n      });\n    });\n  }\n\n  if (uiGroup.major.length > 0) {\n    choices.push(\n      new inquirer.Separator(chalk.reset.bold.blue(\"\\nMajor Updates\")),\n    );\n    uiGroup.major.forEach((pckg) => {\n      choices.push({\n        name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n          maxFromLength,\n        )} -> ${pckg.to}`,\n        value: `${pckg.name}@${pckg.to}`,\n      });\n    });\n  }\n\n  const pageSize = choices.length + 6;\n\n  return { choices, pageSize };\n};\n","export const findDuplicates = (arr: (string | number)[]) => {\n  const duplicates = arr.filter((item, index) => arr.indexOf(item) !== index);\n  const unique = new Set(duplicates);\n  return Array.from(unique);\n};\n","import { getInstalledRefinePackages } from \"@utils/package\";\nimport type { Command } from \"commander\";\nimport envinfo from \"envinfo\";\nimport ora from \"ora\";\n\nconst whoami = (program: Command) => {\n  return program\n    .command(\"whoami\")\n    .description(\"View the details of the development environment\")\n    .action(action);\n};\n\nconst action = async () => {\n  const spinner = ora(\"Loading environment details...\").start();\n  const info = await envinfo.run(\n    {\n      System: [\"OS\", \"CPU\"],\n      Binaries: [\"Node\", \"Yarn\", \"npm\"],\n      Browsers: [\"Chrome\", \"Firefox\", \"Safari\"],\n    },\n    { showNotFound: true, markdown: true },\n  );\n\n  const packages = (await getInstalledRefinePackages()) || [];\n  const packagesMarkdown = packages\n    .map((pkg) => {\n      return ` - ${pkg.name}: ${pkg.version}`;\n    })\n    .join(\"\\n\");\n\n  spinner.stop();\n  console.log(info);\n  console.log(\"## Refine Packages:\");\n  console.log(packagesMarkdown);\n};\n\nexport default whoami;\n","import chalk from \"chalk\";\nimport inquirer, { type ListChoiceOptions } from \"inquirer\";\n\nimport type { IntegrationId } from \"./sub-commands/integration/packages\";\nimport { buildIntegrationChoices } from \"./sub-commands/integration/prompt\";\nimport { buildProviderChoices } from \"./sub-commands/provider/prompt\";\nimport type { ProviderId } from \"./sub-commands/provider/providers\";\n\nconst wrapChoices = (\n  group: string,\n  choices: ListChoiceOptions[],\n): ListChoiceOptions<AddCommandComponentAnswer>[] => {\n  return choices.map((choice) => {\n    return {\n      ...choice,\n      name: ` . ${choice.name}`,\n      value: {\n        group,\n        component: choice.value,\n      },\n    };\n  });\n};\n\ntype AddCommandComponentAnswer =\n  | { group: \"provider\"; component: ProviderId }\n  | { group: \"integration\"; component: IntegrationId }\n  | { group: \"resource\"; component: \"resource\" };\n\ninterface AddCommandAnswer {\n  component: AddCommandComponentAnswer;\n}\n\nexport const addCommandPrompt = async () => {\n  return await inquirer.prompt<AddCommandAnswer>([\n    {\n      type: \"list\",\n      name: \"component\",\n      message: \"What do you want to add?\",\n      choices: [\n        new inquirer.Separator(chalk.bold(\"Provider\")),\n        ...wrapChoices(\"provider\", buildProviderChoices()),\n        new inquirer.Separator(chalk.bold(\"Integration\")),\n        ...wrapChoices(\"integration\", buildIntegrationChoices()),\n        new inquirer.Separator(chalk.bold(\"Resource\")),\n        {\n          name: chalk.blueBright(\" .  Add new resource\"),\n          value: {\n            group: \"resource\",\n            component: \"resource\",\n          },\n        },\n      ],\n      pageSize: 25,\n    },\n  ]);\n};\n","import inquirer from \"inquirer\";\n\nimport { getProjectType } from \"@utils/project\";\nimport { availableIntegrations, type IntegrationId } from \"./packages\";\n\nexport const buildIntegrationChoices = () => {\n  const projectType = getProjectType();\n\n  const integrationChoices = availableIntegrations.map((integration) =>\n    integration.getChoice(projectType),\n  );\n\n  if (integrationChoices.every((choice) => choice.disabled)) {\n    return [\n      {\n        value: \"none\",\n        name: \"No integration available for this project type.\",\n      },\n      ...integrationChoices,\n    ];\n  }\n  return integrationChoices;\n};\n\nexport const addIntegrationPrompt = async () => {\n  return await inquirer.prompt<{ id: IntegrationId }>([\n    {\n      type: \"list\",\n      name: \"id\",\n      message: \"Which integration do you want to add?\",\n      choices: buildIntegrationChoices(),\n      default: \"none\",\n    },\n  ]);\n};\n","import { hasIncomatiblePackages, installMissingPackages } from \"@utils/package\";\nimport execa from \"execa\";\n\ninterface RunTransformerParams {\n  incompatiblePackages: string[];\n  requiredPackages: string[];\n  integrationName: string;\n  transformerFileName: string;\n}\n\nexport const runTransformer = async (params: RunTransformerParams) => {\n  const {\n    incompatiblePackages,\n    integrationName,\n    requiredPackages,\n    transformerFileName,\n  } = params;\n  if (hasIncomatiblePackages(incompatiblePackages)) return;\n\n  await installMissingPackages(requiredPackages);\n\n  console.log(`🚀 Setting up ${integrationName}...`);\n\n  const jscodeshiftExecutable = require.resolve(\".bin/jscodeshift\");\n  const { stderr } = execa.sync(jscodeshiftExecutable, [\n    \"./\",\n    \"--extensions=ts,tsx,js,jsx\",\n    \"--parser=tsx\",\n    `--transform=${__dirname}/../src/transformers/integrations/${transformerFileName}.ts`,\n    \"--ignore-pattern=.cache\",\n    \"--ignore-pattern=node_modules\",\n    \"--ignore-pattern=build\",\n    \"--ignore-pattern=.next\",\n    \"--ignore-pattern=dist\",\n  ]);\n\n  if (stderr) {\n    console.log(stderr);\n  }\n\n  console.log(`🎉 ${integrationName} setup completed!`);\n};\n","import chalk from \"chalk\";\nimport type { IntegrationId } from \"../packages\";\n\ninterface IntegrationChoice {\n  id: IntegrationId;\n  title: string;\n  description: string;\n  disabled?: string;\n}\n\nexport const prettifyChoice = (choice: IntegrationChoice) => {\n  const { id, title, description, disabled } = choice;\n\n  if (disabled) {\n    return {\n      value: id,\n      name: `${chalk.gray(title)}`,\n      disabled: chalk.redBright(disabled),\n    };\n  }\n\n  return {\n    value: id,\n    name: `${chalk.blueBright(title)} - ${description}`,\n  };\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\nimport type { Integration } from \".\";\nimport { runTransformer } from \"../run-transformer\";\nimport { prettifyChoice } from \"../utils/prettify-choice\";\n\nconst id = \"ant-design\";\nconst name = \"Ant Design\";\nconst incompatiblePackages = [\"@remix-run/react\", \"next\"];\nconst requiredPackages = [\"antd\", \"@refinedev/antd\"];\nconst transformerFileName = \"ant-design\";\n\nexport const AntDesignIntegration: Integration = {\n  id,\n  getChoice: (projectType: ProjectTypes) => {\n    const title = \"Ant Design\";\n    const description = \"Setup Ant Design with Refine\";\n    let disabled;\n\n    if ([ProjectTypes.NEXTJS, ProjectTypes.REMIX].includes(projectType)) {\n      disabled =\n        \"Automatic setup only available Vite for now. See the documentation for manual installation: https://refine.dev/docs/ui-integrations/ant-design/introduction/#installation\";\n    }\n\n    return prettifyChoice({\n      id,\n      title,\n      description,\n      disabled,\n    });\n  },\n  runTransformer: async () => {\n    return await runTransformer({\n      incompatiblePackages,\n      integrationName: name,\n      requiredPackages,\n      transformerFileName,\n    });\n  },\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\nimport type { Integration } from \".\";\nimport { runTransformer } from \"../run-transformer\";\nimport { prettifyChoice } from \"../utils/prettify-choice\";\n\nconst id = \"react-router\";\nconst name = \"React Router\";\nconst incompatiblePackages = [\"@remix-run/react\", \"next\"];\nconst requiredPackages = [\"react-router-dom\", \"@refinedev/react-router-v6\"];\nconst transformerFileName = \"react-router\";\n\nexport const ReactRouterIntegration: Integration = {\n  id,\n  getChoice: (projectType: ProjectTypes) => {\n    const title = \"React Router\";\n    const description = \"Setup routing with React Router\";\n    let disabled;\n\n    if (projectType === ProjectTypes.NEXTJS) {\n      disabled = `Can't be used with Next.js. https://nextjs.org/docs/app/building-your-application/routing`;\n    }\n\n    if (projectType === ProjectTypes.REMIX) {\n      disabled = `Can't be used with Remix. https://remix.run/docs/en/main/discussion/routes`;\n    }\n\n    return prettifyChoice({\n      id,\n      title,\n      description,\n      disabled,\n    });\n  },\n  runTransformer: async () => {\n    return await runTransformer({\n      incompatiblePackages,\n      integrationName: name,\n      requiredPackages,\n      transformerFileName,\n    });\n  },\n};\n","import type { ProjectTypes } from \"@definitions/projectTypes\";\nimport { AntDesignIntegration } from \"./ant-design\";\nimport { ReactRouterIntegration } from \"./react-router\";\n\nexport type IntegrationId = \"ant-design\" | \"react-router\";\n\nexport interface Integration {\n  id: IntegrationId;\n  getChoice: (projectType: ProjectTypes) => {\n    name: string;\n    value: IntegrationId;\n    disabled?: string;\n  };\n  runTransformer: () => Promise<void>;\n}\n\nexport const availableIntegrations: Integration[] = [\n  AntDesignIntegration,\n  ReactRouterIntegration,\n];\n","import chalk from \"chalk\";\nimport inquirer from \"inquirer\";\n\nimport { getDefaultPath } from \"./create-providers\";\nimport { availableProviders, type ProviderId } from \"./providers\";\n\nexport const buildProviderChoices = () => {\n  return availableProviders.map((provider) => {\n    const { id, title, description } = provider;\n\n    return {\n      value: id,\n      name: `${chalk.blueBright(title)} - ${description}`,\n    };\n  });\n};\n\nexport const addProviderPrompt = async () => {\n  return await inquirer.prompt<{\n    providers: ProviderId[];\n    providersPath: string;\n  }>([\n    {\n      type: \"checkbox\",\n      name: \"providers\",\n      message: \"Which providers do you want to add?\",\n      choices: buildProviderChoices(),\n    },\n    {\n      type: \"input\",\n      name: \"providersPath\",\n      message: \"Where do you want to generate the providers?\",\n      default: getDefaultPath(),\n    },\n  ]);\n};\n","import { getProjectType } from \"@utils/project\";\nimport { getProviderPath } from \"@utils/resource\";\nimport { copySync, mkdirSync, pathExistsSync } from \"fs-extra\";\nimport { join } from \"path\";\nimport {\n  availableProviders,\n  type Provider,\n  type ProviderId,\n} from \"./providers\";\n\nconst baseTemplatePath = `${__dirname}/../templates/provider`;\n\nexport const createProviders = (\n  providerIds: ProviderId[],\n  pathFromArgs?: string,\n) => {\n  providerIds.forEach((providerId) => {\n    const { fileName, templateFileName } = getProviderOptions(providerId);\n    const folderPath = pathFromArgs ?? getDefaultPath();\n    const filePath = join(folderPath, fileName);\n    const fullPath = join(process.cwd(), folderPath, fileName);\n\n    if (pathExistsSync(fullPath)) {\n      console.error(`❌ Provider (${filePath}) already exist!`);\n      return;\n    }\n\n    // create destination dir\n    mkdirSync(folderPath, { recursive: true });\n\n    // copy template file to destination\n    copySync(`${baseTemplatePath}/${templateFileName}`, fullPath);\n\n    console.log(`🎉 Provider (${filePath}) created successfully!`);\n  });\n};\n\nexport const getProviderOptions = (providerId: ProviderId): Provider => {\n  const provider = availableProviders.find((p) => p.id === providerId);\n\n  if (!provider) {\n    throw new Error(`Invalid provider: ${providerId}`);\n  }\n\n  return provider;\n};\n\nexport const getDefaultPath = () => {\n  const projectType = getProjectType();\n  const { path } = getProviderPath(projectType);\n  return path;\n};\n","export type ProviderId =\n  | \"auth\"\n  | \"live\"\n  | \"data\"\n  | \"access-control\"\n  | \"notification\"\n  | \"i18n\"\n  | \"audit-log\";\n\nexport interface Provider {\n  id: ProviderId;\n  title: string;\n  description: string;\n  fileName: string;\n  templateFileName: string;\n}\n\nexport const availableProviders: Provider[] = [\n  {\n    id: \"auth\",\n    title: \"Auth provider\",\n    description: \"Manage user authentication and authorization\",\n    fileName: \"auth-provider.tsx\",\n    templateFileName: \"demo-auth-provider.tsx.template\",\n  },\n  {\n    id: \"live\",\n    title: \"Live provider\",\n    description: \"Enable real-time updates and synchronization\",\n    fileName: \"live-provider.tsx\",\n    templateFileName: \"demo-live-provider.tsx.template\",\n  },\n  {\n    id: \"data\",\n    title: \"Data provider\",\n    description: \"Communicate with your API\",\n    fileName: \"data-provider.tsx\",\n    templateFileName: \"demo-data-provider.tsx.template\",\n  },\n  {\n    id: \"access-control\",\n    title: \"Access Control\",\n    description: \"Manage user permissions & roles\",\n    fileName: \"access-control-provider.tsx\",\n    templateFileName: \"demo-access-control-provider.tsx.template\",\n  },\n  {\n    id: \"notification\",\n    title: \"Notification provider\",\n    description: \"Display in-app alerts and messages\",\n    fileName: \"notification-provider.tsx\",\n    templateFileName: \"demo-notification-provider.tsx.template\",\n  },\n  {\n    id: \"i18n\",\n    title: \"I18n provider\",\n    description: \"Support multiple languages and locales\",\n    fileName: \"i18n-provider.tsx\",\n    templateFileName: \"demo-i18n-provider.tsx.template\",\n  },\n  {\n    id: \"audit-log\",\n    title: \"Audit Log provider\",\n    description: \"Display audit logs for your resources\",\n    fileName: \"audit-log-provider.tsx\",\n    templateFileName: \"demo-audit-log-provider.tsx.template\",\n  },\n];\n","import { Argument, Command } from \"commander\";\nimport { availableIntegrations } from \"./packages\";\nimport { addIntegrationPrompt } from \"./prompt\";\n\nconst addIntegrationAction = async (name?: string) => {\n  let integrationID = name;\n\n  if (!integrationID) {\n    const answer = await addIntegrationPrompt();\n\n    integrationID = answer.id;\n  }\n\n  const integration = availableIntegrations.find(\n    (integration) => integration.id === integrationID,\n  );\n\n  if (integration) {\n    await integration.runTransformer();\n  }\n};\n\nexport const IntegrationCommand = new Command(\"integration\")\n  .addArgument(\n    new Argument(\"[name]\", \"Name of the integration\").choices(\n      availableIntegrations.map((integration) => integration.id),\n    ),\n  )\n  .action(addIntegrationAction);\n","import { Argument, Command } from \"commander\";\n\nimport { createProviders } from \"./create-providers\";\nimport { addProviderPrompt } from \"./prompt\";\nimport { availableProviders, type ProviderId } from \"./providers\";\n\nexport const createProviderAction = async (\n  providers: ProviderId[],\n  options: { path?: string },\n) => {\n  if (!providers.length) {\n    const { providers, providersPath } = await addProviderPrompt();\n\n    return createProviders(providers, providersPath);\n  }\n\n  createProviders(providers, options.path);\n};\n\nexport const ProviderCommand = new Command(\"provider\")\n  .addArgument(\n    new Argument(\"[providers...]\", \"Create provider(s)\")\n      .choices(availableProviders.map((provider) => provider.id))\n      .default([]),\n  )\n  .option(\"-p, --path [path]\", \"Path to generate providers\")\n  .action(createProviderAction);\n","import { Argument, Command } from \"commander\";\nimport { createResources } from \"./create-resources\";\n\nconst createResourceAction = async (\n  resources: string[],\n  options: { actions: string },\n  command: Command,\n) => {\n  createResources(\n    {\n      actions: options?.actions,\n      path: command.optsWithGlobals().path,\n    },\n    resources,\n  );\n};\n\nexport const ResourceCommand = new Command(\"resource\")\n  .addArgument(new Argument(\"[resources...]\", \"Create new resource(s)\"))\n  .option(\"-p, --path [path]\", \"Path to generated resource files\")\n  .option(\n    \"-a, --actions [actions]\",\n    \"Only generate the specified resource actions. (ex: list,create,edit,show)\",\n    \"list,create,edit,show\",\n  )\n  .action(createResourceAction);\n","import type { Command } from \"commander\";\n\nimport { addCommandPrompt } from \"./prompt\";\nimport { IntegrationCommand } from \"./sub-commands/integration/command\";\nimport { availableIntegrations } from \"./sub-commands/integration/packages\";\nimport { ProviderCommand } from \"./sub-commands/provider/command\";\nimport { createProviders } from \"./sub-commands/provider/create-providers\";\nimport { ResourceCommand } from \"./sub-commands/resource/command\";\nimport { createResources } from \"./sub-commands/resource/create-resources\";\n\nconst load = (program: Command) => {\n  return program\n    .command(\"add\")\n    .description(\"Add new resources, providers, or integrations\")\n    .allowExcessArguments(false)\n    .action(addCommandAction)\n    .addCommand(ResourceCommand)\n    .addCommand(ProviderCommand)\n    .addCommand(IntegrationCommand);\n};\n\nconst addCommandAction = async () => {\n  const { component } = await addCommandPrompt();\n\n  if (component.group === \"provider\") {\n    createProviders([component.component]);\n  }\n\n  if (component.group === \"integration\") {\n    const integration = availableIntegrations.find(\n      (integration) => integration.id === component.component,\n    );\n\n    await integration?.runTransformer();\n  }\n\n  if (component.group === \"resource\") {\n    await createResources({}, []);\n  }\n};\n\nexport default load;\n","import envinfo from \"envinfo\";\nimport os from \"os\";\n\nexport const getOSType = () => {\n  const osPlatform = os.type();\n\n  const types: Record<string, \"macOS\" | \"Linux\" | \"Windows\"> = {\n    Darwin: \"macOS\",\n    Linux: \"Linux\",\n    Windows_NT: \"Windows\",\n  };\n\n  return types[osPlatform];\n};\n\nexport const getOS = async () => {\n  // returns as a ['OS', 'macOS Mojave 10.14.5']\n  const [_, OSInfo] =\n    (await envinfo.helpers.getOSInfo()) as unknown as string[];\n\n  return {\n    name: getOSType(),\n    version: OSInfo,\n  };\n};\n","import type { NODE_ENV } from \"@definitions/node\";\nimport type { ProjectTypes } from \"@definitions/projectTypes\";\nimport { ENV } from \"@utils/env\";\nimport { getOS } from \"@utils/os\";\nimport { getInstalledRefinePackages, getRefineProjectId } from \"@utils/package\";\nimport { getProjectType } from \"@utils/project\";\nimport fetch from \"node-fetch\";\n\ninterface TelemetryData {\n  nodeEnv?: NODE_ENV;\n  nodeVersion: string;\n  os: string;\n  osVersion: string;\n  command: string;\n  packages: {\n    name: string;\n    version: string;\n  }[];\n  projectFramework: ProjectTypes;\n}\n\nexport const getTelemetryData = async (): Promise<TelemetryData> => {\n  const os = await getOS();\n\n  const data = {\n    nodeEnv: ENV.NODE_ENV,\n    nodeVersion: process.version,\n    os: os.name,\n    osVersion: os.version,\n    command: process.argv[2],\n    packages: (await getInstalledRefinePackages()) || [],\n    projectFramework: getProjectType(),\n    projectId: getRefineProjectId(),\n  };\n\n  return data;\n};\n\nexport const telemetryHook = async () => {\n  if (ENV.REFINE_NO_TELEMETRY === \"true\") return;\n\n  try {\n    const data = await getTelemetryData();\n\n    await fetch(\"https://telemetry.refine.dev/cli\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {}\n};\n","import React from \"react\";\nimport matter from \"gray-matter\";\nimport boxen from \"boxen\";\n\nimport type { Announcement } from \"@definitions/announcement\";\nimport { markedTerminalRenderer } from \"@utils/marked-terminal-renderer\";\n\nconst ANNOUNCEMENT_URL =\n  \"https://raw.githubusercontent.com/refinedev/refine/master/packages/cli/ANNOUNCEMENTS.md\";\n\nconst ANNOUNCEMENT_DELIMITER = \"---announcement\";\n\nconst splitAnnouncements = (feed: string) => {\n  const sections = feed.split(ANNOUNCEMENT_DELIMITER);\n\n  return sections\n    .slice(1)\n    .map((section) => `${ANNOUNCEMENT_DELIMITER}${section}`);\n};\n\nconst parseAnnouncement = (raw: string): Announcement => {\n  const fixed = raw.replace(ANNOUNCEMENT_DELIMITER, \"---\");\n  const parsed = matter(fixed);\n  const content = (\n    parsed.content.length === 0\n      ? fixed.replace(/---/g, \"\")\n      : parsed.content.replace(/---/g, \"\")\n  ).trim();\n\n  return {\n    ...parsed.data,\n    content,\n  } as Announcement;\n};\n\nexport const getAnnouncements = async () => {\n  try {\n    const response = await fetch(ANNOUNCEMENT_URL)\n      .then((res) => res.text())\n      .catch(() => \"\");\n\n    const announcements = splitAnnouncements(response).map((section) =>\n      parseAnnouncement(section),\n    );\n\n    return announcements;\n  } catch (_) {\n    return [];\n  }\n};\n\nexport const printAnnouncements = async () => {\n  const announcements = await getAnnouncements();\n\n  const visibleAnnouncements = announcements.filter(\n    (a) => Boolean(a.hidden) === false,\n  );\n\n  if (visibleAnnouncements.length === 0) {\n    return;\n  }\n\n  const stringAnnouncements = visibleAnnouncements\n    .map((a) => {\n      const dash = visibleAnnouncements.length > 1 ? \"— \" : \"\";\n      const content = markedTerminalRenderer(a.content);\n      return `${dash}${content}`;\n    })\n    .join(\"\")\n    .trim();\n\n  console.log(\n    boxen(stringAnnouncements, {\n      padding: 1,\n      margin: 0,\n      borderStyle: \"round\",\n      borderColor: \"blueBright\",\n      titleAlignment: \"left\",\n    }),\n  );\n};\n"],"mappings":";shBACA,IAAAA,GAAwB,qBAExBC,GAAmB,qBCFnB,IAAAC,GAAkB,oBAClBC,GAAmB,2BCFnB,IAAAC,GAAgB,kBAEVC,GAAU,MAAUC,EAAsBC,IAAoB,CAClE,IAAMF,KAAU,GAAAG,SAAI,CAClB,MAAO,OACP,KAAMD,CACR,CAAC,EAAE,MAAM,EACHE,EAAS,MAAMH,EAAG,EACxB,OAAAD,EAAQ,KAAK,EACNI,CACT,EAEOC,EAAQL,GCXf,IAAAM,GAAkB,oBAClBC,EAA+D,oBAC/DC,GAAmB,qBACnBC,GAAiB,mBACjBC,GAAwB,2BAGXC,EAAiB,IAAW,CACvC,GAAI,IAAC,cAAW,cAAc,EAC5B,MAAM,IAAI,MAAM,0BAA0B,EAG5C,OAAO,KAAK,SAAM,gBAAa,eAAgB,MAAM,CAAC,CACxD,EAEaC,EAAkB,IAAgB,CAC7C,IAAMC,EAAcF,EAAe,EACnC,OAAO,OAAO,KAAKE,EAAY,cAAgB,CAAC,CAAC,CACnD,EAOO,IAAMC,GAAqB,IAAgB,CAChD,IAAMC,EAAcC,EAAe,EACnC,OAAO,OAAO,KAAKD,EAAY,iBAAmB,CAAC,CAAC,CACtD,EAEaE,GAAqB,IACzB,CAAC,GAAGC,EAAgB,EAAG,GAAGA,EAAgB,CAAC,EAGvCC,GAAa,IACJH,EAAe,EAChB,QAGRI,EAA6B,SAAY,CAxCtD,IAAAC,EAyCE,GAAI,CACF,IAAMC,EAAY,QAAM,GAAAC,SAAM,MAAO,CAAC,KAAM,YAAa,QAAQ,EAAG,CAClE,OAAQ,EACV,CAAC,EAEKC,IAAeH,EAAA,KAAK,MAAMC,EAAU,MAAM,IAA3B,YAAAD,EAA8B,eAAgB,CAAC,EAC9DI,EAAqB,OAAO,KAAKD,CAAY,EAAE,OAClDE,GACCA,EAAW,WAAW,YAAY,GAClCA,EAAW,WAAW,iBAAiB,CAC3C,EAEMC,EAGA,CAAC,EAEP,QAAWD,KAAcD,EAAoB,CAC3C,IAAMG,EAAUJ,EAAaE,CAAU,EAAE,QACzCC,EAAU,KAAK,CACb,KAAMD,EACN,QAAAE,CACF,CAAC,EAGH,OAAOD,CACT,MAAE,CACA,OAAO,QAAQ,QAAQ,IAAI,CAC7B,CACF,EAEaE,EAA4C,SAAY,CACnE,IAAMC,EAAkB,CAAC,OAAQ,WAAY,OAAQ,WAAY,YAAa,UAAW,OAAQ,WAAY,oBAAqB,kBAAmB,kBAAmB,cAAe,UAAW,SAAU,aAAc,OAAQ,UAAW,SAAU,MAAO,eAAgB,eAAgB,gBAAiB,kBAAmB,kBAAmB,cAAe,eAAgB,SAAU,cAAe,SAAU,YAAa,UAAU,EAE9a,GAAI,CACF,IAAMC,EAA2B,QAAM,GAAAC,SAAO,4BAA6B,CACzE,gBAAiB,EACnB,CAAC,EAEKC,EAAyBH,EAAgB,QAASI,GAAQ,CAC9D,GAAI,CACF,IAAMC,EAAU,QAAQ,QACtB,GAAAC,QAAK,KAAK,aAAcF,EAAK,cAAc,CAC7C,EAEA,MAAO,CAAC,GAAAE,QAAK,QAAQD,CAAO,CAAC,CAC/B,MAAE,CACA,MAAO,CAAC,CACV,CACF,CAAC,EAEKE,EAID,CAAC,EAEN,aAAM,QAAQ,IACZ,CAAC,GAAGJ,EAAwB,GAAGF,CAAwB,EAAE,IACvD,MAAOO,GAAe,CAEpB,GADuB,QAAM,cAAW,GAAGA,gBAAyB,EAChD,CAClB,IAAMvB,EAAc,QAAM,YAAS,GAAGuB,gBAAyB,EAE/DD,EAAe,KAAK,CAClB,KAAMtB,EAAY,KAClB,QAASA,EAAY,QACrB,KAAMuB,CACR,CAAC,EAEL,CACF,CACF,EAEOD,CACT,MAAE,CACA,MAAO,CAAC,CACV,CACF,EAEaE,GAA4B,MAAOC,GACvC,QAAM,cAAW,GAAGA,oBAA8B,EAG9CC,EAAa,CACxB,IAAK,CACH,QAAS,CAAC,UAAW,QAAQ,EAC7B,WAAY,CAAC,UAAW,YAAY,EACpC,aAAc,CAAC,WAAY,QAAQ,CACrC,EACA,KAAM,CACJ,QAAS,CAAC,KAAK,EACf,WAAY,CAAC,MAAO,IAAI,EACxB,aAAc,CAAC,WAAY,QAAQ,CACrC,EACA,KAAM,CACJ,QAAS,CAAC,KAAK,EACf,WAAY,CAAC,MAAO,IAAI,EACxB,aAAc,CAAC,WAAY,WAAY,MAAM,CAC/C,EACA,IAAK,CACH,QAAS,CAAC,KAAK,EACf,WAAY,CAAC,MAAO,OAAO,EAC3B,aAAc,CAAC,WAAY,WAAY,MAAM,CAC/C,CACF,EAEaC,EAAgB,SAAY,CACvC,IAAMC,EAAK,MAAMC,EACf,OAAM,GAAAC,SAAY,QAAQ,IAAI,CAAC,EAC/B,4BACF,EAEA,GAAI,CAACF,EACH,MAAM,IAAI,MAAM,4BAA4B,EAG9C,OAAOA,CACT,EAEaG,GAAkB,MAAOC,GAAuB,CAC3D,IAAMJ,EAAK,MAAMD,EAAc,EAE/B,GAAI,CACF,IAAMM,EAAiBP,EAAWE,EAAG,IAAI,EAAE,QAErCrB,KAAY,GAAAC,SAAMoB,EAAG,KAAM,CAAC,GAAGK,EAAgB,GAAGD,CAAQ,EAAG,CACjE,MAAO,SACT,CAAC,EAEDzB,EAAU,GAAG,UAAY2B,GAAY,CACnC,QAAQ,IAAIA,CAAO,CACrB,CAAC,EAED3B,EAAU,GAAG,QAAU4B,GAAU,CAC/B,QAAQ,IAAIA,CAAK,CACnB,CAAC,EAED5B,EAAU,GAAG,OAAS6B,GAAa,CACjC,GAAIA,IAAa,EAAG,CAClB,QAAQ,IAAI,0CAAmC,EAC/C,OAGF,QAAQ,IAAI,gCAAgCA,GAAU,CACxD,CAAC,CACH,OAASD,EAAP,CACA,MAAM,IAAI,MAAMA,CAAK,CACvB,CACF,EAEaE,GAAsB,MAAOL,GAAuB,CAC/D,IAAMJ,EAAK,MAAMD,EAAc,EAE/B,GAAI,CACF,IAAMM,EAAiBP,EAAWE,EAAG,IAAI,EAAE,QAErCrB,EAAY,GAAAC,QAAM,KAAKoB,EAAG,KAAM,CAAC,GAAGK,EAAgB,GAAGD,CAAQ,EAAG,CACtE,MAAO,SACT,CAAC,EAED,GAAIzB,EAAU,QAAUA,EAAU,WAAa,EAC7C,MAAM,IAAI,MAAMA,EAAU,MAAM,EAGlC,OAAOA,CACT,OAAS4B,EAAP,CACA,MAAM,IAAI,MAAMA,CAAK,CACvB,CACF,EAOaG,GACXC,GAC0B,CAC1B,IAAMC,EAAoBD,EAAI,YAAY,GAAG,EAE7C,OAAIC,GAAqB,EAChB,CACL,KAAMD,EACN,QAAS,IACX,EAGK,CACL,KAAMA,EAAI,MAAM,EAAGC,CAAiB,EACpC,QAASD,EAAI,MAAMC,EAAoB,CAAC,CAC1C,CACF,EAEaC,GAAqB,IAAM,CA3OxC,IAAAnC,EA4OE,IAAMN,EAAcC,EAAe,EAEnC,OAAOK,EAAAN,GAAA,YAAAA,EAAa,SAAb,YAAAM,EAAqB,SAC9B,EAEaoC,GAAsB,UACP,MAAM5B,EAA0C,GAEjD,KAAMK,GAAQA,EAAI,OAAS,qBAAqB,EAG9DwB,GAA2BX,GAAuB,CAC7D,IAAMvB,EAAeN,EAAgB,EAErC,OAAO6B,EAAS,OAAQb,GAAQ,CAACV,EAAa,SAASU,CAAG,CAAC,CAC7D,EAEayB,GAAyB,MAAOZ,GAAuB,CAClE,QAAQ,IAAI,oCAA6B,EAEzC,IAAMa,EAAkBF,GAAwBX,CAAQ,EAEpDa,EAAgB,OAAS,GAC3B,QAAQ,IAAI,wBAAiBA,EAAgB,KAAK,IAAI,GAAG,EAEzD,MAAMR,GAAoBQ,CAAe,EAEzC,QAAQ,IAAI,oCAA6B,GAEzC,QAAQ,IAAI,uDAAgD,CAEhE,EAEaC,GAA0Bd,GAAgC,CACrE,IAAMe,EAAkB7C,GAAmB,EAErC8C,EAAuBhB,EAAS,OAAQb,GAC5C4B,EAAgB,SAAS5B,CAAG,CAC9B,EAEA,OAAI6B,EAAqB,OAAS,GAChC,QAAQ,IACN,0CAAmCA,EAAqB,KACtD,IACF,YACF,EACO,IAGF,EACT,EC7RA,IAAAC,GAAkB,yBAClBC,GAAkB,oBCFX,IAAMC,GAAsBC,GAC1BA,EAAI,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,EAGrCC,GAAoBD,GACxBA,EAAI,QAET,8EACA,EACF,EDJF,IAAME,EAAU,CACd,KAAM,OACN,QAAS,UACT,OAAQ,SACR,OAAQ,SACR,UAAW,WACb,EAEMC,GAA2D,CAC/DD,EAAQ,KACRA,EAAQ,QACRA,EAAQ,OACRA,EAAQ,OACRA,EAAQ,SACV,EAEaE,GAAkB,CAC7BC,EAAgD,CAAC,IAC9C,CAvBL,IAAAC,EAwBE,IAAMC,EAAY,OAAO,MAAKF,GAAA,YAAAA,EAAW,KAAM,CAAC,CAAC,EACjD,GAAI,CAACA,GAAY,CAACE,EAAU,OAAQ,MAAO,CAAE,MAAO,GAAI,MAAO,CAAE,EAEjE,IAAMC,EAAgB,QAAQ,OAAO,SAAW,GAE1CC,EACJ,KAAK,IAAI,GAAGJ,EAAS,IAAKK,GAAQA,EAAI,KAAK,MAAM,CAAC,EAAI,EAClDC,EAAqB,EAAI,EACzBC,EAAe,EACfC,EAAuB,KAAK,IAChC,GACAL,EAAgBC,EAAkBE,EAAqB,EAAIC,CAC7D,EAEME,EAAe,CACnB,KAAML,EACN,QAASE,EACT,OAAQA,EACR,OAAQA,EACR,UAAWE,CACb,EAEME,EAAQ,IAAI,GAAAC,QAAM,CACtB,KAAMb,GACN,SAAU,GACV,mBAAoB,GACpB,UAAWA,GAAe,IAAKc,GAAWH,EAAaG,CAAM,CAAC,EAC9D,MAAO,CACL,KAAM,CAAC,MAAM,CACf,CACF,CAAC,EAEKC,EAAqB,CAACC,EAAcC,IAAmB,CAE3D,GAAID,EAAK,OAASC,EAAQ,CACxB,IAAMC,EAAYD,EAAS,EACrBE,EAAQH,EAAK,MAAM,EAAG,KAAK,MAAME,EAAY,CAAC,CAAC,EAC/CE,EAAMJ,EAAK,MAAM,CAAC,KAAK,KAAKE,EAAY,CAAC,CAAC,EAChD,MAAO,GAAGC,OAAWC,IAEvB,OAAOJ,CACT,EAEAd,EAAS,QAASK,GAAQ,CACxBK,EAAM,KACJZ,GAAe,IAAKc,GAAW,CAC7B,IAAMO,EAAcd,EAAIO,CAAM,EAC9B,GAAI,CAACO,EAAa,OAAOA,EAEzB,GAAIP,IAAW,UAAYA,IAAW,SAAU,CAC9C,IAAMQ,EAAmBC,GAAchB,EAAI,OAAO,EAC5CiB,EAAgBD,GAAcF,CAAW,EACzCI,EAASC,GACbJ,EACAE,CACF,EACMG,EAAY,GAAAC,QAAMH,EAAO,KAAK,EAAED,EAAc,KAAK,EACnDK,EAAY,GAAAD,QAAMH,EAAO,KAAK,EAAED,EAAc,KAAK,EACnDM,EAAY,GAAAF,QAAMH,EAAO,KAAK,EAAED,EAAc,KAAK,EACzD,MAAO,GAAGG,KAAaE,KAAaC,IAGtC,OAAIhB,IAAW,YACN,GAAAc,QAAM,WAAW,UAAUP,CAAW,EAGxCA,CACT,CAAC,CACH,CACF,CAAC,EAED,IAAMU,EAAcnB,EAAM,SAAS,EAC7BoB,EAAaC,KACjB9B,EAAA4B,EAAY,MAAM;AAAA,CAAI,IAAtB,YAAA5B,EAA0B,KAAM,EAClC,EAAE,OAEF,MAAO,CAAE,MAAO4B,EAAa,MAAOC,CAAW,CACjD,EAEMT,GAAiBP,GAAiB,CACtC,IAAMkB,EAAWlB,EAAK,MAAM,GAAG,EAC/B,MAAO,CACL,MAAOkB,EAAS,CAAC,EACjB,MAAOA,EAAS,CAAC,EACjB,MAAOA,EAAS,CAAC,CACnB,CACF,EAEMR,GAA8B,CAClCJ,EACAa,IAGEb,EAAiB,MAAM,KAAK,IAAMa,EAAY,MAAM,KAAK,EAGlD,CACL,MAAO,MACP,MAAO,MACP,MAAO,KACT,EAGAb,EAAiB,MAAM,KAAK,IAAMa,EAAY,MAAM,KAAK,EAGlD,CACL,MAAO,QACP,MAAO,SACP,MAAO,QACT,EAGAb,EAAiB,MAAM,KAAK,IAAMa,EAAY,MAAM,KAAK,EAElD,CACL,MAAO,QACP,MAAO,QACP,MAAO,OACT,EAEK,CACL,MAAO,QACP,MAAO,QACP,MAAO,OACT,EH3IK,IAAMC,GAA0B,MACrCC,GACG,CACH,IAAMC,EAAOD,GAAA,YAAAA,EAAQ,KACfE,EAAY,OAAO,MAAKD,GAAA,YAAAA,EAAO,KAAM,CAAC,CAAC,EAC7C,GAAI,CAACA,GAAQ,CAACC,EAAU,OAAQ,OAEhC,GAAM,CAAE,MAAAC,EAAO,MAAAC,CAAM,EAAIC,GAAgBJ,CAAI,EAC7C,QAAQ,IAAI,EACZ,QAAQ,OAAI,GAAAK,SAAO,mBAAoBF,CAAK,CAAC,EAC7C,QAAQ,IAAID,CAAK,EACjB,QAAQ,OACN,GAAAG,SACE,aAAa,GAAAC,QAAM,KAAK,UAAU,iCAClCH,CACF,CACF,EACA,QAAQ,OACN,GAAAE,SACE,+BAA+B,GAAAC,QAAM,aACnC,MAAMC,GAAkB,CAC1B,IACAJ,CACF,CACF,EACA,QAAQ,IAAI,CACd,EAEaI,GAAoB,SAAY,CAC3C,IAAMC,EAAkB,4BAElBC,EAAeC,EAAgB,EAC/BC,EAAa,OAAO,KAAKC,GAAW,CAAC,EAErCC,EAASJ,EAAa,SAAS,gBAAgB,EAC/CK,EAAYH,EAAW,SAAS,QAAQ,EAE9C,GAAI,CAACE,GAAU,CAACC,EACd,OAAON,EAGT,IAAMO,EAAK,MAAMC,EAAc,EAE/B,OAAIF,EACK,GAAGC,EAAG,yBAGXF,EACK,oBAGFL,CACT,EK3DA,IAAAS,GAAkB,oBAMlB,IAAAC,GAAuB,0BAEjBC,GAAQC,GACLA,EACJ,QAAQ,eAAe,EACvB,YAAY,sDAAsD,EAClE,OAAOC,EAAM,EAGZA,GAAS,SAAY,CACzB,IAAMC,EAAW,MAAMC,EAAQC,GAAkB,yBAAyB,EAC1E,GAAI,CAACF,EAAS,OAAQ,CACpB,QAAQ,IAAI,kDAA2C,EACvD,OAGF,MAAMG,GAAwB,CAAE,KAAMH,CAAS,CAAC,CAClD,EAQaE,GAAmB,SACP,MAAME,GAA0B,EAK5CA,GAA4B,SAAY,CACnD,IAAMJ,EAAW,MAAMK,GAAuB,EAC9C,GAAI,CAACL,EAAU,MAAO,CAAC,EAEvB,IAAMM,EAA4C,CAAC,EAC/CC,EAEJ,cAAO,KAAKP,CAAQ,EAAE,QAASQ,GAAgB,CAC7C,IAAMC,EAAaT,EAASQ,CAAW,EAEnCA,EAAY,SAAS,YAAY,IACnCD,EAAYC,EAAY,QAAQ,eAAgB,uBAAuB,EAEvEF,EAAK,KAAK,CACR,KAAME,EACN,QAASC,EAAW,QACpB,OAAQA,EAAW,OACnB,OAAQA,EAAW,OACnB,UAAAF,CACF,CAAC,EAEL,CAAC,EAKoBD,EAAK,OAAQI,GAEzB,CAAC,IADK,GAAAC,SAAWD,EAAK,QAASA,EAAK,MAAM,CAElD,CAGH,EAEaL,GAAyB,SAAY,CAChD,IAAMO,EAAK,MAEL,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAI,QAAM,GAAAC,SAAMH,EAAII,EAAWJ,CAAE,EAAE,aAAc,CACxE,OAAQ,GACR,QAAS,IACX,CAAC,EAED,GAAIE,EACF,MAAM,IAAI,MAAM,uCAAuC,EAGzD,OAAKD,EAEE,KAAK,MAAMA,CAAM,EAFJ,IAGtB,EAEOI,GAAQpB,GC3FR,IAAKqB,OACVA,EAAA,aAAe,gBACfA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,QAAU,UAPAA,OAAA,ICAL,IAAKC,QACVA,EAAA,KAAO,OACPA,EAAA,IAAM,MACNA,EAAA,QAAU,UACVA,EAAA,OAAS,YAJCA,QAAA,ICAL,IAAKC,QACVA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,KAAO,OAHGA,QAAA,ICGL,IAAMC,EAAkBC,GAA0C,CACvE,GAAIA,EACF,OAAOA,EAGT,IAAMC,EAAeC,EAAgB,EAC/BC,EAAkBC,GAAmB,EAI3C,OACEH,EAAa,SAAS,cAAc,GACpCE,EAAgB,SAAS,cAAc,UAOvCF,EAAa,SAAS,eAAe,GACrCE,EAAgB,SAAS,eAAe,kBAMtCF,EAAa,SAAS,MAAM,GAAKE,EAAgB,SAAS,MAAM,WAMlEF,EAAa,SAAS,kBAAkB,GACxCE,EAAgB,SAAS,kBAAkB,UAMzCF,EAAa,SAAS,MAAM,GAAKE,EAAgB,SAAS,MAAM,SAIhEF,EAAa,SAAS,QAAQ,GAAKE,EAAgB,SAAS,QAAQ,oBAK1E,EAEaE,GAAiB,IAAgC,CAE5D,IAAMJ,EAAeC,EAAgB,EAGrC,GAAID,EAAa,SAAS,iBAAiB,EACzC,aAIF,GAAIA,EAAa,SAAS,gBAAgB,EACxC,YAIF,GAAIA,EAAa,SAAS,sBAAsB,EAC9C,kBAIF,GAAIA,EAAa,SAAS,oBAAoB,EAC5C,eAIJ,EC5EO,IAAMK,GACXC,GACoC,CACpC,OAAQA,EAAa,CACnB,aACE,MAAO,CACL,KAAM,iBACN,MAAO,mBACT,EACF,YACE,MAAO,CACL,KAAM,iBACN,MAAO,cACT,CACJ,CAGA,MAAO,CACL,KAAM,YACN,MAAO,OACT,CACF,EAEaC,GACXD,GACoC,CACpC,OAAQA,EAAa,CACnB,aACE,MAAO,CACL,KAAM,gBACN,MAAO,kBACT,EACF,YACE,MAAO,CACL,KAAM,gBACN,MAAO,aACT,CACJ,CAGA,MAAO,CACL,KAAM,gBACN,MAAO,WACT,CACF,EAEaE,GAAyBF,GAA+B,CACnE,OAAQA,EAAa,CACnB,YACE,MAAO,QACT,QACE,MAAO,OACX,CACF,ECvDA,IAAAG,EAAuB,yBACvBC,EAMO,oBAEMC,GAAU,CAACC,EAAkBC,IAAwB,CAChE,IAAMC,KAAU,gBAAaF,CAAQ,EAErC,SAAAG,QAAW,eAAe,OAAQ,CAACC,EAAMC,EAAMC,IACzCF,EAAK,SAASC,CAAI,EACbC,EAAQ,GAAG,EAAAH,OAAU,EAEvBG,EAAQ,QAAQ,EAAAH,OAAU,CAClC,EAED,EAAAA,QAAW,eAAe,4BAA8BI,GAAW,CACjE,GAAKA,EAIL,OAAQA,EAAQ,CACd,IAAK,YACH,MAAO,WAET,QACE,OAAOA,EAAO,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAO,MAAM,CAAC,CAC1D,CACF,CAAC,EAED,EAAAJ,QAAW,eAAe,aAAeI,GAAW,CAClD,GAAKA,EAIL,OAAOA,EAAO,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAO,MAAM,CAAC,CACxD,CAAC,EAEgB,EAAAJ,QAAW,QAAQD,EAAQ,SAAS,CAAC,EACtCD,CAAM,CACxB,EAEaO,GAAa,CAACC,EAAiBR,IAAgB,IAC5C,eAAYQ,CAAO,EAE3B,QAASC,GAAiB,CAC9B,IAAMC,EAAmB,GAAGF,KAAWC,IAEjCE,EAAmB,GAAGH,KAAWC,EAAK,QAAQ,OAAQ,EAAE,OAC9D,kBAAeE,CAAgB,KAG/B,iBAAcA,EAAkBb,GAAQY,EAAkBV,CAAM,CAAC,KAGjE,cAAWU,CAAgB,CAC7B,CAAC,CACH,ECxDA,IAAAE,GAAkB,oBAClBC,EAMO,oBACPC,GAAqB,uBACrBC,GAAqB,gBACrBC,GAAuB,qBACvBC,GAAiB,mBAEXC,GAAiB,CAAC,OAAQ,SAAU,OAAQ,MAAM,EAE3CC,EAAkB,MAC7BC,EACAC,IACG,CAtBL,IAAAC,EAuBE,IAAMC,GACJH,GAAA,YAAAA,EAAQ,OAAQI,GAAgBC,EAAe,CAAC,EAAE,KAChDC,EAAUN,EAAO,SAAWF,GAAe,KAAK,GAAG,EAEvD,GAAI,CAACG,EAAU,OAAQ,CACrB,GAAM,CAAE,KAAAM,EAAM,gBAAAC,CAAgB,EAAI,MAAM,GAAAC,QAAS,OAG9C,CACD,CACE,KAAM,QACN,KAAM,OACN,QAAS,+CACT,SAAWC,GACJA,EAIE,GAHE,2BAKb,EACA,CACE,KAAM,WACN,KAAM,kBACN,QAAS,iBACT,QAASZ,GACT,SAASI,EAAAF,GAAA,YAAAA,EAAQ,UAAR,YAAAE,EAAiB,MAAM,IAClC,CACF,CAAC,EAEDD,EAAY,CAACM,CAAI,EACjBD,EAAUE,EAAgB,KAAK,GAAG,EAGpCP,EAAU,QAASU,GAAiB,CAClC,IAAMC,EAAgBN,EAAUA,EAAQ,MAAM,GAAG,EAAI,OAC/CO,KAAqB,WAAOF,CAAY,EAAE,YAAY,EAGtDG,KAAe,SACnB,QAAQ,IAAI,EACZX,EACAU,CACF,EAEA,MAAI,kBAAeC,CAAY,EAAG,CAChC,QAAQ,MACN,uBAAe,SACbX,EACAU,CACF,mBACF,EACA,OAIF,IAAME,EAAWC,GAAmBL,CAAY,EAG1CM,EAAcC,GAAe,EAE7BC,EAAY,GAAG,kCAGfC,EAAUC,GAAgB,KAGhC,YAASF,EAAWC,CAAO,EAE3B,IAAME,EAAgB,CACpB,aAAAX,EACA,SAAAI,EACA,QAASH,GAAiBd,GAC1B,YAAAmB,CACF,EAGAM,GAAWH,EAASE,CAAa,EAG7BV,GACFd,GAAe,QAAS0B,GAAW,CAC5BZ,EAAc,SAASY,CAAM,MAChC,cAAW,GAAGJ,KAAWI,OAAY,CAEzC,CAAC,KAIH,aAAUrB,EAAiB,CAAE,UAAW,EAAK,CAAC,EAG9C,IAAMsB,EAA0B,GAAGtB,KAAmBU,IAElDa,EAAkB,CAAC,KAGnB,kBAAeD,CAAuB,IACxCC,EAAkB,CAAE,UAAW,EAAK,MAEtC,YAASN,EAASK,EAAyBC,CAAe,EAG1D,GAAAC,QAAK,YAAY,EAEjB,IAAMC,EAAwB,gBAAgB,kBAAkB,EAC1D,CAAE,OAAAC,CAAO,EAAI,GAAAC,QAAM,KAAKF,EAAuB,CACnD,KACA,6BACA,eACA,eAAe,4CACf,0BACA,gCACA,yBACA,yBACA,wBAEA,eAAeN,EAAc,UAC7B,iBAAiBlB,GAAgBC,EAAe,CAAC,EAAE,QACnD,0BAA0BQ,IAC1B,gBAAgBE,IAChB,oBAAoBJ,GACtB,CAAC,EAEGkB,GACF,QAAQ,IAAIA,CAAM,EAGpB,QAAQ,IACN,uBAAgBJ,4BAClB,CACF,CAAC,CAGH,EAEMJ,GAAkB,KACtB,GAAAM,QAAK,MAAM,EACJ,GAAAA,QAAK,UAAU,UAAU,GC5JlC,IAAMI,GAAQC,GAAqB,CACjC,IAAMC,EAAcC,EAAe,EAC7B,CAAE,KAAAC,CAAK,EAAIC,GAAgBH,CAAW,EAE5C,OAAOD,EACJ,QAAQ,iBAAiB,EACzB,qBAAqB,EAAI,EACzB,YACC,6EACF,EACC,OACC,0BACA,mEACA,uBACF,EACC,OAAO,oBAAqB,sCAAuCG,CAAI,EACvE,OAAOE,EAAM,CAClB,EAEMA,GAAS,MACbC,EACAC,IACG,CACHC,EAAgBF,EAAQC,EAAQ,IAAI,CACtC,EAEOE,GAAQV,GC9Bf,IAAAW,GAAwB,qBACjB,UAAO,EAEd,IAAMC,GAA4D,CAChE,YAAa,OACb,WAAY,QACZ,KAAM,YACN,yBAA0B,MAC1B,0BAA2B,OAC3B,6BAA8B,MAChC,EAEaC,GAAa,IAAgB,CACxC,IAAMC,EAAU,QAAQ,IAAI,SAE5B,GAAI,CAACA,EACH,MAAO,cAGT,IAAIC,EAAgB,SAEpB,OAAW,CAACC,EAAKC,CAAK,IAAK,OAAO,QAAQL,EAAY,EACpD,GAAIK,EAAM,KAAKH,CAAO,EAAG,CACvBC,EAAMC,EACN,MAIJ,OAAOD,CACT,EAEaG,EAAM,CACjB,SAAUL,GAAW,EACrB,oBAAqB,QAAQ,IAAI,qBAAuB,QACxD,4BACE,QAAQ,IAAI,6BAA+B,QAC7C,0BACE,QAAQ,IAAI,2BAA6B,IAAO,GAAK,GAAK,GAC5D,oBAAqB,QAAQ,IAAI,qBAAuB,qBACxD,oBACE,QAAQ,IAAI,qBAAuB,wBACrC,kBAAmB,QAAQ,IAAI,mBAAqB,OACpD,yBACE,QAAQ,IAAI,oBAAsB,uBACtC,EC3CA,IAAAM,GAAoB,sBACpBC,GAAsC,iCAGhCC,GAAQC,GACLA,EACJ,QAAQ,OAAO,EACf,YAAY,uBAAuB,EACnC,OAAOC,EAAM,EACb,OACC,oBACA,2GACAC,EAAI,iBACN,EACC,OACC,wBACA,8FACAA,EAAI,mBACN,EACC,OACC,wBACA,8FACAA,EAAI,mBACN,EACC,OACC,kCACA,6GACAA,EAAI,wBACN,EAGED,GAAS,MAAO,CACpB,KAAAE,EACA,OAAAC,EACA,OAAAC,EACA,WAAAC,CACF,IAKM,CACJ,IAAMC,KAAM,GAAAC,SAAQ,EAIdC,EAFY,IAAI,IAAIL,CAAM,EAGpB,WAAa,QAClBM,GAAa,CAlDtB,IAAAC,EAmDcD,EAAS,QAAQ,YAAY,KAC/BC,EAAAD,EAAS,QAAQ,YAAY,IAA7B,MAAAC,EAAgC,QAAQ,CAACC,EAAQC,IAAM,CApDnE,IAAAF,GAqDkBA,EAAAD,GAAA,YAAAA,EAAU,UAAV,MAAAC,EAAoB,gBACtBD,EAAS,QAAQ,YAAY,EAAEG,CAAC,EAAID,EAAO,QACzC,UACA,EACF,EAEJ,GAEJ,EACA,OAENL,EAAI,IACF,cACA,0BAAsB,CACpB,OAAQ,GAAGF,YACX,aAAc,GACd,YAAa,CAAE,YAAa,EAAG,EAC/B,YAAa,KAAO,CAClB,IAAK,QAAQ,IACb,KAAOS,GAAQ,CACT,GAAGA,IAAM,SAAS,4BAA4B,IAE9C,GAAGA,IAAM,SAAS,eAAe,EACnC,QAAQ,IACN,sBAAsBX,gBAAmBE,WAC3C,EACSS,GACT,QAAQ,IAAIA,CAAG,EAEnB,EACA,KAAM,QAAQ,KACd,MAAO,QAAQ,MACf,MAAO,QAAQ,KACjB,EACF,CAAC,CACH,EAEAP,EAAI,IACF,YACA,0BAAsB,CACpB,OAAQ,GAAGF,UACX,aAAc,GACd,oBAAqB,CACnB,aAAc,EAChB,EACA,QAAS,CACP,wBAAyB,GAAGC,SAC9B,EACA,YAAa,CAAE,UAAW,EAAG,EAC7B,YAAa,KAAO,CAClB,IAAK,QAAQ,IACb,KAAOQ,GAAQ,CACT,GAAGA,IAAM,SAAS,4BAA4B,IAE9C,GAAGA,IAAM,SAAS,eAAe,EACnC,QAAQ,IAAI,sBAAsBX,cAAiBE,SAAc,EACxDS,GACT,QAAQ,IAAIA,CAAG,EAEnB,EACA,KAAM,QAAQ,KACd,MAAO,QAAQ,MACf,MAAO,QAAQ,KACjB,GACA,WAAAL,CACF,CAAC,CACH,EAEAF,EAAI,IACF,OACA,0BAAsB,CACpB,OAAQ,GAAGH,IACX,aAAc,GACd,GAAI,GACJ,YAAa,KAAO,CAClB,IAAK,QAAQ,IACb,KAAOU,GAAQ,CACT,GAAGA,IAAM,SAAS,eAAe,EACnC,QAAQ,IAAI,sBAAsBX,QAAWC,GAAQ,EAC5CU,GACT,QAAQ,IAAIA,CAAG,CAEnB,EACA,KAAM,QAAQ,KACd,MAAO,QAAQ,MACf,MAAO,QAAQ,KACjB,EACF,CAAC,CACH,EAEAP,EAAI,OAAO,OAAOJ,CAAI,CAAC,CACzB,EAEOY,GAAQhB,GChJf,IAAAiB,GAAqC,qBCFrC,IAAAC,GAAiB,mBACjBC,GAAkB,oBCDX,IAAMC,GAAkBC,GACzB,OAAO,KAAS,IACX,KAAKA,CAAG,EAGV,OAAO,KAAKA,CAAG,EAAE,SAAS,QAAQ,EDI3C,IAAMC,GAAa,yBAQNC,EAAQ,IAAI,GAAAC,QAAY,CACnC,YAAaF,GACb,SAAU,CACR,IAAK,GACL,YAAa,EACb,SAAU,CAAC,CACb,CACF,CAAC,EAGYG,EAAiB,SAAY,CACxC,GAAIC,GAAyB,EAAG,OAEhC,IAAMC,EAAe,MAAMC,GAA0B,EACrD,GAAID,IAAiB,KACrB,IAAIA,EAAc,CAChBE,GAAoB,EACpB,OAGFC,GAAY,EACZD,GAAoB,EACtB,EAKMC,GAAc,SAAY,CAC9B,IAAMC,EAAWR,EAAM,IAAI,UAAU,EAChCQ,GAAA,MAAAA,EAAU,SAEf,MAAMC,GAAwB,CAAE,KAAMD,CAAS,CAAC,EAChD,QAAQ,IAAI;AAAA,CAAI,EAClB,EAOaH,GAA4B,SAAY,CACnD,IAAMK,EAAa,MAAMC,GAAY,EAC/BC,EAAYC,GAAuB,EAEzC,OAAIH,IAAe,KAAa,KAE5B,GAAAE,GAAa,CAACF,EAGpB,EAMaJ,GAAsB,SAAY,CAC7C,GAAI,CACF,IAAME,EAAW,MAAMM,GAAiB,EAExC,OAAAd,EAAM,IAAI,WAAYQ,CAAQ,EAC9BR,EAAM,IAAI,cAAe,KAAK,IAAI,CAAC,EACnCA,EAAM,IAAI,MAAO,MAAMe,GAAwB,CAAC,EAEzCP,CACT,MAAE,CAEA,OAAAR,EAAM,IAAI,WAAY,CAAC,CAAC,EACxBA,EAAM,IAAI,cAAe,KAAK,IAAI,CAAC,EACnCA,EAAM,IAAI,MAAO,EAAE,EACZ,IACT,CACF,EAEaa,GAAyB,IAAM,CAC1C,IAAMG,EAAchB,EAAM,IAAI,aAAa,EAE3C,GAAI,CAACgB,EAAa,MAAO,GAIzB,IAAMC,EAFM,KAAK,IAAI,EAEFD,EACbE,EAAW,OAAOC,EAAI,yBAAyB,EAErD,OAAOF,GAAQC,CACjB,EAOaP,GAAc,SAAY,CACrC,IAAMS,EAAMpB,EAAM,IAAI,KAAK,EACrBqB,EAAS,MAAMN,GAAwB,EAE7C,OAAIM,IAAW,KAAa,KAErBD,IAAQC,CACjB,EAMaN,GAA0B,SAAY,CACjD,IAAMP,EAAW,MAAMc,EAA2B,EAClD,GAAI,CAACd,EACH,eAAQ,MACN,GAAAe,QAAM,IACJ,sEACF,CACF,EAEO,KAGT,IAAMC,EAA0BhB,EAAS,IAAKiB,GAAM,GAAGA,EAAE,QAAQA,EAAE,SAAS,EAG5E,OAFaC,GAAeF,EAAwB,SAAS,CAAC,CAGhE,EAEarB,GAA2B,IAC/BgB,EAAI,4BAA4B,kBAAkB,IAAM,OEvI1D,IAAMQ,EAAiB,CAC5B,gBAA0B,EAAG,CAC3B,OAASC,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC7C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAAQ,IAAM,gBAAgB,oBAAoB,CACpD,EACA,OAAkB,EAAG,CACnB,OAASA,GAAmB,CAAC,MAAO,GAAGA,CAAI,EAC3C,SAAWA,GAAmB,CAAC,UAAW,GAAGA,CAAI,EACjD,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAAQ,IAAM,gBAAgB,WAAW,CAC3C,EACA,SAAoB,EAAG,CACrB,OAASA,GAAmB,CAAC,MAAO,GAAGA,CAAI,EAC3C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAAQ,IAAM,gBAAgB,WAAW,CAC3C,EACA,QAAmB,EAAG,CACpB,OAASA,GAAmB,CAAC,MAAO,GAAGA,CAAI,EAC3C,SAAWA,IAIOA,GAAA,YAAAA,EAAM,QAEbA,GAIT,QAAQ,IAAI,EACZ,QAAQ,KACN,uIACF,EACA,QAAQ,KAAK,+CAA+C,EAC5D,QAAQ,KAAK,0CAA0C,EACvD,QAAQ,IAAI,EAEL,CAAC,kBAAkB,GAE5B,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAASC,GAAqC,CAC5C,IAAMC,EAAUD,IAAS,QAAU,cAAgB,QACnD,OAAO,QAAQ,QAAQ,QAAQC,GAAS,CAC1C,CACF,EACA,QAAmB,EAAG,CACpB,OAASF,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC7C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAAQ,IAAM,gBAAgB,YAAY,CAC5C,EACA,SAAoB,EAAG,CACrB,OAASA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC7C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,SAAWA,GAAmB,CAAC,QAAS,GAAGA,CAAI,EAC/C,OAAQ,IAAM,gBAAgB,aAAa,CAC7C,EACA,UAAqB,EAAG,CACtB,OAASA,GAAmB,CAAC,GAAGA,CAAI,EACpC,SAAWA,GAAmB,CAAC,GAAGA,CAAI,EACtC,SAAWA,GAAmB,CAAC,GAAGA,CAAI,EACtC,OAAQ,IACC,SAEX,CACF,ECvEA,IAAAG,GAAkB,oBAELC,EAAY,MAAOC,EAAiBC,IAAmB,CAHpE,IAAAC,EAAAC,EAIE,GAAIH,IAAY,UAAW,CACzB,IAAMI,EAAwB,OAAO,OAAOC,CAAY,EACrD,OAAQC,GAAMA,IAAM,SAAS,EAC7B,KAAK,IAAI,EAEZ,QAAQ,MACN,2EAA2EF;AAAA,oIAC7E,EAEA,OAGF,IAAMG,KAAY,GAAAC,SAAMR,EAASC,EAAM,CACrC,MAAO,OACP,YAAa,GACb,IAAK,CACH,YAAa,OACb,GAAG,QAAQ,GACb,CACF,CAAC,EAED,OAAAC,EAAAK,EAAU,SAAV,MAAAL,EAAkB,KAAK,QAAQ,SAC/BC,EAAAI,EAAU,SAAV,MAAAJ,EAAkB,KAAK,QAAQ,QAExB,MAAMI,CACf,ECzBO,IAAME,EAAwBC,GAAsC,CACzE,IAAIC,EAAcC,EAAe,EAE7BC,EAAoB,CAAC,EACzB,OAAQH,EAAQ,CACd,IAAK,MACHG,EAAUC,EAAeH,CAAW,EAAE,OAAO,CAAC,EAAE,CAAC,EACjD,MACF,IAAK,QACHE,EAAUC,EAAeH,CAAW,EAAE,SAAS,CAAC,EAAE,CAAC,EACnD,MACF,IAAK,QACHE,EAAUC,EAAeH,CAAW,EAAE,SAAS,CAAC,EAAE,CAAC,EACnD,KACJ,CAEA,OAAIA,aAAsCD,IAAW,UACnDC,EAAc,eAGT,cAAcA,KAAeE,EAAQ,KAC1C,GACF,yCAAyCF,cAC3C,EAEaI,EAA+B,IACnC;AAAA,MAAqC,OAAO,OAAOC,CAAY,EAAE,KACtE,IACF,ILxBF,IAAMC,GAASC,GACNA,EACJ,QAAQ,OAAO,EACf,YAAYC,EAAqB,OAAO,CAAC,EACzC,mBAAmB,EAAI,EACvB,UACC,IAAI,UACF,4BACAC,EAA6B,CAC/B,EAAE,QACA,OAAO,OAAOC,CAAY,EAAE,OACzBC,GAASA,aACZ,CACF,CACF,EACC,SAAS,WAAW,EACpB,OAAOC,EAAM,EAGZA,GAAS,MACbC,EACA,CAAE,SAAAC,CAAS,IACR,CACH,IAAMC,EAAcC,EAAeF,CAAQ,EAErCG,EAAUC,EAAeH,CAAW,EAAE,OAAO,OAAO,EACpDI,EAAUD,EAAeH,CAAW,EAAE,SAASF,CAAI,EAEzD,MAAMO,EAAe,EAErBC,EAAUJ,EAASE,CAAO,CAC5B,EAEOG,GAAQhB,GMvCf,IAAAiB,GAAqC,qBCFrC,IAAAC,GAAuB,sCCQvB,IAAAC,GAAkB,oBCRlB,IAAAC,GAAsC,oBAEzBC,GAAiB,MAAOC,GAAiB,CACpD,GAAI,CACF,IAAMC,EAAiB,QAAM,kBAAc,QAAQ,IAAI,CAAC,EAExD,SAAO,WAAOD,EAAM,CAClB,GAAIC,GAAkB,CAAC,EACvB,OAAQ,YACV,CAAC,CACH,MAAE,CACA,OAAOD,CACT,CACF,EDCO,IAAME,GAAuB,SAAY,CAC9C,IAAMC,EAAwB,gBAAgB,kBAAkB,EAC1D,CAAE,OAAAC,CAAO,EAAI,GAAAC,QAAM,KAAKF,EAAuB,CACnD,KACA,6BACA,eACA,eAAe,0DACf,0BACA,gCACA,yBACA,yBACA,uBACF,CAAC,EAEGC,GACF,QAAQ,IAAIA,CAAM,CAEtB,EEtBO,IAAME,GAAmB,IAAkB,CAGhD,IAAMC,EAFcC,EAAe,EAEP,SAAW,CAAC,EAKxC,MAAO,CACL,MAHED,GAAA,YAAAA,EAAS,MAAO,IAAe,MAAM,uBAAuB,IAAM,IAItE,CACF,EHTA,IAAAE,GAAkB,oBAClBC,GAAqB,uBACrBC,GAAkB,oBAClBC,GAAuC,qBACvCC,GAAmB,qBACnBC,GAAmB,qBAIbC,GAA8B,CAAC,QAAS,MAAM,EAC9CC,GAAkC,QAElCC,GAAkC,SAElCC,GAAQC,GACLA,EACJ,QAAQ,UAAU,EAClB,YACC,kEACF,EACC,YACC,IAAI,YAAS,YAAa,2BAA2B,EAClD,QAAQJ,EAAQ,EAChB,QAAQC,EAAc,CAC3B,EACC,YACC,QACA;AAAA;AAAA;AAAA;AAAA,CAKF,EACC,OAAOI,EAAM,EAGLA,GAAS,MAAOC,GAA6B,CACxD,OAAQA,EAAS,CACf,IAAK,QACHC,GAAe,EACf,OACF,IAAK,OACHC,GAAkB,EAClB,MACJ,CACF,EAEMA,GAAoB,SAAY,CA1DtC,IAAAC,EA2DE,IAAMC,EAAc,MAAMC,GAAqB,EAM/C,GAJoB,MAAMC,EACxBC,GACA,sCACF,EACiB,CACf,QAAQ,IAAI,gDAAyC,EACrD,OAGF,GACEH,GACC,MAAMI,GAAmC,CAAE,IAAKJ,CAAY,CAAC,EAE9D,OAGF,QAAQ,IAAI,yCAAkC,EAC9C,IAAMK,EAAoB,CAAC,4BAA4B,EAqBvD,IAlBE,CAACL,GACD,GAAAM,QAAO,GAAGN,EAAY,QAASR,EAA+B,KAE9Da,EAAkB,KAAK,wBAAwB,EAC/C,QAAQ,IAAI,gEAAyD,GAEvE,MAAME,GAAoBF,CAAiB,EAG3C,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAE,EAEd,QAAQ,IAAI,yDAAkD,EAC9D,MAAMG,GAAqB,EAC3B,QAAQ,IACN,qEACF,EAEIH,EAAkB,SAAS,wBAAwB,EAAG,CACxD,IAAMI,EAAqB,MAAMR,GAAqB,EACtD,QAAQ,IACN,4CACED,GAAA,YAAAA,EAAa,UAAW,iBACnBS,GAAA,YAAAA,EAAoB,UAAW,WACxC,EACA,QAAQ,IACN,iBAAiB,GAAAC,QAAM,UAAU,WAC/B,8BACEV,GAAA,YAAAA,EAAa,QAAQ,WAAW,IAAK,MAAO,IAEhD,GACF,EAIF,QAAQ,IAAI,EAAE,EAEd,GAAM,CAAE,IAAAW,CAAI,EAAIC,GAAiB,EACjC,GAAID,EAAK,CACP,QAAQ,IACN,2FACF,EACA,QAAQ,IACN,8FACF,EACA,OAGF,GAAI,CAACA,EAAK,CACR,IAAME,GAAYd,EAAAe,EAAe,EAAE,UAAjB,YAAAf,EAA0B,IAE5C,QAAQ,IACN,sJACF,EACA,QAAQ,IAAI,4DAAqD,EACjE,QAAQ,IACN,mFACF,EAGA,QAAQ,IAAI,EAAE,EACd,QAAQ,OACN,GAAAgB,SACE,GAAAC,QAAS,aACP,GAAAC,SAAO;AAAA;AAAA;AAAA,kCAGiBJ;AAAA;AAAA;AAAA;AAAA,SAIzB,CACD,EACA,CACE,QAAS,EACT,MAAO,eACP,UAAW,GACX,YAAa,aACb,YAAa,OACf,CACF,CACF,EAEJ,EAEahB,GAAiB,MAAO,CACnC,YAAAqB,EAAc,EAChB,EAA+B,CAAC,IAAM,CACpC,IAAMlB,EAAc,MAAMC,GAAqB,EAE/C,GAAID,EAAa,CACf,GAAI,MAAMI,GAAmC,CAAE,IAAKJ,CAAY,CAAC,EAC/D,OAGF,GAAI,GAAAM,QAAO,GAAGN,EAAY,QAASR,EAA+B,EAAG,CACnE,QAAQ,IACN,mDAA4CQ,EAAY,uEAC1D,EACA,IAAMmB,EAAK,MAAMC,EAAc,EAC/B,QAAQ,IACN,gEAAyDD,EAAG,yBAC9D,EACA,WAIJ,WAAO,CACL,QAAS,IAAM,CACTD,GACF,QAAQ,KAAK,CAAC,CAElB,CACF,CAAC,EAAE,MAAOG,GAAM,CAAC,CAAC,CACpB,EAEMpB,GAAuB,SAAY,CACvC,IAAMqB,EACJ,MAAMC,EAA0C,EAC5CvB,EAAcsB,GAAA,YAAAA,EAAyB,KAC1CE,GACCA,EAAI,OAAS,mBAAqBA,EAAI,OAAS,uBAGnD,GAAKxB,EAIL,OAAOA,CACT,EAEaI,GAAqC,MAAO,CACvD,IAAAoB,CACF,IAGMA,EAAI,OAAS,uBAAyB,GAAAlB,QAAO,GAAGkB,EAAI,QAAS,OAAO,GACtE,QAAQ,IACN,mDAA4CA,EAAI,uEAClD,EACA,QAAQ,IAAI,kDAAkD,EAC9D,QAAQ,IACN,GAAAd,QAAM,KAAK,mDAAmD,CAChE,EACO,IAGF,GAGFe,GAAQhC,GD7Nf,IAAMiC,GAAOC,GACJA,EACJ,QAAQ,KAAK,EACb,YAAYC,EAAqB,KAAK,CAAC,EACvC,mBAAmB,EAAI,EACvB,UACC,IAAI,UACF,4BACAC,EAA6B,CAC/B,EAAE,QACA,OAAO,OAAOC,CAAY,EAAE,OACzBC,GAASA,aACZ,CACF,CACF,EACC,UACC,IAAI,UACF,4BACA,8BACF,EAAE,QAAQ,OAAQ,+BAA+B,CACnD,EACC,SAAS,WAAW,EACpB,OAAOC,EAAM,EAGZA,GAAS,MACbC,EACA,CAAE,SAAAC,EAAU,GAAGC,CAAO,IACnB,CACH,IAAMC,EAAcC,EAAeH,CAAQ,EAErCI,EAAUC,EAAeH,CAAW,EAAE,OAAO,KAAK,EAClDI,EAAUD,EAAeH,CAAW,EAAE,OAAOH,CAAI,EAEvD,MAAMQ,EAAe,EAErB,IAAMC,EAAkB,MAAMC,GAAoB,GAEjCR,EAAO,WAAa,QAAU,GAAQO,IAGrDE,GAAe,CAAE,YAAa,EAAM,CAAC,EAGvCC,EAAUP,EAASE,CAAO,CAC5B,EAEOM,GAAQpB,GKzDf,IAAAqB,GAAgC,qBAQhC,IAAMC,GAASC,GACJA,EACF,QAAQ,OAAO,EACf,YAAYC,EAAqB,OAAO,CAAC,EACzC,mBAAmB,EAAI,EACvB,UACG,IAAI,UACA,4BACAC,EAA6B,CACjC,EAAE,QACE,OAAO,OAAOC,CAAY,EAAE,OACvBC,GAASA,aACd,CACJ,CACJ,EACC,SAAS,WAAW,EACpB,OAAOC,EAAM,EAGhBA,GAAS,MACXC,EACA,CAAE,SAAAC,CAAS,IACV,CACD,IAAMC,EAAeC,EAAeF,CAAQ,EAEtCG,EAAUC,EAAeH,CAAW,EAAE,OAAO,OAAO,EACpDI,EAAUD,EAAeH,CAAW,EAAE,SAASF,CAAI,EAGzD,MAAMO,EAAe,EAErB,GAAI,CACA,MAAMC,EAAUJ,EAASE,CAAO,CACpC,MAAE,CACE,QAAQ,KAAK,CAAC,CAClB,CACJ,EAEOG,GAAQhB,GC7Cf,IAAAiB,GAAkB,oBAIlB,IAAMC,GAAOC,GACJA,EACJ,QAAQ,KAAK,EACb,YACC,gGACF,EACC,mBAAmB,EAAI,EACvB,SAAS,qBAAqB,EAC9B,OAAOC,EAAM,EAGZA,GAAS,MAAOC,GAAmB,CACvC,GAAM,CAACC,EAAQ,GAAGC,CAAQ,EAAIF,EAExBG,EAAmBC,GAAW,EAGpC,GAAI,CAACH,EAAQ,CACX,QAAQ,IAAI,iBAAiB,GAAAI,QAAM,KAAK,cAAc;AAAA,CAAM,EAC5D,OAAW,CAACC,EAAKC,CAAK,IAAK,OAAO,QAAQJ,CAAgB,EACxD,QAAQ,IAAI,KAAKG,GAAK,EACtB,QAAQ,IAAI,OAAO,GAAAD,QAAM,IAAIE,CAAK,GAAG,EACrC,QAAQ,IAAI,EAGd,OAMF,GAAI,CAFoB,OAAO,KAAKJ,CAAgB,EAAE,SAASF,CAAM,EAE/C,CACpB,IAAMO,EAAU,GAAG,QAAQ,IAAI,uBAAuBP,IACtDQ,EAAUD,EAASN,CAAQ,EAC3B,OAGF,IAAMQ,EAAK,MAAMC,EAAc,EAC/BF,EAAUC,EAAG,KAAM,CAAC,MAAOT,EAAQ,GAAGC,CAAQ,CAAC,CACjD,EAEOU,GAAQf,GC7Cf,IAAAgB,GAAiB,mBACjBC,EAAkB,oBAClBC,GAAqB,uBAErBC,GAAuC,2CACvCC,EAA4D,oBCN5D,IAAAC,GAAiB,mBCAjB,IAAAC,GAAiB,mBCAjB,IAAAC,GAAA,GAAAC,GAAAD,GAAA,yBAAAE,GAAA,iBAAAC,EAAA,iBAAAC,GAAA,uBAAAC,GAAA,mBAAAC,GAAA,eAAAC,EAAA,0BAAAC,KCAA,IAAMC,GACJ,mOAEIC,GAAkB,4CAiBXC,EAAcC,GAAwC,CACjE,IAAMC,EAAUD,EAAQ,SAASH,EAAY,EAEvCK,EAA8B,CAAC,EAErC,QAAWC,KAASF,EAAS,CAC3B,GAAM,CACJG,EACAC,EACAC,EACAC,EACAC,CACF,EAAIL,EAEJD,EAAQ,KAAK,CACX,UAAAE,EACA,WAAAI,EACA,GAAIH,GAAiB,CAAE,cAAAA,CAAc,EACrC,GAAIC,GAAgB,CAAE,aAAAA,CAAa,EACnC,GAAIC,GAAmB,CAAE,gBAAAA,CAAgB,CAC3C,CAAC,EAGH,OAAOL,GAAA,YAAAA,EAAS,OAAO,QACzB,EAEaO,GACXC,GAC2B,CAC3B,IAAMT,EAAUS,EAAkB,SAASZ,EAAe,EAEpDa,EAAsC,CAAC,EAE7C,QAAWR,KAASF,EAAS,CAC3B,GAAM,CAACG,EAAWQ,EAAUC,EAAKC,EAAQC,CAAc,EAAIZ,EAE3DQ,EAAY,KAAK,CACf,UAAAP,EACA,SAAUQ,EAAS,KAAK,EACxB,OAAQE,EAAO,KAAK,EACpB,eAAAC,CACF,CAAC,EAGH,OAAOJ,CACT,EAGaK,GAAyB,CACpChB,EACAiB,IACW,CAvEb,IAAAC,EAyEE,IAAMC,EAAsBnB,EAAQ,UAClC,EACAA,EAAQ,QAAQiB,EAAY,SAAS,CACvC,EAEMG,EAAsBrB,EAAWoB,CAAmB,EAAE,IAAI,EAGhE,OAAKC,EAKyBD,EAAoB,UAChDA,EAAoB,QAAQC,GAAA,YAAAA,EAAqB,SAAS,IACxDF,EAAAE,GAAA,YAAAA,EAAqB,YAArB,YAAAF,EAAgC,OACpC,EAPSC,CAWX,EAGaE,GAA2B,CACtCrB,EACAiB,IAMO,CAAC,EAJoBA,EACxBD,GAAuBhB,EAASiB,CAAW,EAC3C,IAEyB,KAAK,EAG9BK,GAAe,CAAC,QAAS,kBAAmB,aAAa,EAElDC,GAAkBvB,GAA4B,CA7G3D,IAAAkB,EA8GE,IAAIM,EAAaxB,EAGXyB,EAAa1B,EAAWC,CAAO,EAE/B0B,EAAmBD,EAAW,OACjCR,GAAgB,CAACA,EAAY,UAAU,SAAS,cAAc,CACjE,EACMU,EAAcF,EAAW,OAAQR,GACrCA,EAAY,UAAU,SAAS,aAAa,CAC9C,EAEMW,EAA0C,CAAC,EAC3CC,EAA6C,CAAC,EAEpDH,EAAiB,QAAST,GAAgB,CACpCI,GAAyBrB,EAASiB,CAAW,EAC/CW,EAAyB,KAAKX,CAAW,EAEzCY,EAA4B,KAAKZ,CAAW,CAEhD,CAAC,EAGD,IAAMa,EAAiBN,EAAW,SAChCN,EAAAW,GAAA,YAAAA,EAA8B,KAA9B,YAAAX,EAAkC,SACpC,EAGAW,EAA4B,QAASZ,GAAgB,CACnDO,EAAaA,EAAW,QAAQP,EAAY,UAAW,EAAE,CAC3D,CAAC,EAGDU,EAAY,QAASV,GAAgB,CACnCO,EAAaA,EAAW,QAAQP,EAAY,UAAW,EAAE,CAC3D,CAAC,EAGD,IAAMc,EAAmBF,EAA4B,OACnD,CAACG,EAAKf,IAAgB,CACpB,GAAM,CAAE,WAAAT,CAAW,EAAIS,EAEvB,OAAIe,EAAIxB,CAAU,EAChBwB,EAAIxB,CAAU,EAAE,KAAKS,CAAW,EAEhCe,EAAIxB,CAAU,EAAI,CAACS,CAAW,EAGzBe,CACT,EACA,CAAC,CACH,EAuFMC,EA3BgB,CAAC,GAzDD,OAAO,QAAQF,CAAgB,EAAE,IACrD,CAAC,CAACvB,EAAY0B,CAAa,IAAM,CAE/B,IAAM7B,EAAgB6B,EAAc,KACjCjB,GAAgBA,EAAY,aAC/B,EAGMV,EAAkB2B,EAAc,KACnCjB,GAAgBA,EAAY,eAC/B,EAKMX,EAAe4B,EAClB,OAAQjB,GAAgBA,EAAY,YAAY,EAChD,IAAKA,IAEkBA,EAAY,cAAgB,IAC/C,QAAQ,OAAQ,EAAE,EAClB,KAAK,EACL,MAAM,GAAG,EACT,IAAKkB,IAAgBA,GAAY,KAAK,CAAC,EAEtB,OAAO,OAAO,EAAE,KAAK,IAAI,CAC9C,EACA,KAAK,IAAI,EAERC,EAAa,GAKjB,OAAI7B,IACF6B,GAAc,GAAG7B,EAAgB;AAAA,IAE/BF,GAAiBC,KACfD,GAAiBC,EACnB8B,GAAc,UAAU/B,EAAc,oBAAoBC,aAAwB4B,EAAc,CAAC,EAAE;AAAA,EAC1F7B,EACT+B,GAAc,UAAU/B,EAAc,uBAAuB6B,EAAc,CAAC,EAAE;AAAA,EAE9EE,GAAc,YAAY9B,aAAwB4B,EAAc,CAAC,EAAE;AAAA,GAIhE,CAAC1B,EAAY4B,CAAU,CAIhC,CACF,CAKuC,EAAE,KACvC,CAAC,CAACC,CAAW,EAAG,CAACC,CAAW,IAAM,CAChC,IAAMC,EAAoBjB,GAAa,UAAWkB,GAChDH,EAAY,SAASG,CAAK,CAC5B,EACMC,EAAoBnB,GAAa,UAAWkB,GAChDF,EAAY,SAASE,CAAK,CAC5B,EAEA,OAAID,IAAsBE,EACjBJ,EAAY,cAAcC,CAAW,EAG1CC,IAAsB,GACjB,EAGLE,IAAsB,GACjB,GAGFF,EAAoBE,CAC7B,CACF,EAKG,IAAI,CAAC,CAAC,CAAEL,CAAU,IAAMA,CAAU,EAClC,KAAK,EAAE,EACJM,EAAoBf,EACvB,IAAKV,GAAgBA,EAAY,SAAS,EAC1C,KAAK;AAAA,CAAI,EAEZ,OAAAO,EACEA,EAAW,UAAU,EAAGM,CAAc,EACtCG,EACAS,EACAlB,EAAW,UAAUM,CAAc,EAE9BN,CACT,ECrQO,IAAMmB,GAAqB,CAACC,EAAiBC,IAA2B,CAC7E,IAAMC,EAAUC,EAAWH,CAAO,EAC5BI,EAAaF,EAAQA,EAAQ,OAAS,CAAC,EAEvCG,EAAkBD,EACpBJ,EAAQ,QAAQI,EAAW,SAAS,EACpCJ,EAAQ,OAAS,EAErB,MAAO,GAAGA,EAAQ,MAChB,EACAK,GAAkBD,GAAA,YAAAA,EAAY,UAAU,OAC1C;AAAA,EAAMH;AAAA,EAAWD,EAAQ,MACvBK,GAAkBD,GAAA,YAAAA,EAAY,UAAU,OAC1C,GACF,EChBA,IAAAE,GAA6B,oBAC7BC,GAAqB,gBAEd,SAASC,GAEdC,EACoB,CACpB,GAAK,iBAAM,mBAGX,GAAI,CACF,SAAO,oBAAa,SAAK,KAAK,mBAAoBA,CAAI,CAAC,EAAE,SAAS,CACpE,MAAE,CACA,MACF,CACF,CJXA,IAAMC,GAAS,QAAQ,QAAQ,EACzBC,GAAkBD,GAAO,UAAU,QAE5BE,GAAoB,CAC/BC,EACAC,IACG,CACHJ,GAAO,UAAU,QAAU,YAAaK,EAA+B,CACrE,OAAKA,EAAK,CAAC,IAA4B,iBAC9B,CACL,GAAGC,GACH,eAAiBC,GACRC,GAAe,KACpB,CACE,mBAAoBJ,EAChBD,EACA,GAAAM,QAAK,KAAK,QAAQ,IAAI,EAAGN,CAAW,CAC1C,EACAI,CACF,CAEJ,EAIKN,GAAgB,MAAM,KAAMI,CAAI,CACzC,CACF,ED3BO,IAAMK,GAAkB,MAC7BC,EACAC,IACG,CACH,GAAI,CACF,OAAAC,GAAkBF,EAAaC,CAAU,EAE1B,QACb,GAAAE,QAAK,KACHF,EAAaD,EAAc,GAAAG,QAAK,KAAK,QAAQ,IAAI,EAAGH,CAAW,EAC/D,kBACF,CACF,CAGF,MAAE,CACA,MACF,CACF,EMrBA,IAAAI,GAAmB,qBCDZ,IAAMC,EAAgB,CAC3B,QAAS,UACT,cAAe,gBACf,sBAAuB,wBACvB,sBAAuB,wBACvB,uBAAwB,yBACxB,sBAAuB,uBACzB,EDJA,IAAAC,EAAkB,oBEHlB,IAAAC,GAAkB,oBAClBC,GAAqB,uBACrBC,GAAkB,oBAEZC,GAAeC,GAAsD,CACzE,IAAMC,EAAc,gCAEd,CAACC,EAAaC,CAAU,EAAIF,EAAY,KAAKD,CAAO,GAAK,CAAC,EAEhE,GAAIG,EAAY,CACd,IAAMC,EAAQD,EAAW,KAAK,EACxBE,EAAOL,EAAQ,QAAQE,GAAe,GAAI,EAAE,EAElD,MAAO,CAAE,MAAAE,EAAO,KAAAC,CAAK,EAGvB,MAAO,CAAE,KAAML,CAAQ,CACzB,EAEaM,GAAsBN,GAAoB,CACrD,GAAM,CAAE,MAAAI,EAAO,KAAMG,CAAQ,EAAIR,GAAYC,CAAO,EAEhDQ,EAAc,GAGlB,GAAI,CAIFA,EAHa,GAAAC,QAAS,UAAUF,EAAS,CACvC,IAAK,EACP,CAAC,CAEH,MAAE,CACAC,EAAcD,CAChB,CAYA,SATc,GAAAG,SAAMF,EAAa,CAC/B,QAAS,EACT,OAAQ,EACR,YAAa,QACb,YAAa,OACb,eAAgB,OAChB,MAAOJ,EAAQ,GAAAO,QAAM,KAAKP,CAAK,EAAI,MACrC,CAAC,CAGH,EC5CA,IAAAQ,GAAuB,kBACvBC,GAA6B,8BAEhBC,GAA0BC,MAC9B,WAAOA,EAAU,CACtB,SAAU,IAAI,GAAAC,QAAiB,CAAE,KAAMC,EAAmB,CAAC,CAC7D,CAAC,EHKI,IAAMC,GAAsB,CAAC,CAClC,MAAAC,EACA,MAAAC,EACA,QAAAC,EAAU,uEACZ,IAAc,CACZ,IAAMC,EAASF,EAAM,OAAO,CAAC,CAAC,CAAEG,CAAU,IACxC,OAAO,OAAOC,CAAa,EACxB,OAAQC,GAASA,IAASD,EAAc,OAAO,EAC/C,SAASD,CAAU,CACxB,EAEIG,EAAS,UAEb,OAAQJ,EAAO,OAAQ,CAErB,IAAK,GACHI,EAAS,UACT,MAEF,KAAKN,EAAM,OACTM,EAAS,QACT,MAEF,QACEA,EAAS,UACT,KACJ,CAEA,IAAMC,EAAiBC,GAAqB,CAC1C,IAAMC,EAAWD,GAAA,YAAAA,EAAU,QAAQ,QAAQ,IAAI,EAAG,IAElD,OAAIC,GAAA,MAAAA,EAAU,WAAW,KAChBA,EAAS,MAAM,CAAC,EAErBA,GAAA,MAAAA,EAAU,WAAW,MAChBA,EAAS,MAAM,CAAC,EAElBA,CACT,EAEMC,EAAqB,IAAM,CAC/B,OAAQJ,EAAQ,CACd,IAAK,UACH,QAAQ,IACN,EAAAK,QAAM,WAAW,yBAAyB,EAAAA,QAAM,KAAKZ,CAAK,GAAG,CAC/D,EACA,OACF,IAAK,UACH,QAAQ,IACN,EAAAY,QAAM,aACJ,qCAAqC,EAAAA,QAAM,KAAKZ,CAAK,GACvD,CACF,EACA,OACF,IAAK,QACH,QAAQ,IAAI,EAAAY,QAAM,UAAU,sBAAsB,EAAAA,QAAM,KAAKZ,CAAK,GAAG,CAAC,EACtE,OACF,QACE,MACJ,CACF,EAEMa,EAAa,IAAM,CACvB,IAAMC,EAAS,CAAC,EAEhBA,EAAO,KAAK,EAAAF,QAAM,IAAI,OAAOX,EAAM,OAAS,EAAI,IAAM,aAAa,CAAC,EACpEa,EAAO,KACLb,EACG,IAAI,CAAC,CAACc,EAAYX,CAAU,IACvBA,IAAeC,EAAc,QACxB,EAAAO,QAAM,WAAW,IAAI,MAAMJ,EAAcO,CAAU,GAAG,EAE3DX,IAAeC,EAAc,sBACxB,EAAAO,QAAM,WAAW,IACtB,MAAM,EAAAA,QAAM,aAAa,KACvB,wBACF,IAAIJ,EAAcO,CAAU,GAC9B,EAEEX,IAAeC,EAAc,uBACxB,EAAAO,QAAM,WAAW,IACtB,MAAM,EAAAA,QAAM,aAAa,KACvB,qBACF,IAAIJ,EAAcO,CAAU,GAC9B,EAGK,EAAAH,QAAM,WAAW,IACtB,MAAM,EAAAA,QAAM,aAAa,KAAK,IAAIR,IAAa,IAAII,EACjDO,CACF,GACF,CACD,EACA,KAAK;AAAA,CAAI,CACd,EAEA,QAAQ,IAAID,EAAO,KAAK;AAAA,CAAI,CAAC,CAC/B,EAEMf,EAAsB,IAAM,CAC5BG,GAAWK,IAAW,SACxB,QAAQ,IAAIS,MAAuB,GAAAC,SAAO;AAAA,EAAKf,GAAS,CAAC,CAAC,CAE9D,EAEA,QAAQ,IAAI,EAAE,EACdS,EAAmB,EACnBE,EAAW,EACX,QAAQ,IAAI,EAAE,EACdd,EAAoB,CACtB,EI1HO,IAAMmB,GAAsBC,GAAoB,CACrD,IAAMC,EACJ,gGAEF,OAAOD,EAAQ,QAAQC,EAAO,EAAE,CAClC,EXgBA,IAAAC,GAAkB,oBYjBX,IAAMC,GAAgB,IAAM,CACjC,IAAIC,EAEJ,GAAI,CACFA,EAAcC,EAAe,CAC/B,MAAE,CACAD,EAAc,MAChB,CAIA,OAFmBE,GAAsBF,CAAW,CAGtD,EChBA,IAAAG,GAAqB,uBACrBC,GAAkB,oBAGX,IAAMC,GAA0B,MAAOC,GAA+B,CAEzE,MAAMC,GAA6BD,CAAgB,EAKnD,MAAME,GAAgBF,CAAgB,EAFtC,MAAMG,GAAiCH,CAAgB,CAI3D,EAEaC,GAA+B,MAC1CD,GACG,CACH,IAAMI,EACJ;AAAA,EACG,OAAOJ,EAAiB,IAAKK,GAAQ,MAAMA,GAAK,EAAE,KAAK;AAAA,CAAI,CAAC,EAC5D,OAAO;AAAA,6BAAgC,EAEtC,CAAE,wBAAAN,CAAwB,EAAI,MAAM,GAAAO,QAAS,OAEhD,CACD,CACE,KAAM,UACN,KAAM,0BACN,QAAS,GACT,QAAAF,CACF,CACF,CAAC,EAED,OAAOL,CACT,EAEaI,GAAmC,MAC9CH,GACG,CACH,IAAMO,EAAK,MAAMC,EAAc,EACzBC,EAAYC,EAAWH,EAAG,IAAI,EAAE,QAAQ,KAAK,GAAG,EAChDI,EAAWX,EAAiB,KAAK,GAAG,EACpCY,EAAU,GAAGL,EAAG,QAAQE,KAAaE,IAE3C,QAAQ,IAAI;AAAA,uDAA0D,EACtE,QAAQ,IAAI,GAAAE,QAAM,KAAK,WAAWD,CAAO,CAAC,CAC5C,EbtBA,IAAME,GAAWC,GACRA,EACJ,QAAQ,SAAS,EACjB,YACC,yCAAyC,EAAAC,QAAM,KAC7C,QACF,4CACF,EACC,OAAOC,EAAM,EAGZC,GAEFC,GAMF,CAACC,EAAcC,EAAQ,KACJF,EAAQ,OACtBG,GAAI,CA9CX,IAAAC,EA+CQ,OAAAD,EAAG,MAAM,YAAY,EAAE,SAASD,EAAM,YAAY,CAAC,KACnDE,EAAAD,EAAG,QAAH,YAAAC,EAAU,cAAc,SAASF,EAAM,YAAY,IACvD,EAEgB,QAAQ,CAACG,EAAWC,EAAOC,IAAQ,CAnDvD,IAAAH,EA2DM,MAAO,CACL,IAPAC,GAAA,YAAAA,EAAW,UAASD,EAAAG,EAAID,EAAQ,CAAC,IAAb,YAAAF,EAAgB,SAAUC,EAAU,OAE5CA,EAAU,MAClB,CAAC,IAAI,GAAAG,QAAS,UAAU,EAAAX,QAAM,KAAKQ,EAAU,KAAK,CAAC,CAAC,EACpD,CAAC,EAIL,CACE,KAAM,IAAIA,EAAU,QACpB,MAAOA,GAAA,MAAAA,EAAW,MAAQA,EAAU,MAAQA,CAC9C,CACF,CACF,CAAC,EAGCP,GAAS,MAAOW,GAA2B,CArEjD,IAAAL,EAAAM,EAAAC,EAsEE,GAAAH,QAAS,eAAe,eAAgB,GAAAI,OAA0B,EAElE,IAAMC,EAAoB,MAAMC,EAA0C,EAEpEC,EAA4D,CAAC,EAanE,GAXA,MAAM,QAAQ,IACZF,EAAkB,IAAI,MAAOG,GAAQ,CACnC,IAAMC,EAAY,MAAMC,GAA0BF,EAAI,IAAI,EACpDG,EACJJ,EAAmB,UAAWZ,GAAOA,EAAG,OAASa,EAAI,IAAI,IAAM,GAC7DC,GAAaE,GACfJ,EAAmB,KAAKC,CAAG,CAE/B,CAAC,CACH,EAEID,EAAmB,SAAW,EAAG,CACnC,QAAQ,IAAI,sDAAsD,EAClE,OAGF,QAAQ,IACN,MAAG,GAAAK,SACD,SAAS,EAAAvB,QAAM,WACbkB,EAAmB,MACrB,eAAe,EAAAlB,QAAM,WAAW,KAC9B,QACF,yCACA,CACE,QAAS,EACT,cAAe,SACf,UAAW,GACX,YAAa,aACb,YAAa,OACf,CACF;AAAA,CACF,EAEA,IAAMwB,EAAiB,MAAM,QAAQ,IACnCN,EAAmB,IAAI,MAAOC,GAAQ,CACpC,IAAMM,EAAU,MAAMC,GAAgBP,EAAI,KAAM,EAAI,GACjD,MAAMO,GAAgBP,EAAI,KAAM,EAAK,GAAM,CAC1C,QAAS,CAAE,MAAO,CAAC,CAAE,CACvB,EACF,MAAO,CACL,GAAGA,EACH,OAAAM,CACF,CACF,CAAC,CACH,EAEM,CAAE,gBAAAE,CAAgB,EAAI,MAAM,GAAAhB,QAAS,OAExC,CACD,CACE,KAAM,eACN,SAAU,GACV,KAAM,kBACN,QAAS,wCACT,UAAW,qBACX,OAAQT,GACNsB,EACG,KAAK,CAACI,EAAGC,IAAG,CArIvB,IAAAtB,EAAAM,EAsIa,SAAAN,EAAAqB,EAAE,SAAF,YAAArB,EAAU,QAAS,IAAI,gBAAcM,EAAAgB,EAAE,SAAF,YAAAhB,EAAU,QAAS,EAAE,EAC7D,EACC,IAAKM,GAAK,CAxIrB,IAAAZ,EAAAM,EAwIyB,OACb,QAAON,EAAAY,EAAI,SAAJ,YAAAZ,EAAY,OAAQY,EAAI,KAC/B,MAAOA,EACP,OAAON,EAAAM,EAAI,SAAJ,YAAAN,EAAY,KACrB,EAAE,CACN,CACF,CACF,CAAC,EAEK,CACJ,QAAS,CAAE,MAAAiB,EAAO,UAAAC,CAAU,CAC9B,EAAIJ,EAAgB,OAEhBK,EAEJ,GAAIF,EAAM,SAAW,EAAG,CACtB,QAAQ,IACN,8BAA8B,EAAA9B,QAAM,OAClCO,EAAAoB,EAAgB,SAAhB,YAAApB,EAAwB,OAAQoB,EAAgB,IAClD,GACF,EACA,OAsBF,GApBIG,EAAM,SAAW,EACnBE,EAAoBF,EAAM,CAAC,EAClBA,EAAM,OAAS,IAexBE,GAdiB,MAAM,GAAArB,QAAS,OAE7B,CACD,CACE,KAAM,OACN,SAAU,GACV,KAAM,oBACN,QAAS,0CACT,UAAW,uBACX,QAAST,GACP4B,EAAM,KAAK,CAACF,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,CACrD,EAAE,CAAC,EAAG,EAAE,CACV,CACF,CAAC,GAC4B,mBAG3B,CAACG,EAAmB,CACtB,QAAQ,IACN,iCAAiC,EAAAhC,QAAM,OACrCa,EAAAc,EAAgB,SAAhB,YAAAd,EAAwB,OAAQc,EAAgB,IAClD,GACF,EACA,OAIF,IAAMM,EAAoBC,GAAc,EAElCC,EAAe,MAAM,QAAQ,IACjCH,EAAkB,MAAM,IAAI,MAAOI,GAAS,CAhMhD,IAAA7B,EAiMM,GAAI,CACF,IAAM8B,EAAUD,EAAK,IACjB,GAAAE,QAAK,KAAKX,EAAgB,KAAMS,EAAK,GAAG,EACxC,OACEG,EAAWH,EAAK,KAClB,GAAAE,QAAK,KAAK,QAAQ,IAAI,EAAGL,EAAmBG,EAAK,IAAI,EACrD,OAEJ,GAAI,CAACC,EACH,eAAQ,IAAI,6BAA8BD,CAAI,EACvC,CAAC,GAAII,EAAc,qBAAqB,EAMjD,GAAI,CAACD,EACH,eAAQ,IAAI,qCAAsCH,CAAI,EAC/C,CAAC,GAAII,EAAc,qBAAqB,EAQjD,GAAI,CAFW,QAAM,cAAWH,CAAO,EAGrC,MAAO,CAACE,EAAUC,EAAc,sBAAsB,EAMxD,IAAMC,EAAa,QAAM,YAASJ,EAAS,OAAO,EAGlD,GAFoB,QAAM,cAAWE,CAAQ,EAG3C,MAAO,CAACA,EAAUC,EAAc,qBAAqB,EAMvD,QAAM,cAAWD,CAAQ,EAEzB,IAAMG,EAAgBC,GAAmBF,CAAU,EAE7CG,IACJrC,EAAA6B,EAAK,YAAL,YAAA7B,EAAA,KAAA6B,EAAiBM,KAAkBA,EAE/BG,IACJd,GAAA,YAAAA,EAAYa,EAAwBP,EAASE,KAC7CK,EAEIE,GAAmBC,GAAeF,EAAkB,EAEpDG,GAAY,MAAMC,GAAeH,EAAgB,EAEvD,eAAM,aAAUP,EAAUS,EAAS,EAE5B,CAACT,EAAUC,EAAc,OAAO,CAIzC,MAAE,CACA,MAAO,CAAC,GAAIA,EAAc,aAAa,CAIzC,CACF,CAAC,CACH,EAEIL,EAAa,OAAS,IACxBe,GAAoB,CAClB,MAAOf,EACP,MAAOH,EAAkB,MACzB,QAASA,EAAkB,OAC7B,CAAC,GAEGlB,EAAAkB,GAAA,YAAAA,EAAmB,mBAAnB,MAAAlB,EAAqC,QACvC,MAAMqC,GAAwBnB,EAAkB,gBAAgB,EAGtE,EAEOoB,GAAQtD,GcvRf,IAAAuD,GAAqB,uBACrBC,GAAmB,2BACnBC,GAAqC,qBCFrC,IAAAC,EAAqB,uBACrBC,GAAuB,0BACvBC,GAAkB,oBCFX,IAAMC,GAAkBC,GAA6B,CAC1D,IAAMC,EAAaD,EAAI,OAAO,CAACE,EAAMC,IAAUH,EAAI,QAAQE,CAAI,IAAMC,CAAK,EACpEC,EAAS,IAAI,IAAIH,CAAU,EACjC,OAAO,MAAM,KAAKG,CAAM,CAC1B,EDqBO,IAAMC,GAAgC,MAC3CC,GACG,CACH,IAAMC,EAAUC,GAAcF,CAAQ,EACtC,GAAI,CAACC,EAAS,CACZ,QAAQ,IAAI,iDAA0C,EACtD,OAGF,IAAME,EAAaC,GAAiBH,CAAO,EAErCI,EAAU,MAAM,EAAAC,QAAS,OAE5B,CACD,CACE,KAAM,WACN,KAAM,WACN,QAAS,4BACT,SAAUH,EAAW,SACrB,QAASA,EAAW,QACpB,SAAUI,EACZ,CACF,CAAC,EAED,OAAOF,EAAQ,SAAS,OAAS,EAAIA,EAAQ,SAAW,IAC1D,EAEaE,GAAkBC,GAAoB,CAKjD,IAAMC,EAJcD,EAAM,IAAKE,GACtBC,GAA2BD,CAAI,CACvC,EAEyB,IAAKA,GAASA,EAAK,IAAI,EAC3CE,EAAaC,GAAeJ,CAAK,EAEvC,OAAIG,EAAW,OAAS,EACf;AAAA,eAAsFA,EAAW,KACtG,IACF,IAGK,EACT,EAEaV,GACXF,GACmB,CACnB,GAAIA,EAAS,SAAW,EACtB,OAAO,KAGT,IAAMc,EAA+B,CACnC,MAAO,CAAC,EACR,MAAO,CAAC,EACR,MAAO,CAAC,CACV,EAEA,OAAAd,EAAS,QAASU,GAAS,CACzB,IAAMK,EAAUL,EAAK,QAEfM,KAAa,GAAAC,SAAWF,EAASL,EAAK,MAAM,EAC5CQ,KAAa,GAAAD,SAAWF,EAASL,EAAK,MAAM,EAElD,GAAIM,IAAeE,GACbA,EAAY,CACdJ,EAAoBI,CAAU,EAAE,KAAK,CACnC,KAAMR,EAAK,KACX,KAAMK,EACN,GAAIL,EAAK,MACX,CAAC,EACD,OAIAM,GACFF,EAAoBE,CAAU,EAAE,KAAK,CACnC,KAAMN,EAAK,KACX,KAAMK,EACN,GAAIL,EAAK,MACX,CAAC,EAGCQ,GACFJ,EAAoBI,CAAU,EAAE,KAAK,CACnC,KAAMR,EAAK,KACX,KAAMK,EACN,GAAIL,EAAK,MACX,CAAC,CAEL,CAAC,EAEMI,CACT,EAEMV,GAAoBH,GAAqB,CAC7C,IAAIkB,EAAgB,EAChBC,EAAgB,EAEpB,CAACnB,EAAQ,MAAOA,EAAQ,MAAOA,EAAQ,KAAK,EAAE,QAASoB,GAAU,CAC/DA,EAAM,QAASX,GAAS,CAClBA,EAAK,KAAK,OAASS,IACrBA,EAAgBT,EAAK,KAAK,QAGxBA,EAAK,KAAK,OAASU,IACrBA,EAAgBV,EAAK,KAAK,OAE9B,CAAC,CACH,CAAC,EAEDS,GAAiB,EAEjB,IAAMG,EAMA,CAAC,EAEDC,EAAoB,UAAU,OAAOJ,CAAa,EAClDK,EAAoB,OAAO,OAAOJ,CAAa,EAE/CK,EAAS;AAAA,KAAQF,KAAqBC,IADvB,KACwD,SAC3EJ,CACF,IACAE,EAAQ,KAAK,IAAI,EAAAhB,QAAS,UAAUmB,CAAM,CAAC,EAEvCxB,EAAQ,MAAM,OAAS,IACzBqB,EAAQ,KACN,IAAI,EAAAhB,QAAS,UAAU,GAAAoB,QAAM,MAAM,KAAK,KAAK;AAAA,cAAiB,CAAC,CACjE,EACAzB,EAAQ,MAAM,QAASS,GAAS,CAC9BY,EAAQ,KAAK,CACX,KAAM,GAAGZ,EAAK,KAAK,OAAOS,CAAa,KAAKT,EAAK,KAAK,SACpDU,CACF,QAAQV,EAAK,KACb,MAAO,GAAGA,EAAK,QAAQA,EAAK,IAC9B,CAAC,CACH,CAAC,GAGCT,EAAQ,MAAM,OAAS,IACzBqB,EAAQ,KACN,IAAI,EAAAhB,QAAS,UAAU,GAAAoB,QAAM,MAAM,KAAK,KAAK;AAAA,cAAiB,CAAC,CACjE,EACAzB,EAAQ,MAAM,QAASS,GAAS,CAC9BY,EAAQ,KAAK,CACX,KAAM,GAAGZ,EAAK,KAAK,OAAOS,CAAa,KAAKT,EAAK,KAAK,SACpDU,CACF,QAAQV,EAAK,KACb,MAAO,GAAGA,EAAK,QAAQA,EAAK,IAC9B,CAAC,CACH,CAAC,GAGCT,EAAQ,MAAM,OAAS,IACzBqB,EAAQ,KACN,IAAI,EAAAhB,QAAS,UAAU,GAAAoB,QAAM,MAAM,KAAK,KAAK;AAAA,cAAiB,CAAC,CACjE,EACAzB,EAAQ,MAAM,QAASS,GAAS,CAC9BY,EAAQ,KAAK,CACX,KAAM,GAAGZ,EAAK,KAAK,OAAOS,CAAa,KAAKT,EAAK,KAAK,SACpDU,CACF,QAAQV,EAAK,KACb,MAAO,GAAGA,EAAK,QAAQA,EAAK,IAC9B,CAAC,CACH,CAAC,GAGH,IAAMiB,EAAWL,EAAQ,OAAS,EAElC,MAAO,CAAE,QAAAA,EAAS,SAAAK,CAAS,CAC7B,EDhLA,IAAMC,GAAQC,GACLA,EACJ,QAAQ,QAAQ,EAChB,YACC,kIACF,EACC,UACC,IAAI,UAAO,kBAAmB,8BAA8B,EACzD,QAAQ,CAAC,OAAQ,QAAQ,CAAC,EAC1B,QACC,SACA,wDACF,CACJ,EACC,OACC,YACA,gLACA,EACF,EACC,OACC,gBACA,sJACA,EACF,EACC,OAAOC,EAAM,EAGZA,GAAS,MAAOC,GAA0B,CAC9C,GAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,IAAAC,CAAI,EAAIH,EAEvBI,EAAW,MAAMC,EAAQC,GAAkB,yBAAyB,EAC1E,GAAI,EAACF,GAAA,MAAAA,EAAU,QAAQ,CACrB,QAAQ,IAAI,gDAAyC,EACrD,OAGF,IAAIG,EAAgD,KAEpD,GAAIJ,EACFK,GAAOP,EAAKG,CAAQ,MACf,CACL,GAAM,CAAE,MAAAK,EAAO,MAAAC,CAAM,EAAIC,GAAgBP,CAAQ,GAAK,GAEtD,QAAQ,OAAI,GAAAQ,SAAO,oBAAqBF,CAAK,CAAC,EAC9C,QAAQ,IAAID,CAAK,EAEjB,GAAM,CAAE,YAAAI,CAAY,EAAI,MAAM,GAAAC,QAAS,OAAiC,CACtE,CACE,KAAM,OACN,KAAM,cACN,QACE,0EACF,QAAS,CACP,CACE,KAAM,oBACN,MAAO,EACT,EACA,CACE,KAAM,2BACN,MAAO,EACT,CACF,CACF,CACF,CAAC,EAEGD,EACFN,EAAmBC,GAAOP,EAAKG,CAAQ,EAEvCG,EAAmB,MAAMQ,GAA8BX,CAAQ,EAInE,GAAKG,EAEL,IAAIL,EAAQ,CACVc,GAAoBT,CAAgB,EACpC,OAGFU,GAAUV,CAAgB,EAC5B,EAEMC,GAAS,CAACP,EAAUG,IACpBH,IAAQ,UAC2BG,EAAS,MAC3Cc,GAAQA,EAAI,UAAYA,EAAI,MAC/B,GAEE,QAAQ,IACN,wEACF,EACO,MAIiBd,EAAS,IAAKc,GAAQ,CAChD,IAAMC,EAAUlB,IAAQ,SAAaiB,EAAI,OAASjB,EAClD,MAAO,GAAGiB,EAAI,QAAQC,GACxB,CAAC,EAKGH,GAAsB,MAAOZ,GAAuB,CACxD,IAAMgB,EAAK,MAAMC,EAAc,EACzBC,EAAiBC,EAAWH,EAAG,IAAI,EAAE,QAC3C,QAAQ,IAAI,GAAGA,EAAG,QAAQE,EAAe,KAAK,GAAG,KAAKlB,EAAS,KAAK,GAAG,GAAG,CAC5E,EAEMa,GAAab,GAAuB,CACxC,QAAQ,IAAI,+BAA+B,EAC3C,QAAQ,IAAIA,EAAS,IAAKc,GAAQ,MAAMA,GAAK,EAAE,KAAK;AAAA,CAAI,CAAC,EACzDM,GAAgBpB,CAAQ,CAC1B,EAEOqB,GAAQ5B,GGvIf,IAAA6B,GAAoB,sBACpBC,GAAgB,kBAEVC,GAAUC,GACPA,EACJ,QAAQ,QAAQ,EAChB,YAAY,iDAAiD,EAC7D,OAAOC,EAAM,EAGZA,GAAS,SAAY,CACzB,IAAMC,KAAU,GAAAC,SAAI,gCAAgC,EAAE,MAAM,EACtDC,EAAO,MAAM,GAAAC,QAAQ,IACzB,CACE,OAAQ,CAAC,KAAM,KAAK,EACpB,SAAU,CAAC,OAAQ,OAAQ,KAAK,EAChC,SAAU,CAAC,SAAU,UAAW,QAAQ,CAC1C,EACA,CAAE,aAAc,GAAM,SAAU,EAAK,CACvC,EAGMC,GADY,MAAMC,EAA2B,GAAM,CAAC,GAEvD,IAAKC,GACG,MAAMA,EAAI,SAASA,EAAI,SAC/B,EACA,KAAK;AAAA,CAAI,EAEZN,EAAQ,KAAK,EACb,QAAQ,IAAIE,CAAI,EAChB,QAAQ,IAAI,qBAAqB,EACjC,QAAQ,IAAIE,CAAgB,CAC9B,EAEOG,GAAQV,GCpCf,IAAAW,GAAkB,oBAClBC,GAAiD,uBCDjD,IAAAC,GAAqB,uBCCrB,IAAAC,GAAkB,oBASLC,GAAiB,MAAOC,GAAiC,CACpE,GAAM,CACJ,qBAAAC,EACA,gBAAAC,EACA,iBAAAC,EACA,oBAAAC,CACF,EAAIJ,EACJ,GAAIK,GAAuBJ,CAAoB,EAAG,OAElD,MAAMK,GAAuBH,CAAgB,EAE7C,QAAQ,IAAI,wBAAiBD,MAAoB,EAEjD,IAAMK,EAAwB,gBAAgB,kBAAkB,EAC1D,CAAE,OAAAC,CAAO,EAAI,GAAAC,QAAM,KAAKF,EAAuB,CACnD,KACA,6BACA,eACA,eAAe,8CAA8CH,OAC7D,0BACA,gCACA,yBACA,yBACA,uBACF,CAAC,EAEGI,GACF,QAAQ,IAAIA,CAAM,EAGpB,QAAQ,IAAI,aAAMN,oBAAkC,CACtD,ECzCA,IAAAQ,GAAkB,oBAULC,GAAkBC,GAA8B,CAC3D,GAAM,CAAE,GAAAC,EAAI,MAAAC,EAAO,YAAAC,EAAa,SAAAC,CAAS,EAAIJ,EAE7C,OAAII,EACK,CACL,MAAOH,EACP,KAAM,GAAG,GAAAI,QAAM,KAAKH,CAAK,IACzB,SAAU,GAAAG,QAAM,UAAUD,CAAQ,CACpC,EAGK,CACL,MAAOH,EACP,KAAM,GAAG,GAAAI,QAAM,WAAWH,CAAK,OAAOC,GACxC,CACF,ECnBA,IAAMG,GAAK,aACLC,GAAO,aACPC,GAAuB,CAAC,mBAAoB,MAAM,EAClDC,GAAmB,CAAC,OAAQ,iBAAiB,EAC7CC,GAAsB,aAEfC,GAAoC,CAC/C,GAAAL,GACA,UAAYM,GAA8B,CACxC,IAAMC,EAAQ,aACRC,EAAc,+BAChBC,EAEJ,MAAI,iBAAwC,EAAE,SAASH,CAAW,IAChEG,EACE,6KAGGC,GAAe,CACpB,GAAAV,GACA,MAAAO,EACA,YAAAC,EACA,SAAAC,CACF,CAAC,CACH,EACA,eAAgB,SACP,MAAME,GAAe,CAC1B,qBAAAT,GACA,gBAAiBD,GACjB,iBAAAE,GACA,oBAAAC,EACF,CAAC,CAEL,ECjCA,IAAMQ,GAAK,eACLC,GAAO,eACPC,GAAuB,CAAC,mBAAoB,MAAM,EAClDC,GAAmB,CAAC,mBAAoB,4BAA4B,EACpEC,GAAsB,eAEfC,GAAsC,CACjD,GAAAL,GACA,UAAYM,GAA8B,CACxC,IAAMC,EAAQ,eACRC,EAAc,kCAChBC,EAEJ,OAAIH,eACFG,EAAW,6FAGTH,cACFG,EAAW,8EAGNC,GAAe,CACpB,GAAAV,GACA,MAAAO,EACA,YAAAC,EACA,SAAAC,CACF,CAAC,CACH,EACA,eAAgB,SACP,MAAME,GAAe,CAC1B,qBAAAT,GACA,gBAAiBD,GACjB,iBAAAE,GACA,oBAAAC,EACF,CAAC,CAEL,EC1BO,IAAMQ,EAAuC,CAClDC,GACAC,EACF,ELdO,IAAMC,GAA0B,IAAM,CAC3C,IAAMC,EAAcC,EAAe,EAE7BC,EAAqBC,EAAsB,IAAKC,GACpDA,EAAY,UAAUJ,CAAW,CACnC,EAEA,OAAIE,EAAmB,MAAOG,GAAWA,EAAO,QAAQ,EAC/C,CACL,CACE,MAAO,OACP,KAAM,iDACR,EACA,GAAGH,CACL,EAEKA,CACT,EAEaI,GAAuB,SAC3B,MAAM,GAAAC,QAAS,OAA8B,CAClD,CACE,KAAM,OACN,KAAM,KACN,QAAS,wCACT,QAASR,GAAwB,EACjC,QAAS,MACX,CACF,CAAC,EMjCH,IAAAS,GAAkB,oBAClBC,GAAqB,uBCCrB,IAAAC,EAAoD,oBACpDC,GAAqB,gBCcd,IAAMC,EAAiC,CAC5C,CACE,GAAI,OACJ,MAAO,gBACP,YAAa,+CACb,SAAU,oBACV,iBAAkB,iCACpB,EACA,CACE,GAAI,OACJ,MAAO,gBACP,YAAa,+CACb,SAAU,oBACV,iBAAkB,iCACpB,EACA,CACE,GAAI,OACJ,MAAO,gBACP,YAAa,4BACb,SAAU,oBACV,iBAAkB,iCACpB,EACA,CACE,GAAI,iBACJ,MAAO,iBACP,YAAa,kCACb,SAAU,8BACV,iBAAkB,2CACpB,EACA,CACE,GAAI,eACJ,MAAO,wBACP,YAAa,qCACb,SAAU,4BACV,iBAAkB,yCACpB,EACA,CACE,GAAI,OACJ,MAAO,gBACP,YAAa,yCACb,SAAU,oBACV,iBAAkB,iCACpB,EACA,CACE,GAAI,YACJ,MAAO,qBACP,YAAa,wCACb,SAAU,yBACV,iBAAkB,sCACpB,CACF,EDzDA,IAAMC,GAAmB,GAAG,kCAEfC,GAAkB,CAC7BC,EACAC,IACG,CACHD,EAAY,QAASE,GAAe,CAClC,GAAM,CAAE,SAAAC,EAAU,iBAAAC,CAAiB,EAAIC,GAAmBH,CAAU,EAC9DI,EAAaL,GAAgBM,GAAe,EAC5CC,KAAW,SAAKF,EAAYH,CAAQ,EACpCM,KAAW,SAAK,QAAQ,IAAI,EAAGH,EAAYH,CAAQ,EAEzD,MAAI,kBAAeM,CAAQ,EAAG,CAC5B,QAAQ,MAAM,oBAAeD,mBAA0B,EACvD,UAIF,aAAUF,EAAY,CAAE,UAAW,EAAK,CAAC,KAGzC,YAAS,GAAGR,MAAoBM,IAAoBK,CAAQ,EAE5D,QAAQ,IAAI,uBAAgBD,0BAAiC,CAC/D,CAAC,CACH,EAEaH,GAAsBH,GAAqC,CACtE,IAAMQ,EAAWC,EAAmB,KAAMC,GAAMA,EAAE,KAAOV,CAAU,EAEnE,GAAI,CAACQ,EACH,MAAM,IAAI,MAAM,qBAAqBR,GAAY,EAGnD,OAAOQ,CACT,EAEaH,GAAiB,IAAM,CAClC,IAAMM,EAAcC,EAAe,EAC7B,CAAE,KAAAC,CAAK,EAAIC,GAAgBH,CAAW,EAC5C,OAAOE,CACT,ED7CO,IAAME,GAAuB,IAC3BC,EAAmB,IAAKC,GAAa,CAC1C,GAAM,CAAE,GAAAC,EAAI,MAAAC,EAAO,YAAAC,CAAY,EAAIH,EAEnC,MAAO,CACL,MAAOC,EACP,KAAM,GAAG,GAAAG,QAAM,WAAWF,CAAK,OAAOC,GACxC,CACF,CAAC,EAGUE,GAAoB,SACxB,MAAM,GAAAC,QAAS,OAGnB,CACD,CACE,KAAM,WACN,KAAM,YACN,QAAS,sCACT,QAASR,GAAqB,CAChC,EACA,CACE,KAAM,QACN,KAAM,gBACN,QAAS,+CACT,QAASS,GAAe,CAC1B,CACF,CAAC,EP1BH,IAAMC,GAAc,CAClBC,EACAC,IAEOA,EAAQ,IAAKC,IACX,CACL,GAAGA,EACH,KAAM,MAAMA,EAAO,OACnB,MAAO,CACL,MAAAF,EACA,UAAWE,EAAO,KACpB,CACF,EACD,EAYUC,GAAmB,SACvB,MAAM,GAAAC,QAAS,OAAyB,CAC7C,CACE,KAAM,OACN,KAAM,YACN,QAAS,2BACT,QAAS,CACP,IAAI,GAAAA,QAAS,UAAU,GAAAC,QAAM,KAAK,UAAU,CAAC,EAC7C,GAAGN,GAAY,WAAYO,GAAqB,CAAC,EACjD,IAAI,GAAAF,QAAS,UAAU,GAAAC,QAAM,KAAK,aAAa,CAAC,EAChD,GAAGN,GAAY,cAAeQ,GAAwB,CAAC,EACvD,IAAI,GAAAH,QAAS,UAAU,GAAAC,QAAM,KAAK,UAAU,CAAC,EAC7C,CACE,KAAM,GAAAA,QAAM,WAAW,sBAAsB,EAC7C,MAAO,CACL,MAAO,WACP,UAAW,UACb,CACF,CACF,EACA,SAAU,EACZ,CACF,CAAC,EUvDH,IAAAG,GAAkC,qBAIlC,IAAMC,GAAuB,MAAOC,GAAkB,CACpD,IAAIC,EAAgBD,EAEfC,IAGHA,GAFe,MAAMC,GAAqB,GAEnB,IAGzB,IAAMC,EAAcC,EAAsB,KACvCD,GAAgBA,EAAY,KAAOF,CACtC,EAEIE,GACF,MAAMA,EAAY,eAAe,CAErC,EAEaE,GAAqB,IAAI,WAAQ,aAAa,EACxD,YACC,IAAI,YAAS,SAAU,yBAAyB,EAAE,QAChDD,EAAsB,IAAKD,GAAgBA,EAAY,EAAE,CAC3D,CACF,EACC,OAAOJ,EAAoB,EC5B9B,IAAAO,GAAkC,qBAM3B,IAAMC,GAAuB,MAClCC,EACAC,IACG,CACH,GAAI,CAACD,EAAU,OAAQ,CACrB,GAAM,CAAE,UAAAA,EAAW,cAAAE,CAAc,EAAI,MAAMC,GAAkB,EAE7D,OAAOC,GAAgBJ,EAAWE,CAAa,EAGjDE,GAAgBJ,EAAWC,EAAQ,IAAI,CACzC,EAEaI,GAAkB,IAAI,WAAQ,UAAU,EAClD,YACC,IAAI,YAAS,iBAAkB,oBAAoB,EAChD,QAAQC,EAAmB,IAAKC,GAAaA,EAAS,EAAE,CAAC,EACzD,QAAQ,CAAC,CAAC,CACf,EACC,OAAO,oBAAqB,4BAA4B,EACxD,OAAOR,EAAoB,EC1B9B,IAAAS,GAAkC,qBAGlC,IAAMC,GAAuB,MAC3BC,EACAC,EACAC,IACG,CACHC,EACE,CACE,QAASF,GAAA,YAAAA,EAAS,QAClB,KAAMC,EAAQ,gBAAgB,EAAE,IAClC,EACAF,CACF,CACF,EAEaI,GAAkB,IAAI,WAAQ,UAAU,EAClD,YAAY,IAAI,YAAS,iBAAkB,wBAAwB,CAAC,EACpE,OAAO,oBAAqB,kCAAkC,EAC9D,OACC,0BACA,4EACA,uBACF,EACC,OAAOL,EAAoB,ECf9B,IAAMM,GAAQC,GACLA,EACJ,QAAQ,KAAK,EACb,YAAY,+CAA+C,EAC3D,qBAAqB,EAAK,EAC1B,OAAOC,EAAgB,EACvB,WAAWC,EAAe,EAC1B,WAAWC,EAAe,EAC1B,WAAWC,EAAkB,EAG5BH,GAAmB,SAAY,CACnC,GAAM,CAAE,UAAAI,CAAU,EAAI,MAAMC,GAAiB,EAM7C,GAJID,EAAU,QAAU,YACtBE,GAAgB,CAACF,EAAU,SAAS,CAAC,EAGnCA,EAAU,QAAU,cAAe,CACrC,IAAMG,EAAcC,EAAsB,KACvCD,GAAgBA,EAAY,KAAOH,EAAU,SAChD,EAEA,MAAMG,GAAA,YAAAA,EAAa,kBAGjBH,EAAU,QAAU,YACtB,MAAMK,EAAgB,CAAC,EAAG,CAAC,CAAC,CAEhC,EAEOC,GAAQZ,GCzCf,IAAAa,GAAoB,sBACpBC,GAAe,iBAEFC,GAAY,IAAM,CAC7B,IAAMC,EAAa,GAAAC,QAAG,KAAK,EAQ3B,MAN6D,CAC3D,OAAQ,QACR,MAAO,QACP,WAAY,SACd,EAEaD,CAAU,CACzB,EAEaE,GAAQ,SAAY,CAE/B,GAAM,CAACC,EAAGC,CAAM,EACb,MAAM,GAAAC,QAAQ,QAAQ,UAAU,EAEnC,MAAO,CACL,KAAMN,GAAU,EAChB,QAASK,CACX,CACF,EClBA,IAAAE,GAAkB,yBAeLC,GAAmB,SAAoC,CAClE,IAAMC,EAAK,MAAMC,GAAM,EAavB,MAXa,CACX,QAASC,EAAI,SACb,YAAa,QAAQ,QACrB,GAAIF,EAAG,KACP,UAAWA,EAAG,QACd,QAAS,QAAQ,KAAK,CAAC,EACvB,SAAW,MAAMG,EAA2B,GAAM,CAAC,EACnD,iBAAkBC,EAAe,EACjC,UAAWC,GAAmB,CAChC,CAGF,EAEaC,GAAgB,SAAY,CACvC,GAAIJ,EAAI,sBAAwB,OAEhC,GAAI,CACF,IAAMK,EAAO,MAAMR,GAAiB,EAEpC,QAAM,GAAAS,SAAM,mCAAoC,CAC9C,OAAQ,OACR,KAAM,KAAK,UAAUD,CAAI,EACzB,QAAS,CAAE,eAAgB,kBAAmB,CAChD,CAAC,CACH,MAAE,CAAe,CACnB,ECjDA,IAAAE,GAAmB,0BACnBC,GAAkB,oBAKlB,IAAMC,GACJ,0FAEIC,GAAyB,kBAEzBC,GAAsBC,GACTA,EAAK,MAAMF,EAAsB,EAG/C,MAAM,CAAC,EACP,IAAKG,GAAY,GAAGH,KAAyBG,GAAS,EAGrDC,GAAqBC,GAA8B,CACvD,IAAMC,EAAQD,EAAI,QAAQL,GAAwB,KAAK,EACjDO,KAAS,GAAAC,SAAOF,CAAK,EACrBG,GACJF,EAAO,QAAQ,SAAW,EACtBD,EAAM,QAAQ,OAAQ,EAAE,EACxBC,EAAO,QAAQ,QAAQ,OAAQ,EAAE,GACrC,KAAK,EAEP,MAAO,CACL,GAAGA,EAAO,KACV,QAAAE,CACF,CACF,EAEaC,GAAmB,SAAY,CAC1C,GAAI,CACF,IAAMC,EAAW,MAAM,MAAMZ,EAAgB,EAC1C,KAAMa,GAAQA,EAAI,KAAK,CAAC,EACxB,MAAM,IAAM,EAAE,EAMjB,OAJsBX,GAAmBU,CAAQ,EAAE,IAAKR,GACtDC,GAAkBD,CAAO,CAC3B,CAGF,MAAE,CACA,MAAO,CAAC,CACV,CACF,EAEaU,GAAqB,SAAY,CAG5C,IAAMC,GAFgB,MAAMJ,GAAiB,GAEF,OACxCK,GAAM,CAAQA,EAAE,MACnB,EAEA,GAAID,EAAqB,SAAW,EAClC,OAGF,IAAME,EAAsBF,EACzB,IAAKC,GAAM,CACV,IAAME,EAAOH,EAAqB,OAAS,EAAI,UAAO,GAChDL,EAAUS,GAAuBH,EAAE,OAAO,EAChD,MAAO,GAAGE,IAAOR,GACnB,CAAC,EACA,KAAK,EAAE,EACP,KAAK,EAER,QAAQ,OACN,GAAAU,SAAMH,EAAqB,CACzB,QAAS,EACT,OAAQ,EACR,YAAa,QACb,YAAa,aACb,eAAgB,MAClB,CAAC,CACH,CACF,EhE7DA,IAAMI,GAAqB,QAErBC,GAAY,IAAM,CACtB,IAAMC,EAAU,IAAI,WAEpBA,EACG,QACC,kBAAkBF,KAClB,gBACA,6BACF,EACC,YACC,GAAAG,QAAO,SAAS,SAAU,CACxB,KAAM,aACN,iBAAkB,OAClB,eAAgB,OAChB,gBAAiB,EACnB,CAAC,CACH,EACC,MAAM,qBAAqB,EAC3B,WAAW,aAAc,2BAA2B,EAGvDC,GAAQF,CAAO,EACfG,GAAeH,CAAO,EACtBI,GAAOJ,CAAO,EACdK,GAAIL,CAAO,EACXM,GAAMN,CAAO,EACbO,GAAMP,CAAO,EACbQ,GAAIR,CAAO,EACXS,GAAaT,CAAO,EACpBU,GAAOV,CAAO,EACdW,GAAMX,CAAO,EACbY,GAASZ,CAAO,EAChBa,GAAIb,CAAO,EAEXA,EAAQ,KAAK,YAAa,MAAOc,GAAgB,CAC3CA,EAAY,KAAK,SAAS,KAAK,GACjC,MAAMC,GAAmB,CAE7B,CAAC,EAEDf,EAAQ,KAAK,aAAec,GAAgB,CAC1C,IAAME,EAAUF,EAAY,KAAK,CAAC,EAE9B,CAAC,KAAK,EAAE,SAASE,CAAO,GAE5BC,GAAc,CAChB,CAAC,EAEDjB,EAAQ,MAAM,QAAQ,IAAI,EAErB,QAAQ,KAAK,MAAM,CAAC,EAAE,QACzBA,EAAQ,WAAW,CAEvB,EAEAD,GAAU","names":["import_commander","import_figlet","import_chalk","import_center_align","import_ora","spinner","fn","message","ora","result","spinner_default","import_execa","import_fs_extra","import_globby","import_path","import_preferred_pm","getPackageJson","getDependencies","packageJson","getDevDependencies","packageJson","getPackageJson","getAllDependencies","getDependencies","getScripts","getInstalledRefinePackages","_a","execution","execa","dependencies","refineDependencies","dependency","normalize","version","getInstalledRefinePackagesFromNodeModules","REFINE_PACKAGES","packagesFromGlobbySearch","globby","packageDirsFromModules","pkg","pkgPath","path","refinePackages","packageDir","isPackageHaveRefineConfig","packagePath","pmCommands","getPreferedPM","pm","spinner_default","preferredPM","installPackages","packages","installCommand","message","error","exitCode","installPackagesSync","parsePackageNameAndVersion","str","versionStartIndex","getRefineProjectId","isDevtoolsInstalled","getNotInstalledPackages","installMissingPackages","missingPackages","hasIncomatiblePackages","allDependencies","incompatiblePackages","import_cli_table3","import_chalk","uppercaseFirstChar","str","removeANSIColors","columns","orderedColumns","getVersionTable","packages","_a","tableHead","terminalWidth","nameColumnWidth","row","versionColumnWidth","bordersWidth","changelogColumnWidth","columnWidths","table","Table","column","ellipsisFromCenter","text","length","fitLength","start","end","columnValue","installedVersion","parseVersions","latestVersion","colors","getColorsByVersionDiffrence","textMajor","chalk","textMinor","textPatch","tableString","tableWidth","removeANSIColors","versions","nextVersion","printUpdateWarningTable","params","data","tableHead","table","width","getVersionTable","center","chalk","getInstallCommand","fallbackCommand","dependencies","getDependencies","scriptKeys","getScripts","hasCli","hasScript","pm","getPreferedPM","import_execa","import_semver_diff","load","program","action","packages","spinner_default","isRefineUptoDate","printUpdateWarningTable","getOutdatedRefinePackages","getOutdatedPackageList","list","changelog","packageName","dependency","item","semverDiff","pm","stdout","timedOut","execa","pmCommands","check_updates_default","ProjectTypes","UIFrameworks","PackageManagerTypes","getProjectType","platform","dependencies","getDependencies","devDependencies","getDevDependencies","getUIFramework","getResourcePath","projectType","getProviderPath","getFilesPathByProject","import_handlebars","import_fs_extra","compile","filePath","params","content","Handlebars","elem","list","options","string","compileDir","dirPath","file","templateFilePath","compiledFilePath","import_execa","import_fs_extra","import_inquirer","import_path","import_pluralize","import_temp","defaultActions","createResources","params","resources","_a","destinationPath","getResourcePath","getProjectType","actions","name","selectedActions","inquirer","value","resourceName","customActions","resourceFolderName","resourcePath","resource","uppercaseFirstChar","uiFramework","getUIFramework","sourceDir","tempDir","generateTempDir","compileParams","compileDir","action","destinationResourcePath","moveSyncOptions","temp","jscodeshiftExecutable","stderr","execa","load","program","projectType","getProjectType","path","getResourcePath","action","params","options","createResources","create_resource_default","dotenv","envSearchMap","getNodeEnv","nodeEnv","env","key","value","ENV","import_express","import_http_proxy_middleware","load","program","action","ENV","port","target","domain","rewriteUrl","app","express","onProxyRes","proxyRes","_a","cookie","i","msg","proxy_default","import_commander","import_conf","import_chalk","stringToBase64","str","STORE_NAME","store","Conf","updateNotifier","isUpdateNotifierDisabled","shouldUpdate","shouldUpdatePackagesCache","updatePackagesCache","showWarning","packages","printUpdateWarningTable","isKeyValid","validateKey","isExpired","isPackagesCacheExpired","isRefineUptoDate","generateKeyFromPackages","lastUpdated","diff","cacheTTL","ENV","key","newKey","getInstalledRefinePackages","chalk","currentVersionsWithName","p","stringToBase64","projectScripts","args","type","binName","import_execa","runScript","binPath","args","_a","_b","supportedProjectTypes","ProjectTypes","v","execution","execa","getRunnerDescription","runner","projectType","getProjectType","command","projectScripts","getPlatformOptionDescription","ProjectTypes","start","program","getRunnerDescription","getPlatformOptionDescription","ProjectTypes","type","action","args","platform","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","runScript","start_default","import_commander","import_devtools_server","import_execa","import_prettier","prettierFormat","code","prettierConfig","addDevtoolsComponent","jscodeshiftExecutable","stderr","execa","hasDefaultScript","scripts","getPackageJson","import_boxen","import_cardinal","import_chalk","import_commander","import_dedent","import_semver","commands","defaultCommand","minRefineCoreVersionForDevtools","load","program","action","command","devtoolsRunner","devtoolsInstaller","_a","corePackage","getRefineCorePackage","spinner_default","isDevtoolsInstalled","validateCorePackageIsNotDeprecated","packagesToInstall","semver","installPackagesSync","addDevtoolsComponent","updatedCorePackage","chalk","dev","hasDefaultScript","scriptDev","getPackageJson","boxen","cardinal","dedent","exitOnError","pm","getPreferedPM","e","installedRefinePackages","getInstalledRefinePackagesFromNodeModules","pkg","devtools_default","dev","program","getRunnerDescription","getPlatformOptionDescription","ProjectTypes","type","action","args","platform","params","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","devtoolsDefault","isDevtoolsInstalled","devtoolsRunner","runScript","dev_default","import_commander","build","program","getRunnerDescription","getPlatformOptionDescription","ProjectTypes","type","action","args","platform","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","runScript","build_default","import_chalk","run","program","action","args","script","restArgs","scriptsInPackage","getScripts","chalk","key","value","binPath","runScript","pm","getPreferedPM","run_default","import_path","import_chalk","import_inquirer","import_inquirer_autocomplete_prompt","import_fs_extra","import_path","import_path","src_exports","__export","PackageManagerTypes","ProjectTypes","UIFrameworks","appendAfterImports","getFileContent","getImports","getNameChangeInImport","packageRegex","nameChangeRegex","getImports","content","matches","imports","match","statement","defaultImport","namedImports","namespaceImport","importPath","getNameChangeInImport","namedImportString","nameChanges","fromName","_as","toName","afterCharacter","getContentBeforeImport","importMatch","_a","contentBeforeImport","lastImportStatement","isImportHasBeforeContent","IMPORT_ORDER","reorderImports","newContent","allImports","allModuleImports","typeImports","importsWithBeforeContent","importsWithoutBeforeContent","insertionPoint","importsByPackage","acc","joinedModuleImports","importMatches","namedImport","importLine","aImportPath","bImportPath","aImportOrderIndex","order","bImportOrderIndex","joinedTypeImports","appendAfterImports","content","append","imports","getImports","lastImport","lastImportIndex","import_fs_extra","import_path","getFileContent","path","Module","originalRequire","provideCliHelpers","packagePath","isAbsolute","args","src_exports","filePath","getFileContent","path","getRefineConfig","packagePath","isAbsolute","provideCliHelpers","path","import_dedent","SWIZZLE_CODES","import_chalk","import_chalk","import_cardinal","import_boxen","getCodeData","content","titleRegexp","commentLine","titleMatch","title","code","renderCodeMarkdown","rawCode","highlighted","cardinal","boxen","chalk","import_marked","import_marked_terminal","markedTerminalRenderer","markdown","TerminalRenderer","renderCodeMarkdown","printSwizzleMessage","label","files","message","errors","statusCode","SWIZZLE_CODES","code","status","clearFilePath","filePath","relative","printStatusMessage","chalk","printFiles","chalks","targetPath","markedTerminalRenderer","dedent","parseSwizzleBlocks","content","regex","import_boxen","getPathPrefix","projectType","getProjectType","getFilesPathByProject","import_inquirer","import_chalk","installRequiredPackages","requiredPackages","promptForPackageInstallation","installPackages","displayManualInstallationCommand","message","pkg","inquirer","pm","getPreferedPM","pmCommand","pmCommands","packages","command","chalk","swizzle","program","chalk","action","getAutocompleteSource","rawList","_answers","input","el","_a","component","index","arr","inquirer","_options","_b","_c","inquirerAutoCompletePrompt","installedPackages","getInstalledRefinePackagesFromNodeModules","packagesWithConfig","pkg","hasConfig","isPackageHaveRefineConfig","isNotDuplicate","boxen","packageConfigs","config","getRefineConfig","selectedPackage","a","b","items","transform","selectedComponent","projectPathPrefix","getPathPrefix","createdFiles","file","srcPath","path","destPath","SWIZZLE_CODES","srcContent","parsedContent","parseSwizzleBlocks","fileTransformedContent","transformedContent","reorderedContent","reorderImports","formatted","prettierFormat","printSwizzleMessage","installRequiredPackages","swizzle_default","import_inquirer","import_center_align","import_commander","import_inquirer","import_semver_diff","import_chalk","findDuplicates","arr","duplicates","item","index","unique","promptInteractiveRefineUpdate","packages","uiGroup","createUIGroup","inquirerUI","createInquirerUI","answers","inquirer","validatePrompt","input","names","pckg","parsePackageNameAndVersion","duplicates","findDuplicates","packagesCategorized","current","diffWanted","semverDiff","diffLatest","maxNameLength","maxFromLength","group","choices","packageColumnText","currentColumnText","header","chalk","pageSize","load","program","action","options","tag","dryRun","all","packages","spinner_default","isRefineUptoDate","selectedPackages","runAll","table","width","getVersionTable","center","allByPrompt","inquirer","promptInteractiveRefineUpdate","printInstallCommand","pmInstall","pkg","version","pm","getPreferedPM","commandInstall","pmCommands","installPackages","update_default","import_envinfo","import_ora","whoami","program","action","spinner","ora","info","envinfo","packagesMarkdown","getInstalledRefinePackages","pkg","whoami_default","import_chalk","import_inquirer","import_inquirer","import_execa","runTransformer","params","incompatiblePackages","integrationName","requiredPackages","transformerFileName","hasIncomatiblePackages","installMissingPackages","jscodeshiftExecutable","stderr","execa","import_chalk","prettifyChoice","choice","id","title","description","disabled","chalk","id","name","incompatiblePackages","requiredPackages","transformerFileName","AntDesignIntegration","projectType","title","description","disabled","prettifyChoice","runTransformer","id","name","incompatiblePackages","requiredPackages","transformerFileName","ReactRouterIntegration","projectType","title","description","disabled","prettifyChoice","runTransformer","availableIntegrations","AntDesignIntegration","ReactRouterIntegration","buildIntegrationChoices","projectType","getProjectType","integrationChoices","availableIntegrations","integration","choice","addIntegrationPrompt","inquirer","import_chalk","import_inquirer","import_fs_extra","import_path","availableProviders","baseTemplatePath","createProviders","providerIds","pathFromArgs","providerId","fileName","templateFileName","getProviderOptions","folderPath","getDefaultPath","filePath","fullPath","provider","availableProviders","p","projectType","getProjectType","path","getProviderPath","buildProviderChoices","availableProviders","provider","id","title","description","chalk","addProviderPrompt","inquirer","getDefaultPath","wrapChoices","group","choices","choice","addCommandPrompt","inquirer","chalk","buildProviderChoices","buildIntegrationChoices","import_commander","addIntegrationAction","name","integrationID","addIntegrationPrompt","integration","availableIntegrations","IntegrationCommand","import_commander","createProviderAction","providers","options","providersPath","addProviderPrompt","createProviders","ProviderCommand","availableProviders","provider","import_commander","createResourceAction","resources","options","command","createResources","ResourceCommand","load","program","addCommandAction","ResourceCommand","ProviderCommand","IntegrationCommand","component","addCommandPrompt","createProviders","integration","availableIntegrations","createResources","add_default","import_envinfo","import_os","getOSType","osPlatform","os","getOS","_","OSInfo","envinfo","import_node_fetch","getTelemetryData","os","getOS","ENV","getInstalledRefinePackages","getProjectType","getRefineProjectId","telemetryHook","data","fetch","import_gray_matter","import_boxen","ANNOUNCEMENT_URL","ANNOUNCEMENT_DELIMITER","splitAnnouncements","feed","section","parseAnnouncement","raw","fixed","parsed","matter","content","getAnnouncements","response","res","printAnnouncements","visibleAnnouncements","a","stringAnnouncements","dash","markedTerminalRenderer","boxen","REFINE_CLI_VERSION","bootstrap","program","figlet","swizzle_default","create_resource_default","update_default","dev_default","build_default","start_default","run_default","check_updates_default","whoami_default","proxy_default","devtools_default","add_default","thisCommand","printAnnouncements","command","telemetryHook"]}