{"version":3,"sources":["../src/dataProvider/index.ts","../src/utils/index.ts","../src/utils/graphql.ts","../src/liveProvider/index.ts","../src/index.ts"],"sourcesContent":["import type { BaseRecord, DataProvider, LogicalFilter } from \"@refinedev/core\";\n\nimport camelcase from \"camelcase\";\nimport * as gql from \"gql-query-builder\";\nimport type VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport type { GraphQLClient } from \"graphql-request\";\nimport gqlTag from \"graphql-tag\";\nimport { singular } from \"pluralize\";\n\nimport { generateFilters, generatePaging, generateSorting } from \"../utils\";\n\nimport { getOperationFields, isMutation } from \"../utils/graphql\";\n\nconst dataProvider = (client: GraphQLClient): Required<DataProvider> => {\n  return {\n    getList: async ({ resource, pagination, sorters, filters, meta }) => {\n      const operation = camelcase(resource);\n\n      const paging = generatePaging(pagination || {});\n\n      const queryVariables: VariableOptions = {};\n\n      let query;\n      let variables;\n\n      if (meta?.gqlQuery) {\n        query = meta?.gqlQuery;\n\n        variables = {\n          filter: filters ? generateFilters(filters as LogicalFilter[]) : {},\n          sorting: sorters ? generateSorting(sorters) : [],\n          paging,\n        };\n      } else {\n        if (filters) {\n          queryVariables[\"filter\"] = {\n            type: camelcase(`${singular(resource)}Filter`, {\n              pascalCase: true,\n            }),\n            required: true,\n            value: generateFilters(filters as LogicalFilter[]),\n          };\n        }\n\n        if (sorters) {\n          queryVariables[\"sorting\"] = {\n            type: camelcase(`${singular(resource)}Sort`, {\n              pascalCase: true,\n            }),\n            required: true,\n            list: [true],\n            value: generateSorting(sorters),\n          };\n        }\n\n        if (paging) {\n          queryVariables[\"paging\"] = {\n            type: \"OffsetPaging\",\n            required: true,\n            value: paging,\n          };\n        }\n\n        const gqlQuery = gql.query({\n          operation,\n          fields: [{ nodes: meta?.fields }, \"totalCount\"],\n          variables: queryVariables,\n        });\n\n        query = gqlQuery.query;\n        variables = gqlQuery.variables;\n      }\n\n      const response = await client.request<BaseRecord>(query, variables);\n\n      return {\n        data: response[operation].nodes,\n        total: response[operation].totalCount,\n      };\n    },\n\n    getMany: async ({ resource, ids, meta }) => {\n      const operation = camelcase(resource);\n\n      if (meta?.gqlQuery) {\n        const response = await client.request<BaseRecord>(meta.gqlQuery, {\n          filter: {\n            id: { in: ids },\n          },\n        });\n\n        return {\n          data: response[operation].nodes,\n        };\n      }\n\n      const { query, variables } = gql.query({\n        operation,\n        fields: [{ nodes: meta?.fields || [\"id\"] }],\n        variables: {\n          filter: {\n            type: camelcase(`${singular(resource)}Filter`, {\n              pascalCase: true,\n            }),\n            required: true,\n            value: {\n              id: { in: ids },\n            },\n          },\n        },\n      });\n\n      const response = await client.request<BaseRecord>(query, variables);\n\n      return {\n        data: response[operation].nodes,\n      };\n    },\n\n    create: async ({ resource, variables, meta }) => {\n      const operation = `createOne${camelcase(singular(resource), {\n        pascalCase: true,\n      })}`;\n\n      const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n      if (gqlOperation) {\n        const response = await client.request<BaseRecord>(gqlOperation, {\n          input: { [camelcase(singular(resource))]: variables },\n        });\n\n        return {\n          data: response[operation],\n        };\n      }\n\n      const { query, variables: queryVariables } = gql.mutation({\n        operation,\n        fields: meta?.fields || [\"id\"],\n        variables: {\n          input: {\n            type: `CreateOne${camelcase(singular(resource), {\n              pascalCase: true,\n            })}Input`,\n            required: true,\n            value: {\n              [camelcase(singular(resource))]: variables,\n            },\n          },\n        },\n      });\n\n      const response = await client.request<BaseRecord>(query, queryVariables);\n\n      return {\n        data: response[operation],\n      };\n    },\n\n    createMany: async ({ resource, variables, meta }) => {\n      const pascalResource = camelcase(resource, { pascalCase: true });\n      const operation = `createMany${pascalResource}`;\n\n      const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n      if (gqlOperation) {\n        const response = await client.request<BaseRecord>(gqlOperation, {\n          input: {\n            [camelcase(resource)]: variables,\n          },\n        });\n\n        return {\n          data: response[operation],\n        };\n      }\n\n      const { query, variables: queryVariables } = gql.mutation({\n        operation,\n        fields: meta?.fields || [\"id\"],\n        variables: {\n          input: {\n            type: `CreateMany${camelcase(resource, {\n              pascalCase: true,\n            })}Input`,\n            required: true,\n            value: {\n              [camelcase(resource)]: variables,\n            },\n          },\n        },\n      });\n\n      const response = await client.request<BaseRecord>(query, queryVariables);\n\n      return {\n        data: response[operation],\n      };\n    },\n    update: async ({ resource, id, variables, meta }) => {\n      const operation = `updateOne${camelcase(singular(resource), {\n        pascalCase: true,\n      })}`;\n\n      const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n      if (gqlOperation) {\n        const response = await client.request<BaseRecord>(gqlOperation, {\n          input: {\n            id,\n            update: variables,\n          },\n        });\n\n        return {\n          data: response[operation],\n        };\n      }\n\n      const { query, variables: queryVariables } = gql.mutation({\n        operation,\n        fields: meta?.fields || [\"id\"],\n        variables: {\n          input: {\n            type: `UpdateOne${camelcase(singular(resource), {\n              pascalCase: true,\n            })}Input`,\n            required: true,\n            value: {\n              id,\n              update: variables,\n            },\n          },\n        },\n      });\n\n      const response = await client.request<BaseRecord>(query, queryVariables);\n\n      return {\n        data: response[operation],\n      };\n    },\n    updateMany: async ({ resource, ids, variables, meta }) => {\n      const pascalResource = camelcase(resource, {\n        pascalCase: true,\n      });\n\n      const mutationOperation = `updateMany${pascalResource}`;\n\n      const mutation = gqlTag`\n                mutation UpdateMany${pascalResource}($input: UpdateMany${pascalResource}Input!) {\n                    ${mutationOperation}(input: $input) {\n                        updatedCount\n                    }\n                }\n            `;\n\n      await client.request<BaseRecord>(mutation, {\n        input: { filter: { id: { in: ids } }, update: variables },\n      });\n\n      const operation = camelcase(resource);\n\n      let query;\n      let queryVariables;\n\n      if (meta?.fields) {\n        const gqlQuery = gql.query({\n          operation,\n          fields: [{ nodes: meta?.fields || [\"id\"] }],\n          variables: {\n            filter: {\n              type: camelcase(`${singular(resource)}Filter`, {\n                pascalCase: true,\n              }),\n              required: true,\n              value: {\n                id: { in: ids },\n              },\n            },\n          },\n        });\n        query = gqlQuery.query;\n        queryVariables = gqlQuery.variables;\n      } else {\n        query = gqlTag`\n                    query GetMany${pascalResource}($filter: ${singular(\n                      pascalResource,\n                    )}Filter!) {\n                        ${operation}(filter: $filter) {\n                            nodes {\n                                id\n                            }\n                        }\n                    }\n                `;\n\n        queryVariables = {\n          filter: { id: { in: ids } },\n        };\n      }\n\n      const response = await client.request<BaseRecord>(query, queryVariables);\n\n      return {\n        data: response[operation].nodes,\n      };\n    },\n    getOne: async ({ resource, id, meta }) => {\n      const operation = camelcase(singular(resource));\n\n      const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n      if (gqlOperation) {\n        let query = gqlOperation;\n        const variables = { id };\n\n        if (isMutation(gqlOperation)) {\n          const stringFields = getOperationFields(gqlOperation);\n\n          query = gqlTag`\n                        query Get${camelcase(singular(resource), {\n                          pascalCase: true,\n                        })}($id: ID!) {\n                            ${operation}(id: $id) {\n                            ${stringFields}\n                            }\n                        }\n                    `;\n        }\n\n        const response = await client.request<BaseRecord>(query, variables);\n\n        return {\n          data: response[operation],\n        };\n      }\n\n      const { query, variables } = gql.query({\n        operation,\n        fields: meta?.fields || [\"id\"],\n        variables: {\n          id: {\n            type: \"ID\",\n            required: true,\n            value: id,\n          },\n        },\n      });\n\n      const response = await client.request<BaseRecord>(query, variables);\n\n      return {\n        data: response[operation],\n      };\n    },\n    deleteOne: async ({ resource, id, meta }) => {\n      const pascalResource = camelcase(singular(resource), {\n        pascalCase: true,\n      });\n\n      const operation = `deleteOne${pascalResource}`;\n\n      if (meta?.gqlMutation) {\n        const response = await client.request<BaseRecord>(meta.gqlMutation, {\n          input: { id },\n        });\n\n        return {\n          data: response[operation],\n        };\n      }\n\n      const query = gqlTag`\n                    mutation DeleteOne${pascalResource}($input: DeleteOne${pascalResource}Input!) {\n                        ${operation}(input: $input) {\n                            id\n                        }\n                    }\n                `;\n\n      const response = await client.request<BaseRecord>(query, {\n        input: { id },\n      });\n\n      return {\n        data: response[operation],\n      };\n    },\n    deleteMany: async ({ resource, ids }) => {\n      const pascalResource = camelcase(resource, {\n        pascalCase: true,\n      });\n      const operation = `deleteMany${pascalResource}`;\n\n      const query = gqlTag`\n                mutation DeleteMany${pascalResource}($input: DeleteMany${pascalResource}Input!) {\n                    ${operation}(input: $input) {\n                        deletedCount\n                    }\n                }\n            `;\n\n      const variables = {\n        input: {\n          filter: {\n            id: { in: ids },\n          },\n        },\n      };\n\n      await client.request<BaseRecord>(query, variables);\n\n      return {\n        data: [],\n      };\n    },\n    getApiUrl: () => {\n      return (client as any).url; // url field in GraphQLClient is private\n    },\n    custom: async ({ url, method, headers, meta }) => {\n      if (url) {\n        client.setEndpoint(url);\n      }\n\n      if (headers) {\n        client.setHeaders(headers);\n      }\n\n      const gqlOperation = meta?.gqlMutation ?? meta?.gqlQuery;\n\n      if (gqlOperation) {\n        const response: any = await client.request(\n          gqlOperation,\n          meta?.variables ?? {},\n        );\n\n        return { data: response };\n      }\n\n      if (meta?.rawQuery) {\n        const response = await client.request<BaseRecord>(\n          meta.rawQuery,\n          meta.variables,\n        );\n\n        return { data: response };\n      }\n\n      if (meta) {\n        if (meta.operation) {\n          let query;\n          let variables;\n\n          if (method === \"get\") {\n            const gqlQuery = gql.query({\n              operation: meta.operation,\n              fields: meta.fields,\n              variables: meta.variables,\n            });\n\n            query = gqlQuery.query;\n            variables = gqlQuery.variables;\n          } else {\n            const gqlMutation = gql.mutation({\n              operation: meta.operation,\n              fields: meta.fields,\n              variables: meta.variables,\n            });\n\n            query = gqlMutation.query;\n            variables = gqlMutation.variables;\n          }\n\n          const response = await client.request<BaseRecord>(query, variables);\n\n          return {\n            data: response[meta.operation],\n          };\n        }\n        throw Error(\"GraphQL operation name required.\");\n      }\n      throw Error(\n        \"GraphQL needs operation, fields and variables values in meta object.\",\n      );\n    },\n  };\n};\n\nexport default dataProvider;\n","import type {\n  CrudFilter,\n  CrudOperators,\n  CrudSorting,\n  LogicalFilter,\n  Pagination,\n} from \"@refinedev/core\";\n\nimport camelcase from \"camelcase\";\nimport * as gql from \"gql-query-builder\";\nimport type VariableOptions from \"gql-query-builder/build/VariableOptions\";\nimport type { Client } from \"graphql-ws\";\nimport set from \"lodash/set\";\nimport { singular } from \"pluralize\";\n\nimport { getOperationFields } from \"./graphql\";\n\nexport const generateSubscription = (\n  client: Client,\n  { callback, params, meta }: any,\n  type: string,\n) => {\n  const generatorMap: any = {\n    created: generateCreatedSubscription,\n    updated: generateUpdatedSubscription,\n    deleted: generateDeletedSubscription,\n  };\n\n  const { resource, filters, subscriptionType, id, ids } = params ?? {};\n\n  const generator = generatorMap[type];\n\n  const { operation, query, variables, operationName } = generator({\n    ids,\n    id,\n    resource,\n    filters,\n    meta,\n    subscriptionType,\n  });\n\n  const onNext = (payload: any) => {\n    callback(payload.data[operation]);\n  };\n\n  const unsubscribe = client.subscribe(\n    { query, variables, operationName },\n    {\n      next: onNext,\n      error: console.error,\n      complete: () => null,\n    },\n  );\n\n  return unsubscribe;\n};\n\nconst operatorMap: { [key: string]: string } = {\n  eq: \"eq\",\n  ne: \"neq\",\n  lt: \"lt\",\n  gt: \"gt\",\n  lte: \"lte\",\n  gte: \"gte\",\n  in: \"in\",\n  nin: \"notIn\",\n};\n\nconst operatorMapper = (\n  operator: CrudOperators,\n  value: any,\n): { [key: string]: any } => {\n  if (operator === \"contains\") {\n    return { iLike: `%${value}%` };\n  }\n\n  if (operator === \"ncontains\") {\n    return { notILike: `%${value}%` };\n  }\n\n  if (operator === \"containss\") {\n    return { like: `%${value}%` };\n  }\n\n  if (operator === \"ncontainss\") {\n    return { notLike: `%${value}%` };\n  }\n\n  if (operator === \"startswith\") {\n    return { iLike: `${value}%` };\n  }\n\n  if (operator === \"nstartswith\") {\n    return { notILike: `${value}%` };\n  }\n\n  if (operator === \"startswiths\") {\n    return { like: `${value}%` };\n  }\n\n  if (operator === \"nstartswiths\") {\n    return { notLike: `${value}%` };\n  }\n\n  if (operator === \"endswith\") {\n    return { iLike: `%${value}` };\n  }\n\n  if (operator === \"nendswith\") {\n    return { notILike: `%${value}` };\n  }\n\n  if (operator === \"endswiths\") {\n    return { like: `%${value}` };\n  }\n\n  if (operator === \"nendswiths\") {\n    return { notLike: `%${value}` };\n  }\n\n  if (operator === \"null\") {\n    return { is: null };\n  }\n\n  if (operator === \"nnull\") {\n    return { isNot: null };\n  }\n\n  if (operator === \"between\") {\n    if (!Array.isArray(value)) {\n      throw new Error(\"Between operator requires an array\");\n    }\n\n    if (value.length !== 2) {\n      return {};\n    }\n\n    return { between: { lower: value[0], upper: value[1] } };\n  }\n\n  if (operator === \"nbetween\") {\n    if (!Array.isArray(value)) {\n      throw new Error(\"NBetween operator requires an array\");\n    }\n\n    if (value.length !== 2) {\n      return {};\n    }\n\n    return { notBetween: { lower: value[0], upper: value[1] } };\n  }\n\n  return { [operatorMap[operator]]: value };\n};\n\nexport const generateFilters = (filters: LogicalFilter[]) => {\n  const result: { [key: string]: { [key: string]: string | number } } = {};\n\n  filters\n    .filter((f) => {\n      if (Array.isArray(f.value) && f.value.length === 0) {\n        return false;\n      }\n\n      return !!f.value;\n    })\n    .map((filter: LogicalFilter | CrudFilter) => {\n      if (filter.operator === \"and\" || filter.operator === \"or\") {\n        return set(result, filter.operator, [\n          generateFilters(filter.value as LogicalFilter[]),\n        ]);\n      }\n      if (\"field\" in filter) {\n        return set(\n          result,\n          filter.field,\n          operatorMapper(filter.operator, filter.value),\n        );\n      }\n      return {};\n    });\n\n  return result;\n};\n\nexport const generateSorting = (sorters: CrudSorting) => {\n  return sorters.map((sorter) => {\n    return {\n      field: sorter.field,\n      direction: sorter.order.toUpperCase(),\n    };\n  });\n};\n\nexport const generatePaging = (pagination: Pagination) => {\n  // maximum value of 32 bit signed integer\n  if (pagination.mode === \"off\") return { limit: 2147483647 };\n\n  if (pagination.mode !== \"server\") return undefined;\n\n  if (!pagination.current || !pagination.pageSize) return undefined;\n\n  return {\n    limit: pagination.pageSize,\n    offset: (pagination.current - 1) * pagination.pageSize,\n  };\n};\n\nexport const generateCreatedSubscription = ({\n  resource,\n  filters,\n  meta,\n}: any) => {\n  const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n  if (gqlOperation) {\n    const singularResourceName = camelcase(singular(resource), {\n      pascalCase: true,\n    });\n\n    const operationName = `Created${singularResourceName}`;\n\n    const operation = `created${singularResourceName}`;\n\n    const query = `\n            subscription ${operationName}($input: Create${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                    ${getOperationFields(gqlOperation)}\n                }\n            }\n        `;\n\n    const variables: VariableOptions = {};\n\n    if (filters) {\n      variables[\"input\"] = {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      };\n    }\n\n    return { query, variables, operation, operationName };\n  }\n\n  const operation = `created${camelcase(singular(resource), {\n    pascalCase: true,\n  })}`;\n\n  const queryVariables: VariableOptions = {};\n\n  if (filters) {\n    queryVariables[\"input\"] = {\n      type: camelcase(\n        `create_${singular(resource)}_subscription_filter_input`,\n        {\n          pascalCase: true,\n        },\n      ),\n      required: true,\n      value: {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      },\n    };\n  }\n\n  const { query, variables } = gql.subscription({\n    operation,\n    fields: meta.fields,\n    variables: queryVariables,\n  });\n\n  return { query, variables, operation };\n};\n\nexport const generateUpdatedSubscription = ({\n  id,\n  resource,\n  filters,\n  meta,\n}: any) => {\n  const gqlOperation = meta?.gqlQuery ?? meta?.gqlMutation;\n\n  if (gqlOperation) {\n    const singularResourceName = camelcase(singular(resource), {\n      pascalCase: true,\n    });\n\n    const operationName = `Updated${singularResourceName}`;\n\n    const operation = `updatedOne${singularResourceName}`;\n\n    const query = `\n            subscription ${operationName}($input: UpdateOne${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                   ${getOperationFields(gqlOperation)}\n                }\n            }\n        `;\n\n    const variables: VariableOptions = {};\n\n    if (filters) {\n      variables[\"input\"] = {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      };\n    }\n\n    if (id) {\n      variables[\"input\"] = {\n        filter: {\n          id: { eq: id },\n        },\n      };\n    }\n\n    return { query, variables, operation, operationName };\n  }\n\n  const operation = `updatedOne${camelcase(singular(resource), {\n    pascalCase: true,\n  })}`;\n\n  const queryVariables: VariableOptions = {};\n\n  if (filters) {\n    queryVariables[\"input\"] = {\n      type: camelcase(\n        `update_one_${singular(resource)}_subscription_filter_input`,\n        {\n          pascalCase: true,\n        },\n      ),\n      required: true,\n      value: {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      },\n    };\n  }\n\n  if (id) {\n    queryVariables[\"input\"] = {\n      type: camelcase(\n        `update_one_${singular(resource)}_subscription_filter_input`,\n        {\n          pascalCase: true,\n        },\n      ),\n      required: true,\n      value: {\n        filter: {\n          id: { eq: id },\n        },\n      },\n    };\n  }\n\n  const { query, variables } = gql.subscription({\n    operation,\n    fields: meta.fields,\n    variables: queryVariables,\n  });\n\n  return { query, variables, operation };\n};\n\nexport const generateDeletedSubscription = ({\n  resource,\n  filters,\n  meta,\n}: any) => {\n  if (meta?.gqlQuery) {\n    const singularResourceName = camelcase(singular(resource), {\n      pascalCase: true,\n    });\n\n    const operationName = `Deleted${singularResourceName}`;\n\n    const operation = `deletedOne${singularResourceName}`;\n\n    const query = `\n            subscription ${operationName}($input: DeleteOne${singularResourceName}SubscriptionFilterInput) {\n                ${operation}(input: $input) {\n                    id\n                }\n            }\n        `;\n\n    const variables: VariableOptions = {};\n\n    if (filters) {\n      variables[\"input\"] = {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      };\n    }\n\n    return { query, variables, operation, operationName };\n  }\n\n  const operation = `deletedOne${camelcase(singular(resource), {\n    pascalCase: true,\n  })}`;\n\n  const queryVariables: VariableOptions = {};\n\n  if (filters) {\n    queryVariables[\"input\"] = {\n      type: camelcase(\n        `delete_one_${singular(resource)}_subscription_filter_input`,\n        {\n          pascalCase: true,\n        },\n      ),\n      required: true,\n      value: {\n        filter: generateFilters(\n          filters.filter(\n            (filter: LogicalFilter) => !filter.field.includes(\".\"),\n          ),\n        ),\n      },\n    };\n  }\n\n  const { query, variables } = gql.subscription({\n    operation,\n    fields: meta.fields.filter(\n      (field: string | object) => typeof field !== \"object\",\n    ),\n    variables: queryVariables,\n  });\n\n  return { query, variables, operation };\n};\n","import {\n  type FieldNode,\n  type DocumentNode,\n  visit,\n  type SelectionSetNode,\n} from \"graphql\";\n\nconst getChildNodesField = (node: FieldNode): FieldNode | undefined => {\n  return node?.selectionSet?.selections?.find(\n    (node) => node.kind === \"Field\" && node.name.value === \"nodes\",\n  ) as FieldNode;\n};\n\nexport const getOperationFields = (documentNode: DocumentNode) => {\n  const fieldLines: string[] = [];\n  let isInitialEnter = true;\n  let depth = 0;\n  let isNestedField = false;\n\n  visit(documentNode, {\n    Field: {\n      enter(node): SelectionSetNode | void {\n        if (isInitialEnter) {\n          isInitialEnter = false;\n\n          const childNodesField = getChildNodesField(node);\n\n          const nodeToReturn = childNodesField ?? node;\n\n          if (typeof nodeToReturn.selectionSet === \"undefined\") {\n            throw new Error(\"Operation must have a selection set\");\n          }\n\n          return nodeToReturn.selectionSet;\n        }\n\n        fieldLines.push(\n          `${depth > 0 ? \"  \".repeat(isNestedField ? depth : depth - 1) : \"\"}${\n            node.name.value\n          }${node.selectionSet ? \" {\" : \"\"}`,\n        );\n\n        if (node.selectionSet) {\n          depth++;\n          isNestedField = true;\n        }\n      },\n      leave(node) {\n        if (node.selectionSet) {\n          depth--;\n          fieldLines.push(`${\"  \".repeat(depth)}}`);\n          isNestedField = false;\n        }\n      },\n    },\n  });\n\n  return fieldLines.join(\"\\n\").trim();\n};\n\nexport const isMutation = (documentNode: DocumentNode) => {\n  let isMutation = false;\n\n  visit(documentNode, {\n    OperationDefinition: {\n      enter(node) {\n        if (node.operation === \"mutation\") {\n          isMutation = true;\n        }\n      },\n    },\n  });\n\n  return isMutation;\n};\n","import type { LiveProvider } from \"@refinedev/core\";\n\nimport type { Client } from \"graphql-ws\";\n\nimport { generateSubscription } from \"../utils\";\n\ntype SubscriptionAction = \"created\" | \"updated\" | \"deleted\";\n\nexport const liveProvider = (client: Client): LiveProvider => {\n  const subscribeToResource = (\n    client: Client,\n    callback: Function,\n    params: any,\n    meta: any,\n    action: SubscriptionAction,\n    resource: string,\n    unsubscribes: Function[],\n  ) => {\n    const unsubscribe = generateSubscription(\n      client,\n      { callback, params, meta },\n      action,\n    );\n    unsubscribes.push(unsubscribe);\n  };\n\n  return {\n    subscribe({ callback, params, meta }) {\n      const { resource, subscriptionType } = params ?? {};\n\n      if (!meta || !subscriptionType || !resource) {\n        throw new Error(\n          \"[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions\",\n        );\n      }\n\n      const unsubscribes: any[] = [];\n\n      if (params?.subscriptionType === \"useList\") {\n        [\"created\", \"updated\", \"deleted\"].forEach((action) =>\n          subscribeToResource(\n            client,\n            callback,\n            params,\n            meta,\n            action as SubscriptionAction,\n            resource,\n            unsubscribes,\n          ),\n        );\n      }\n\n      if (params?.subscriptionType === \"useOne\") {\n        subscribeToResource(\n          client,\n          callback,\n          params,\n          meta,\n          \"updated\",\n          resource,\n          unsubscribes,\n        );\n      }\n\n      const unsubscribe = () => {\n        unsubscribes.forEach((unsubscribe) => unsubscribe());\n      };\n\n      return unsubscribe;\n    },\n    unsubscribe(unsubscribe) {\n      unsubscribe();\n    },\n  };\n};\n","import dataProvider from \"./dataProvider/index.js\";\n\nexport * from \"./dataProvider/index.js\";\nexport * from \"./interfaces.js\";\nexport * from \"./liveProvider/index.js\";\nexport * as qqlQueryBuilder from \"gql-query-builder\";\nexport type {\n  BatchRequestDocument,\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  GraphQLWebSocketClient,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n} from \"graphql-request\";\nexport {\n  batchRequests,\n  gql,\n  GraphQLClient,\n  rawRequest,\n  request,\n  resolveRequestDocument,\n} from \"graphql-request\";\nexport * as graphqlWS from \"graphql-ws\";\n\nexport default dataProvider;\n"],"mappings":"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","names":["camelcase","gql","gqlTag","singular","camelcase","gql","set","singular","visit","getChildNodesField","node","_a","_b","getOperationFields","documentNode","fieldLines","isInitialEnter","depth","isNestedField","nodeToReturn","isMutation","generateSubscription","client","callback","params","meta","type","generatorMap","generateCreatedSubscription","generateUpdatedSubscription","generateDeletedSubscription","resource","filters","subscriptionType","id","ids","generator","operation","query","variables","operationName","onNext","payload","operatorMap","operatorMapper","operator","value","generateFilters","result","f","filter","set","generateSorting","sorters","sorter","generatePaging","pagination","gqlOperation","singularResourceName","camelcase","singular","getOperationFields","queryVariables","field","dataProvider","client","resource","pagination","sorters","filters","meta","operation","camelcase","paging","generatePaging","queryVariables","query","variables","generateFilters","generateSorting","singular","gqlQuery","response","ids","gqlOperation","id","pascalResource","mutationOperation","mutation","gqlTag","isMutation","stringFields","getOperationFields","url","method","headers","gqlMutation","dataProvider_default","liveProvider","client","subscribeToResource","callback","params","meta","action","resource","unsubscribes","unsubscribe","generateSubscription","subscriptionType","qqlQueryBuilder","batchRequests","gql","GraphQLClient","rawRequest","request","resolveRequestDocument","graphqlWS","src_default","dataProvider_default"]}