{"version":3,"sources":["../src/bindings.tsx","../src/convert-to-number-if-possible.ts","../src/refine-routes.tsx","../src/create-resource-routes.tsx","../src/navigate-to-resource.tsx","../src/unsaved-changes-notifier.tsx","../src/use-prompt-workaround.ts","../src/catch-all-navigate.tsx","../src/document-title-handler.tsx","../src/use-document-title.ts"],"sourcesContent":["import React, { type ComponentProps } from \"react\";\nimport {\n  type GoConfig,\n  type ParseResponse,\n  type RouterBindings,\n  matchResourceFromRoute,\n  ResourceContext,\n} from \"@refinedev/core\";\nimport { useCallback, useContext } from \"react\";\nimport qs from \"qs\";\nimport {\n  useNavigate,\n  useLocation,\n  Link,\n  matchPath,\n  useParams,\n} from \"react-router-dom\";\nimport { convertToNumberIfPossible } from \"./convert-to-number-if-possible\";\n\nexport const stringifyConfig = {\n  addQueryPrefix: true,\n  skipNulls: true,\n  arrayFormat: \"indices\" as const,\n  encode: false,\n  encodeValuesOnly: true,\n};\n\nexport const routerBindings: RouterBindings = {\n  go: () => {\n    const { search: existingSearch, hash: existingHash } = useLocation();\n    const navigate = useNavigate();\n\n    const fn = useCallback(\n      ({\n        to,\n        type,\n        query,\n        hash,\n        options: { keepQuery, keepHash } = {},\n      }: GoConfig) => {\n        /** Construct query params */\n        const urlQuery = {\n          ...(keepQuery &&\n            existingSearch &&\n            qs.parse(existingSearch, { ignoreQueryPrefix: true })),\n          ...query,\n        };\n\n        if (urlQuery.to) {\n          urlQuery.to = encodeURIComponent(`${urlQuery.to}`);\n        }\n\n        const hasUrlQuery = Object.keys(urlQuery).length > 0;\n\n        /** Get hash */\n        const urlHash = `#${(hash || (keepHash && existingHash) || \"\").replace(\n          /^#/,\n          \"\",\n        )}`;\n\n        const hasUrlHash = urlHash.length > 1;\n\n        const urlTo = to || \"\";\n\n        const fullPath = `${urlTo}${\n          hasUrlQuery ? qs.stringify(urlQuery, stringifyConfig) : \"\"\n        }${hasUrlHash ? urlHash : \"\"}`;\n\n        if (type === \"path\") {\n          return fullPath;\n        }\n\n        /** Navigate to the url */\n        return navigate(fullPath, {\n          replace: type === \"replace\",\n        });\n      },\n      [existingHash, existingSearch, navigate],\n    );\n\n    return fn;\n  },\n  back: () => {\n    const navigate = useNavigate();\n\n    const fn = useCallback(() => {\n      navigate(-1);\n    }, [navigate]);\n\n    return fn;\n  },\n  parse: () => {\n    let params = useParams();\n    const { pathname, search } = useLocation();\n    const { resources } = useContext(ResourceContext);\n\n    const { resource, action, matchedRoute } = React.useMemo(() => {\n      return matchResourceFromRoute(pathname, resources);\n    }, [resources, pathname]);\n\n    // params is empty when useParams is used in a component that is not a child of a Route\n    if (Object.entries(params).length === 0 && matchedRoute) {\n      params = matchPath(matchedRoute, pathname)?.params || {};\n    }\n\n    const fn = useCallback(() => {\n      const parsedSearch = qs.parse(search, { ignoreQueryPrefix: true });\n\n      const combinedParams = {\n        ...params,\n        ...parsedSearch,\n      };\n\n      const response: ParseResponse = {\n        ...(resource && { resource }),\n        ...(action && { action }),\n        ...(params?.id && { id: decodeURIComponent(params.id) }),\n        // ...(params?.action && { action: params.action }), // lets see if there is a need for this\n        pathname,\n        params: {\n          ...combinedParams,\n          current: convertToNumberIfPossible(\n            combinedParams.current as string,\n          ) as number | undefined,\n          pageSize: convertToNumberIfPossible(\n            combinedParams.pageSize as string,\n          ) as number | undefined,\n          to: combinedParams.to\n            ? decodeURIComponent(combinedParams.to as string)\n            : undefined,\n        },\n      };\n\n      return response;\n    }, [pathname, search, params, resource, action]);\n\n    return fn;\n  },\n  Link: React.forwardRef<\n    HTMLAnchorElement,\n    ComponentProps<NonNullable<RouterBindings[\"Link\"]>>\n  >(function RefineLink(props, ref) {\n    return <Link {...props} ref={ref} />;\n  }),\n};\n","export const convertToNumberIfPossible = (value: string | undefined) => {\n  if (typeof value === \"undefined\") {\n    return value;\n  }\n  const num = Number(value);\n  if (`${num}` === value) {\n    return num;\n  }\n  return value;\n};\n","import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\nimport { createResourceRoutes } from \"./create-resource-routes\";\nimport { Routes } from \"react-router-dom\";\n\ntype RefineRoutesProps = {\n  children?: (routes: JSX.Element[]) => JSX.Element;\n};\n\nexport const RefineRoutes = ({ children }: RefineRoutesProps) => {\n  const { resources: resourcesFromContext } = useResource();\n\n  const routes = React.useMemo(() => {\n    return createResourceRoutes(resourcesFromContext);\n  }, [resourcesFromContext]);\n\n  return children ? children(routes) : <Routes>{routes}</Routes>;\n};\n","import React from \"react\";\nimport type { Action, ResourceProps } from \"@refinedev/core\";\n\nimport { Route } from \"react-router-dom\";\n\nexport const createResourcePathWithAction = (\n  resource: ResourceProps,\n  action: Action,\n) => {\n  const { name, list, create, show, edit } = resource;\n\n  if (typeof list === \"string\" && action === \"list\") {\n    return list;\n  }\n  if (typeof list === \"object\" && action === \"list\") {\n    return list.path;\n  }\n  if (typeof create === \"string\" && action === \"create\") {\n    return create;\n  }\n  if (typeof create === \"object\" && action === \"create\") {\n    return create.path;\n  }\n  if (typeof show === \"string\" && action === \"show\") {\n    return show;\n  }\n  if (typeof show === \"object\" && action === \"show\") {\n    return show.path;\n  }\n  if (typeof edit === \"string\" && action === \"edit\") {\n    return edit;\n  }\n  if (typeof edit === \"object\" && action === \"edit\") {\n    return edit.path;\n  }\n\n  /**\n   * Default path fallback\n   */\n  const nameSegment = `/${name}`;\n  const actionSegment = `${\n    [\"edit\", \"create\", \"clone\", \"show\"].includes(action) ? action : \"\"\n  }`;\n  const idSegment = `${\n    [\"edit\", \"show\", \"clone\"].includes(action) ? \":id\" : \"\"\n  }`;\n\n  return [nameSegment, actionSegment, idSegment].filter(Boolean).join(\"/\");\n};\n\nexport const createResourceRoutes = (resources: ResourceProps[]) => {\n  const routes = resources.flatMap((resource) => {\n    const actions: {\n      action: Action;\n      element: React.ComponentType<any>;\n      path: string;\n    }[] = [];\n\n    ([\"list\", \"show\", \"edit\", \"create\"] as const).forEach((action) => {\n      const item = resource[action];\n      if (typeof item !== \"undefined\" && typeof item !== \"string\") {\n        const element = typeof item === \"function\" ? item : item.component;\n        const path = createResourcePathWithAction(resource, action);\n\n        actions.push({ action, element: element, path });\n        if (action === \"create\") {\n          actions.push({\n            action: \"clone\",\n            element: element,\n            path,\n          });\n        }\n      }\n    });\n\n    return actions.map(({ action, element: Component, path }) => {\n      const element = <Component />;\n\n      return <Route key={`${action}-${path}`} path={path} element={element} />;\n    });\n  });\n\n  return routes;\n};\n","import { useResource, useGetToPath } from \"@refinedev/core\";\nimport React, { type PropsWithChildren } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\ntype NavigateToResourceProps = PropsWithChildren<{\n  resource?: string;\n  meta?: Record<string, unknown>;\n}>;\n\nexport const NavigateToResource: React.FC<NavigateToResourceProps> = ({\n  resource: resourceProp,\n  meta,\n}) => {\n  const getToPath = useGetToPath();\n  const { resource, resources } = useResource(resourceProp);\n\n  const toResource = resource || resources.find((r) => r.list);\n\n  if (toResource) {\n    const path = getToPath({\n      resource: toResource,\n      action: \"list\",\n      meta,\n    });\n\n    if (path) {\n      return <Navigate to={path} />;\n    }\n\n    console.warn(\"No resource is found to navigate to.\");\n    return null;\n  }\n  console.warn(\"No resource is found to navigate to.\");\n  return null;\n};\n","import React from \"react\";\nimport { useTranslate, useWarnAboutChange } from \"@refinedev/core\";\nimport { usePrompt } from \"./use-prompt-workaround\";\nimport { useLocation } from \"react-router-dom\";\n\ntype UnsavedChangesNotifierProps = {\n  translationKey?: string;\n  message?: string;\n};\n\nexport const UnsavedChangesNotifier: React.FC<UnsavedChangesNotifierProps> = ({\n  translationKey = \"warnWhenUnsavedChanges\",\n  message = \"Are you sure you want to leave? You have unsaved changes.\",\n}) => {\n  const translate = useTranslate();\n  const { pathname } = useLocation();\n  const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n  React.useEffect(() => {\n    return () => setWarnWhen?.(false);\n  }, [pathname]);\n\n  const warnMessage = React.useMemo(() => {\n    return translate(translationKey, message);\n  }, [translationKey, message, translate]);\n\n  usePrompt(warnMessage, warnWhen, () => {\n    setWarnWhen?.(false);\n  });\n\n  return null;\n};\n","/**\n * `useBlocker` and `usePrompt` is no longer part of react-router-dom for the routers other than `DataRouter`.\n *\n * The previous workaround (<v6.4) was to use `block` function in `UNSAFE_NavigationContext` which is now removed.\n *\n * We're using a workaround from the gist https://gist.github.com/MarksCode/64e438c82b0b2a1161e01c88ca0d0355 with some modifications\n * Thanks to @MarksCode(https://github.com/MarksCode) for the workaround.\n */\n\nimport React from \"react\";\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useConfirmExit(confirmExit: () => boolean, when = true) {\n  const { navigator } = React.useContext(NavigationContext);\n\n  React.useEffect(() => {\n    if (!when) {\n      return;\n    }\n\n    const go = navigator.go;\n    const push = navigator.push;\n\n    navigator.push = (...args: Parameters<typeof push>) => {\n      const result = confirmExit();\n      if (result !== false) {\n        push(...args);\n      }\n    };\n\n    navigator.go = (...args: Parameters<typeof go>) => {\n      const result = confirmExit();\n      if (result !== false) {\n        go(...args);\n      }\n    };\n\n    return () => {\n      navigator.push = push;\n      navigator.go = go;\n    };\n  }, [navigator, confirmExit, when]);\n}\n\nexport function usePrompt(\n  message: string,\n  when = true,\n  onConfirm?: () => void,\n  legacy = false,\n) {\n  const warnWhenListener = React.useCallback(\n    (e: { preventDefault: () => void; returnValue: string }) => {\n      e.preventDefault();\n\n      e.returnValue = message;\n\n      return e.returnValue;\n    },\n    [message],\n  );\n\n  React.useEffect(() => {\n    if (when && !legacy) {\n      window.addEventListener(\"beforeunload\", warnWhenListener);\n    }\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", warnWhenListener);\n    };\n  }, [warnWhenListener, when, legacy]);\n\n  const confirmExit = React.useCallback(() => {\n    const confirm = window.confirm(message);\n    if (confirm && onConfirm) {\n      onConfirm();\n    }\n    return confirm;\n  }, [message]);\n\n  useConfirmExit(confirmExit, when);\n}\n","import React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\n\n/**\n * A component that will navigate to the given path with `to` query parameter included with the current location.\n */\nexport const CatchAllNavigate: React.FC<{ to: string }> = ({ to }) => {\n  const { pathname, search } = useLocation();\n\n  const queryValue = `${pathname}${search}`;\n\n  const query =\n    queryValue.length > 1 ? `?to=${encodeURIComponent(queryValue)}` : \"\";\n\n  return <Navigate to={`${to}${query}`} />;\n};\n","import {\n  type Action,\n  type IResourceItem,\n  useParsed,\n  useTranslate,\n  generateDefaultDocumentTitle,\n  useUserFriendlyName,\n} from \"@refinedev/core\";\nimport React, { useLayoutEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\ntype Props = {\n  handler?: (options: {\n    resource?: IResourceItem;\n    action?: Action;\n    params?: Record<string, string | undefined>;\n    pathname?: string;\n    autoGeneratedTitle: string;\n  }) => string;\n};\n\nexport function DocumentTitleHandler({ handler }: Props) {\n  const location = useLocation();\n  const { action, id, params, pathname, resource } = useParsed();\n  const translate = useTranslate();\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const identifier = resource?.identifier ?? resource?.name;\n  const resourceName =\n    resource?.label ??\n    resource?.meta?.label ??\n    getUserFriendlyName(identifier, action === \"list\" ? \"plural\" : \"singular\");\n\n  useLayoutEffect(() => {\n    const autoGeneratedTitle = generateDefaultDocumentTitle(\n      translate,\n      resource!,\n      action,\n      `${id}`,\n      resourceName,\n    );\n    if (handler) {\n      document.title = handler({\n        action,\n        resource,\n        params,\n        pathname,\n        autoGeneratedTitle,\n      });\n    } else {\n      document.title = autoGeneratedTitle;\n    }\n  }, [location]);\n\n  return <></>;\n}\n","import { useTranslate } from \"@refinedev/core\";\nimport { useEffect } from \"react\";\n\ntype Title = string | { i18nKey: string };\n\nexport const useDocumentTitle = (title?: Title) => {\n  const translate = useTranslate();\n\n  useEffect(() => {\n    if (!title) return;\n\n    if (typeof title === \"string\") {\n      document.title = translate(title);\n    } else {\n      document.title = translate(title.i18nKey);\n    }\n  }, [title]);\n\n  return (title: Title) => {\n    if (typeof title === \"string\") {\n      document.title = translate(title);\n    } else {\n      document.title = translate(title.i18nKey);\n    }\n  };\n};\n"],"mappings":"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","names":["React","matchResourceFromRoute","ResourceContext","useCallback","useContext","qs","useNavigate","useLocation","Link","matchPath","useParams","convertToNumberIfPossible","value","num","stringifyConfig","routerBindings","existingSearch","existingHash","useLocation","navigate","useNavigate","useCallback","to","type","query","hash","keepQuery","keepHash","urlQuery","qs","hasUrlQuery","urlHash","hasUrlHash","fullPath","_a","params","useParams","pathname","search","resources","useContext","ResourceContext","resource","action","matchedRoute","React","matchResourceFromRoute","matchPath","parsedSearch","combinedParams","convertToNumberIfPossible","props","ref","Link","React","useResource","React","Route","createResourcePathWithAction","resource","action","name","list","create","show","edit","nameSegment","actionSegment","idSegment","createResourceRoutes","resources","actions","item","element","path","Component","Routes","RefineRoutes","children","resourcesFromContext","useResource","routes","React","createResourceRoutes","useResource","useGetToPath","React","Navigate","NavigateToResource","resourceProp","meta","getToPath","resource","resources","toResource","r","path","React","useTranslate","useWarnAboutChange","React","NavigationContext","useConfirmExit","confirmExit","when","navigator","go","push","args","usePrompt","message","onConfirm","legacy","warnWhenListener","e","confirm","useLocation","UnsavedChangesNotifier","translationKey","message","translate","useTranslate","pathname","warnWhen","setWarnWhen","useWarnAboutChange","React","warnMessage","usePrompt","React","Navigate","useLocation","CatchAllNavigate","to","pathname","search","queryValue","query","useParsed","useTranslate","generateDefaultDocumentTitle","useUserFriendlyName","React","useLayoutEffect","useLocation","DocumentTitleHandler","handler","_a","location","action","id","params","pathname","resource","translate","getUserFriendlyName","identifier","resourceName","autoGeneratedTitle","useTranslate","useEffect","useDocumentTitle","title","translate"]}