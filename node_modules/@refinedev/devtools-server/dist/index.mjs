var P=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});import Ue from"express";import{DevtoolsEvent as m,receive as h,send as u}from"@refinedev/devtools-shared";import ee from"express";import b from"path";var I=e=>{e.use(ee.static(b.join(__dirname,"client"))),e.use((t,r,o)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return o();r.status(200).sendFile(b.join(`${__dirname}/client/index.html`))})};import te from"ws";var y="https://cloud2.refine.dev",S="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";import{DevtoolsEvent as re,send as ne}from"@refinedev/devtools-shared";import{bold as O,cyanBright as D}from"chalk";var L=(e,t)=>{let r=new te.Server({server:e}).on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${D.bold("\u2717 ")}${O("Refine Devtools server")} (websocket) failed to start. Port ${5001} is already in use.
`):console.error(`
${D.bold("\u2717 ")}${O("error from refine devtools")}`,o),r.close(()=>{}),t()});return r.on("connection",o=>{ne(o,re.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),o.on("close",()=>{o.terminate()})}),process.on("SIGTERM",()=>{r.close(()=>{})}),r};import"lodash";import"@refinedev/devtools-shared";import"ws";var x=()=>0;import{bold as k,cyanBright as E}from"chalk";import oe from"http";var j=(e,t)=>{let r=oe.createServer(e);return r.on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${E.bold("\u2717 ")}${k("Refine Devtools server")} (http) failed to start. Port ${5001} is already in use.
`):console.error(`
${E.bold("\u2717 ")}${k("error from Refine Devtools")}`,o),r.close(()=>{}),t()}).on("listening",()=>{console.log(`
${E.bold("\u2713 ")}${k("Refine Devtools")} is running at port ${E.bold(5001)}
`)}),process.on("SIGTERM",()=>{r.close(()=>{})}),r.listen(5001,void 0,void 0,()=>{}),r};var ie={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},C=()=>({...ie});import{json as Te}from"express";import we from"lodash-es/uniq.js";import ae from"node-fetch";import se from"gray-matter";import{marked as T}from"marked";import w from"sanitize-html";var ce=e=>e.split("---section").slice(1).map(r=>`---section${r}`),le=e=>{let t=new T.Renderer;t.link=function(...o){return T.Renderer.prototype.link.apply(this,o).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=T(e,{renderer:t});return w(r,{allowedTags:w.defaults.allowedTags.concat(["img"]),allowedAttributes:{...w.defaults.allowedAttributes,img:["src"]}})},de=e=>{let t=se(e.replace("---section","---"));return{...t.data,content:le(t.content)}},pe=async()=>{try{return(await ae(S)).text()}catch{return""}},N=async()=>{try{let e=await pe();return ce(e).map(de)}catch{return[]}};import ue from"fs";import me from"path";import fe from"globby";var V=async e=>{try{let t=await fe(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let o=P.resolve(me.join(e,"package.json"));o&&(r=o)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var U=async e=>{try{let t=await V(e);if(!t)return null;let r=JSON.parse(ue.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};import ve from"path";import{readJSON as ge}from"fs-extra";var _=async(e=process.cwd())=>{let t=await ge(ve.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(o=>o.startsWith("@refinedev/"))};var F=e=>e.replace("@refinedev/","https://c.refine.dev/");var H=e=>"https://refine.dev/docs/api-reference/general-concepts/";var $=async e=>{try{let t=await _(e);return await Promise.all(t.map(async o=>{let c=await U(o);return{name:o,currentVersion:c==null?void 0:c.version,description:c==null?void 0:c.description,changelog:F(o),documentation:H(o)}}))}catch{return[]}};import d from"dedent";var he=[{name:"@refinedev/ably",description:"Ably integration for Refine",install:"npm install @refinedev/ably",usage:d(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for Refine",install:"npm install @refinedev/airtable",usage:d(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for Refine",install:"npm install @refinedev/antd antd",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for Refine",install:"npm install @refinedev/appwrite",usage:d(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for Refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion @tabler/icons-react",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for Refine",install:"npm install @refinedev/graphql",usage:d(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for Refine",install:"npm install @refinedev/hasura",usage:d(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with Refine",install:"npm install @refinedev/inferencer",usage:d(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for Refine",install:"npm install @refinedev/kbar",usage:d(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for Refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons-react",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for Refine",install:"npm install @refinedev/medusa",usage:d(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for Refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for Refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:d(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for Refine",install:"npm install @refinedev/nestjsx-crud",usage:d(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for Refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:d(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for Refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:d(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with Refine",install:"npm install @refinedev/simple-rest",usage:d(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with Refine",install:"npm install @refinedev/supabase",usage:d(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of Refine",install:"npm install @refinedev/strapi axios",usage:d(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of Refine",install:"npm install @refinedev/strapi-v4 axios",usage:d(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],M=async e=>{let t=await _(e);return he.filter(r=>!t.includes(r.name))};import Pe from"preferred-pm";import ye from"execa";var J=async(e,t=process.cwd())=>{try{let{name:r}=await Pe(t)??{name:"npm"},{failed:o}=await ye(r??"npm",["install",...e.map(c=>`${c}@latest`)]);return!o}catch{return!1}};import Ee from"execa";var G=async e=>{try{let{stdout:t}=await Ee("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};import{readJSON as _e}from"fs-extra";import Re from"path";var R=async(e=process.cwd())=>{var t;try{let r=await _e(Re.join(e,"package.json"),{encoding:"utf-8"}),o=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return o||!1}catch{return null}};import Ae from"execa";var W=async(e,t=process.cwd())=>{try{return Ae.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};import ke from"execa";import q from"path";var B=async(e,t=process.cwd())=>{try{let r=P.resolve(".bin/jscodeshift"),o=ke.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${q.resolve(q.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});o.stderr&&console.error(o.stderr)}catch(r){console.error(r)}};var K=async(e,t=process.cwd())=>{try{return await Promise.all([W(e,t),B(e,t)]),!0}catch{return!1}};var Q=(e,t)=>{e.use("/api",Te()),e.get("/api/connected-app",(i,n)=>{n.json({url:t.connectedApp})}),e.get("/api/activities",(i,n)=>{let{offset:a=0,limit:l=t.activities.length}=i.query;n.setHeader("x-total-count",t.activities.length),n.json({data:t.activities.slice(Number(a),Number(l))})}),e.get("/api/activities/reset",(i,n)=>{t.activities=[],n.json({success:!0})}),e.get("/api/unique-trace-items",(i,n)=>{n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let a=t.activities.flatMap(p=>{var f;return((f=p.trace)==null?void 0:f.map(g=>g.function).filter(Boolean))??[]}),l=we(a);n.setHeader("x-total-count",l.length),n.json({data:l})});let r=null;e.get("/api/installed-packages",async(i,n)=>{let{force:a}=i.query??{};(!r||a)&&(r=await $()),n.header("x-total-count",`${r.length}`),n.json({data:r})});let o=null;e.get("/api/available-packages",async(i,n)=>{o||(o=await M()),n.header("x-total-count",`${o.length}`),n.json({data:o})});let c=new Map;e.get("/api/packages/:packageName/latest",async(i,n)=>{let{packageName:a}=i.params??{};if(!a){n.status(400).json({error:"Package name is required"});return}if(!c.has(a)){let l=await G(a);c.set(a,l)}return n.json({data:c.get(a)})}),e.post("/api/packages/install",async(i,n)=>{let{packages:a}=i.body??{};if((a==null?void 0:a.length)===0){n.status(400).json({error:"Package name is required"});return}await J(a)?(r=null,o=null,n.status(200).json({success:!0})):n.status(400).json({success:!1,error:"Failed to update package"})});let s=null;e.get("/api/feed",async(i,n)=>{s||(s=await N()),n.header("x-total-count",`${s.length}`),n.json({data:s})}),e.get("/api/project-id/status",async(i,n)=>{let a=await R();if(a){n.status(200).json({projectId:a});return}if(a===!1){n.status(404).json({projectId:null});return}n.status(500).json({projectId:null})}),e.post("/api/project-id/update",async(i,n)=>{let{projectId:a}=i.body??{};if(!a){n.status(400).json({error:"Project ID is required"});return}if(await K(a)){n.status(200).json({success:!0});return}n.status(500).json({success:!1,error:"Failed to update project ID"})})};import{readJSON as be,writeJSON as Ie}from"fs-extra";import{FrontendApi as Se}from"@ory/client";import{createProxyMiddleware as Y}from"http-proxy-middleware";import z from"path";var A=null,Oe=async(e,t,r)=>{A||(A=await R()),A&&(e.headers["x-project-id"]=A),r()},De=(e,t)=>{if(t.body){let r=JSON.stringify(t.body);e.setHeader("Content-Type","application/json"),e.setHeader("Content-Length",Buffer.byteLength(r)),e.write(r)}},Le=async e=>{try{let t=`${y}/.auth`,r=new Se({isJsonMime:()=>!0,basePath:t,baseOptions:{withCredentials:!0}}),{data:o}=await r.toSession({xSessionToken:e,tokenizeAs:"jwt_template_1"});return o==null?void 0:o.tokenized}catch{}},xe=async(e,t)=>{try{Ie(z.join(__dirname,"..",".persist.json"),{token:e,jwt:t})}catch{}},je=async()=>{try{return await be(z.join(__dirname,"..",".persist.json"))}catch{}return{token:void 0,jwt:void 0}},Ce=e=>(t,r)=>{if(r.url.includes("self-service/logout/api")){let o=JSON.stringify({session_token:e});t.setHeader("Content-Length",Buffer.byteLength(o)),t.write(o)}},Ne=e=>(t,r,o)=>{let c="";t.on("data",s=>{c+=s}),t.on("end",()=>{var i;let s;try{s=JSON.parse(c).session_token}catch{}if(!s){if((i=c==null?void 0:c.includes)!=null&&i.call(c,"an+account+with+the+same+identifier")){o.redirect("/after-login?error=An+account+with+the+same+identifier+exists+already");return}o.redirect("/after-login?error=Invalid-session-token");return}Le(s).then(n=>{e(s,n??""),o.redirect("/after-login")})})},X=async e=>{let{token:t,jwt:r}=await je(),o=Y({target:y,changeOrigin:!0,pathRewrite:{"^/api/.auth":"/.auth"},cookieDomainRewrite:{"refine.dev":"localhost"},logLevel:"silent",headers:{"auth-base-url-rewrite":`http://localhost:${5001}/api/.auth`},selfHandleResponse:!0,onProxyReq:(s,i,...n)=>{t&&(s.setHeader("X-Session-Token",t??""),Ce(t)(s,i,...n))},onProxyRes:(s,i,n)=>{var l;let a=(l=s.headers["set-cookie"])==null?void 0:l.map(p=>p.replace("Domain=refine.dev;","Domain=localhost;").replace(" HttpOnly; Secure; SameSite=Lax",""));if(a&&(s.headers["set-cookie"]=a),i.url.includes("self-service/methods/oidc/callback"))return Ne((p,f)=>{t=p,r=f,xe(t,r)})(s,i,n);s.statusCode===401?n.writeHead(200,{...s.headers,"Access-Control-Expose-Headers":`Refine-Is-Authenticated, ${s.headers["Access-Control-Expose-Headers"]}`}):n.writeHead(s.statusCode||500,s.headers),s.pipe(n,{end:!0})}});e.use("/api/.auth",o);let c=Y({target:y,secure:!1,changeOrigin:!0,logLevel:"silent",pathRewrite:{"^/api/.refine":"/.refine"},onProxyReq:(s,...i)=>{r&&(s.setHeader("Authorization",`Bearer ${r}`),s.removeHeader("cookie")),De(s,...i)}});e.use("/api/.refine",Oe,c)};import Ve from"path";var Z=(e,t)=>{e.get("/open-in-editor/*",(r,o)=>{let{line:c,column:s}=r.query,i=r.path.replace("/open-in-editor",""),n=`vscode://file/${Ve.join(t,i)}?${c?`line=${c}`:""}${s?`&column=${s}`:""}`;o.redirect(n)})};var kr=async({projectPath:e=process.cwd(),onError:t=()=>{process.exit(1)}}={})=>new Promise((r,o)=>{let c=Ue(),s=j(c,()=>{o(),t()}),i=L(s,()=>{o(),t()}),n=C();i.on("connection",a=>{h(a,m.DEVTOOLS_INIT,l=>{n.connectedApp?u(a,m.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=l.url,n.clientWs=a,i.clients.forEach(p=>{u(p,m.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),h(a,m.ACTIVITY,l=>{let p=n.activities.findIndex(g=>g.identifier===l.identifier),f={...l,createdAt:Date.now(),updatedAt:Date.now()};p>-1?(f.createdAt=n.activities[p].createdAt,n.activities[p]=f):n.activities.push(f),i.clients.forEach(g=>{u(g,m.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[f]})})}),h(a,m.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:l})=>{i.clients.forEach(p=>{u(p,m.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:l})})}),h(a,m.DEVTOOLS_INVALIDATE_QUERY,({queryKey:l})=>{i.clients.forEach(p=>{u(p,m.DEVTOOLS_INVALIDATE_QUERY_ACTION,{queryKey:l})})}),h(a,m.DEVTOOLS_LOGIN_SUCCESS,()=>{i.clients.forEach(l=>{u(l,m.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),a.on("close",(l,p)=>{n.clientWs&&(i.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],i.clients.forEach(f=>{u(f,m.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),x(i),I(c),Q(c,n),X(c),Z(c,e),process.on("SIGTERM",()=>{o()})});export{kr as server};
//# sourceMappingURL=index.mjs.map