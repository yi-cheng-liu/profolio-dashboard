import p from"camelcase";import*as y from"gql-query-builder";import C from"graphql-tag";import{singular as q}from"pluralize";import g from"camelcase";import*as O from"gql-query-builder";import S from"lodash/set";import{singular as b}from"pluralize";import{visit as F}from"graphql";var _=i=>{var r,n;return(n=(r=i==null?void 0:i.selectionSet)==null?void 0:r.selections)==null?void 0:n.find(e=>e.kind==="Field"&&e.name.value==="nodes")},w=i=>{let r=[],n=!0,e=0,t=!1;return F(i,{Field:{enter(s){if(n){n=!1;let u=_(s)??s;if(typeof u.selectionSet>"u")throw new Error("Operation must have a selection set");return u.selectionSet}r.push(`${e>0?"  ".repeat(t?e:e-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(e++,t=!0)},leave(s){s.selectionSet&&(e--,r.push(`${"  ".repeat(e)}}`),t=!1)}}}),r.join(`
`).trim()},L=i=>{let r=!1;return F(i,{OperationDefinition:{enter(n){n.operation==="mutation"&&(r=!0)}}}),r};var M=(i,{callback:r,params:n,meta:e},t)=>{let s={created:I,updated:E,deleted:P},{resource:o,filters:u,subscriptionType:l,id:a,ids:d}=n??{},f=s[t],{operation:c,query:v,variables:R,operationName:Q}=f({ids:d,id:a,resource:o,filters:u,meta:e,subscriptionType:l}),N=V=>{r(V.data[c])};return i.subscribe({query:v,variables:R,operationName:Q},{next:N,error:console.error,complete:()=>null})},D={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},k=(i,r)=>{if(i==="contains")return{iLike:`%${r}%`};if(i==="ncontains")return{notILike:`%${r}%`};if(i==="containss")return{like:`%${r}%`};if(i==="ncontainss")return{notLike:`%${r}%`};if(i==="startswith")return{iLike:`${r}%`};if(i==="nstartswith")return{notILike:`${r}%`};if(i==="startswiths")return{like:`${r}%`};if(i==="nstartswiths")return{notLike:`${r}%`};if(i==="endswith")return{iLike:`%${r}`};if(i==="nendswith")return{notILike:`%${r}`};if(i==="endswiths")return{like:`%${r}`};if(i==="nendswiths")return{notLike:`%${r}`};if(i==="null")return{is:null};if(i==="nnull")return{isNot:null};if(i==="between"){if(!Array.isArray(r))throw new Error("Between operator requires an array");return r.length!==2?{}:{between:{lower:r[0],upper:r[1]}}}if(i==="nbetween"){if(!Array.isArray(r))throw new Error("NBetween operator requires an array");return r.length!==2?{}:{notBetween:{lower:r[0],upper:r[1]}}}return{[D[i]]:r}},$=i=>{let r={};return i.filter(n=>Array.isArray(n.value)&&n.value.length===0?!1:!!n.value).map(n=>n.operator==="and"||n.operator==="or"?S(r,n.operator,[$(n.value)]):"field"in n?S(r,n.field,k(n.operator,n.value)):{}),r},h=i=>i.map(r=>({field:r.field,direction:r.order.toUpperCase()})),B=i=>{if(i.mode==="off")return{limit:2147483647};if(i.mode==="server"&&!(!i.current||!i.pageSize))return{limit:i.pageSize,offset:(i.current-1)*i.pageSize}},I=({resource:i,filters:r,meta:n})=>{let e=(n==null?void 0:n.gqlQuery)??(n==null?void 0:n.gqlMutation);if(e){let l=g(b(i),{pascalCase:!0}),a=`Created${l}`,d=`created${l}`,f=`
            subscription ${a}($input: Create${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                    ${w(e)}
                }
            }
        `,c={};return r&&(c.input={filter:$(r.filter(v=>!v.field.includes(".")))}),{query:f,variables:c,operation:d,operationName:a}}let t=`created${g(b(i),{pascalCase:!0})}`,s={};r&&(s.input={type:g(`create_${b(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(r.filter(l=>!l.field.includes(".")))}});let{query:o,variables:u}=O.subscription({operation:t,fields:n.fields,variables:s});return{query:o,variables:u,operation:t}},E=({id:i,resource:r,filters:n,meta:e})=>{let t=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(t){let a=g(b(r),{pascalCase:!0}),d=`Updated${a}`,f=`updatedOne${a}`,c=`
            subscription ${d}($input: UpdateOne${a}SubscriptionFilterInput) {
                ${f}(input: $input) {
                   ${w(t)}
                }
            }
        `,v={};return n&&(v.input={filter:$(n.filter(R=>!R.field.includes(".")))}),i&&(v.input={filter:{id:{eq:i}}}),{query:c,variables:v,operation:f,operationName:d}}let s=`updatedOne${g(b(r),{pascalCase:!0})}`,o={};n&&(o.input={type:g(`update_one_${b(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(n.filter(a=>!a.field.includes(".")))}}),i&&(o.input={type:g(`update_one_${b(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:i}}}});let{query:u,variables:l}=O.subscription({operation:s,fields:e.fields,variables:o});return{query:u,variables:l,operation:s}},P=({resource:i,filters:r,meta:n})=>{if(n!=null&&n.gqlQuery){let u=g(b(i),{pascalCase:!0}),l=`Deleted${u}`,a=`deletedOne${u}`,d=`
            subscription ${l}($input: DeleteOne${u}SubscriptionFilterInput) {
                ${a}(input: $input) {
                    id
                }
            }
        `,f={};return r&&(f.input={filter:$(r.filter(c=>!c.field.includes(".")))}),{query:d,variables:f,operation:a,operationName:l}}let e=`deletedOne${g(b(i),{pascalCase:!0})}`,t={};r&&(t.input={type:g(`delete_one_${b(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(r.filter(u=>!u.field.includes(".")))}});let{query:s,variables:o}=O.subscription({operation:e,fields:n.fields.filter(u=>typeof u!="object"),variables:t});return{query:s,variables:o,operation:e}};var A=i=>({getList:async({resource:r,pagination:n,sorters:e,filters:t,meta:s})=>{let o=p(r),u=B(n||{}),l={},a,d;if(s!=null&&s.gqlQuery)a=s==null?void 0:s.gqlQuery,d={filter:t?$(t):{},sorting:e?h(e):[],paging:u};else{t&&(l.filter={type:p(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:$(t)}),e&&(l.sorting={type:p(`${q(r)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:h(e)}),u&&(l.paging={type:"OffsetPaging",required:!0,value:u});let c=y.query({operation:o,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:l});a=c.query,d=c.variables}let f=await i.request(a,d);return{data:f[o].nodes,total:f[o].totalCount}},getMany:async({resource:r,ids:n,meta:e})=>{let t=p(r);if(e!=null&&e.gqlQuery)return{data:(await i.request(e.gqlQuery,{filter:{id:{in:n}}}))[t].nodes};let{query:s,variables:o}=y.query({operation:t,fields:[{nodes:(e==null?void 0:e.fields)||["id"]}],variables:{filter:{type:p(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});return{data:(await i.request(s,o))[t].nodes}},create:async({resource:r,variables:n,meta:e})=>{let t=`createOne${p(q(r),{pascalCase:!0})}`,s=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(s)return{data:(await i.request(s,{input:{[p(q(r))]:n}}))[t]};let{query:o,variables:u}=y.mutation({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateOne${p(q(r),{pascalCase:!0})}Input`,required:!0,value:{[p(q(r))]:n}}}});return{data:(await i.request(o,u))[t]}},createMany:async({resource:r,variables:n,meta:e})=>{let s=`createMany${p(r,{pascalCase:!0})}`,o=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(o)return{data:(await i.request(o,{input:{[p(r)]:n}}))[s]};let{query:u,variables:l}=y.mutation({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateMany${p(r,{pascalCase:!0})}Input`,required:!0,value:{[p(r)]:n}}}});return{data:(await i.request(u,l))[s]}},update:async({resource:r,id:n,variables:e,meta:t})=>{let s=`updateOne${p(q(r),{pascalCase:!0})}`,o=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(o)return{data:(await i.request(o,{input:{id:n,update:e}}))[s]};let{query:u,variables:l}=y.mutation({operation:s,fields:(t==null?void 0:t.fields)||["id"],variables:{input:{type:`UpdateOne${p(q(r),{pascalCase:!0})}Input`,required:!0,value:{id:n,update:e}}}});return{data:(await i.request(u,l))[s]}},updateMany:async({resource:r,ids:n,variables:e,meta:t})=>{let s=p(r,{pascalCase:!0}),o=`updateMany${s}`,u=C`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${o}(input: $input) {
                        updatedCount
                    }
                }
            `;await i.request(u,{input:{filter:{id:{in:n}},update:e}});let l=p(r),a,d;if(t!=null&&t.fields){let c=y.query({operation:l,fields:[{nodes:(t==null?void 0:t.fields)||["id"]}],variables:{filter:{type:p(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});a=c.query,d=c.variables}else a=C`
                    query GetMany${s}($filter: ${q(s)}Filter!) {
                        ${l}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,d={filter:{id:{in:n}}};return{data:(await i.request(a,d))[l].nodes}},getOne:async({resource:r,id:n,meta:e})=>{let t=p(q(r)),s=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(s){let a=s,d={id:n};if(L(s)){let c=w(s);a=C`
                        query Get${p(q(r),{pascalCase:!0})}($id: ID!) {
                            ${t}(id: $id) {
                            ${c}
                            }
                        }
                    `}return{data:(await i.request(a,d))[t]}}let{query:o,variables:u}=y.query({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{id:{type:"ID",required:!0,value:n}}});return{data:(await i.request(o,u))[t]}},deleteOne:async({resource:r,id:n,meta:e})=>{let t=p(q(r),{pascalCase:!0}),s=`deleteOne${t}`;if(e!=null&&e.gqlMutation)return{data:(await i.request(e.gqlMutation,{input:{id:n}}))[s]};let o=C`
                    mutation DeleteOne${t}($input: DeleteOne${t}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await i.request(o,{input:{id:n}}))[s]}},deleteMany:async({resource:r,ids:n})=>{let e=p(r,{pascalCase:!0}),t=`deleteMany${e}`,s=C`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${t}(input: $input) {
                        deletedCount
                    }
                }
            `,o={input:{filter:{id:{in:n}}}};return await i.request(s,o),{data:[]}},getApiUrl:()=>i.url,custom:async({url:r,method:n,headers:e,meta:t})=>{r&&i.setEndpoint(r),e&&i.setHeaders(e);let s=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(s)return{data:await i.request(s,(t==null?void 0:t.variables)??{})};if(t!=null&&t.rawQuery)return{data:await i.request(t.rawQuery,t.variables)};if(t){if(t.operation){let o,u;if(n==="get"){let a=y.query({operation:t.operation,fields:t.fields,variables:t.variables});o=a.query,u=a.variables}else{let a=y.mutation({operation:t.operation,fields:t.fields,variables:t.variables});o=a.query,u=a.variables}return{data:(await i.request(o,u))[t.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),x=A;var te=i=>{let r=(n,e,t,s,o,u,l)=>{let a=M(n,{callback:e,params:t,meta:s},o);l.push(a)};return{subscribe({callback:n,params:e,meta:t}){let{resource:s,subscriptionType:o}=e??{};if(!t||!o||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let u=[];return(e==null?void 0:e.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(a=>r(i,n,e,t,a,s,u)),(e==null?void 0:e.subscriptionType)==="useOne"&&r(i,n,e,t,"updated",s,u),()=>{u.forEach(a=>a())}},unsubscribe(n){n()}}};import*as pe from"gql-query-builder";import{batchRequests as ce,gql as fe,GraphQLClient as qe,rawRequest as ye,request as ge,resolveRequestDocument as be}from"graphql-request";import*as $e from"graphql-ws";var se=x;export{qe as GraphQLClient,ce as batchRequests,se as default,fe as gql,$e as graphqlWS,te as liveProvider,pe as qqlQueryBuilder,ye as rawRequest,ge as request,be as resolveRequestDocument};
//# sourceMappingURL=index.mjs.map