import type { ASTPath, Collection, ImportDeclaration, JSCodeshift, JSXAttribute, JSXElement, JSXExpressionContainer } from "jscodeshift";
export declare const wrapElement: (j: JSCodeshift, source: Collection, element: ASTPath<JSXElement>, wrapper: string, wrapperAttributes?: JSXAttribute[]) => ASTPath<JSXElement>;
export declare const wrapChildren: (j: JSCodeshift, source: Collection, element: ASTPath<JSXElement>, wrapper: string, wrapperAttributes?: JSXAttribute[]) => ASTPath<JSXElement>;
export declare const addAttributeIfNotExist: (j: JSCodeshift, source: Collection, element: ASTPath<JSXElement>, attributeIdentifier: string, attributeValue?: JSXElement | JSXExpressionContainer) => void;
export declare const addOrUpdateImports: (j: JSCodeshift, source: Collection, importPath: string, importIdentifierNames: string[], insertFunc?: (sourceDeclaration: Collection<ImportDeclaration>, targetDeclaration: ImportDeclaration) => void, isDefault?: boolean) => void;
export declare const addOrUpdateNamelessImport: (j: JSCodeshift, source: Collection, importPath: string, insertFunc: (sourceDeclaration: Collection<ImportDeclaration>, targetDeclaration: ImportDeclaration) => void) => void;
export declare const removeImportIfExists: (j: JSCodeshift, source: Collection, importPath: string, importIdentifierName: string) => void;
//# sourceMappingURL=index.d.ts.map