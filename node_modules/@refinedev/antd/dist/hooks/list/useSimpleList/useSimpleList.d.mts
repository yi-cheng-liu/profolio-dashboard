import { type ListProps, type FormProps } from "antd";
import { type BaseRecord, type CrudFilters, type HttpError, type useTableProps as useTablePropsCore, type useTableReturnType } from "@refinedev/core";
export type useSimpleListProps<TQueryFnData, TError, TSearchVariables, TData> = useTablePropsCore<TQueryFnData, TError, TData> & {
    onSearch?: (data: TSearchVariables) => CrudFilters | Promise<CrudFilters>;
};
export type useSimpleListReturnType<TQueryFnData extends BaseRecord = BaseRecord, TSearchVariables = unknown, TData extends BaseRecord = TQueryFnData> = Omit<useTableReturnType<TData>, "tableQueryResult"> & {
    listProps: ListProps<TData>;
    queryResult: useTableReturnType["tableQueryResult"];
    searchFormProps: FormProps<TSearchVariables>;
};
/**
 * By using `useSimpleList` you get props for your records from API in accordance with Ant Design {@link https://ant.design/components/list/ `<List>`} component.
 * All features such as pagination, sorting come out of the box.
 *
 * @see {@link https://refine.dev/docs/api-reference/antd/hooks/list/useSimpleList} for more details.
 *
 * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}
 * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}
 * @typeParam TSearchVariables - Antd form values
 * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`
 *
 */
export declare const useSimpleList: <TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown, TData extends BaseRecord = TQueryFnData>({ resource, initialCurrent, initialPageSize, pagination, hasPagination, initialSorter, permanentSorter, initialFilter, permanentFilter, defaultSetFilterBehavior, filters: filtersFromProp, sorters: sortersFromProp, onSearch, queryOptions, syncWithLocation, successNotification, errorNotification, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, }?: useSimpleListProps<TQueryFnData, TError, TSearchVariables, TData>) => useSimpleListReturnType<TData, TSearchVariables>;
//# sourceMappingURL=useSimpleList.d.ts.map