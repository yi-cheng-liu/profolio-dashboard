import type { FormInstance, FormProps, ModalProps } from "antd";
import { type HttpError, type UseFormProps as UseFormPropsCore, type BaseRecord, type LiveModeProps, type BaseKey, type FormWithSyncWithLocationParams } from "@refinedev/core";
import { type UseFormProps, type UseFormReturnType } from "../useForm";
export type useModalFormFromSFReturnType<TResponse, TVariables> = {
    open: boolean;
    form: FormInstance<TVariables>;
    show: (id?: BaseKey) => void;
    close: () => void;
    modalProps: ModalProps;
    formProps: FormProps<TVariables>;
    formLoading: boolean;
    defaultFormValuesLoading: boolean;
    formValues: {};
    initialValues: {};
    formResult: undefined;
    submit: (values?: TVariables) => Promise<TResponse>;
    /** @deprecated Please use `open` instead. */
    visible: boolean;
};
type useModalFormConfig = {
    action: "show" | "edit" | "create" | "clone";
};
export type UseModalFormReturnType<TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables = {}, TData extends BaseRecord = TQueryFnData, TResponse extends BaseRecord = TData, TResponseError extends HttpError = TError> = Omit<UseFormReturnType<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>, "saveButtonProps" | "deleteButtonProps"> & useModalFormFromSFReturnType<TResponse, TVariables>;
export type UseModalFormProps<TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables = {}, TData extends BaseRecord = TQueryFnData, TResponse extends BaseRecord = TData, TResponseError extends HttpError = TError> = UseFormPropsCore<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError> & UseFormProps<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError> & useModalFormConfig & LiveModeProps & FormWithSyncWithLocationParams & {
    defaultVisible?: boolean;
    autoSubmitClose?: boolean;
    autoResetForm?: boolean;
};
/**
 * `useModalForm` hook allows you to manage a form within a modal. It returns Ant Design {@link https://ant.design/components/form/ Form} and {@link https://ant.design/components/modal/ Modal} components props.
 *
 * @see {@link https://refine.dev/docs/api-reference/antd/hooks/form/useModalForm} for more details.
 *
 * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}
 * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences/#httperror `HttpError`}
 * @typeParam TVariables - Values for params. default `{}`
 *
 *
 */
export declare const useModalForm: <TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables = {}, TData extends BaseRecord = TQueryFnData, TResponse extends BaseRecord = TData, TResponseError extends HttpError = TError>({ syncWithLocation, defaultVisible, autoSubmitClose, autoResetForm, autoSave, invalidates, ...rest }: UseModalFormProps<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>) => UseModalFormReturnType<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>;
export {};
//# sourceMappingURL=useModalForm.d.ts.map