import { type FormProps, type TableProps } from "antd";
import { type BaseRecord, type CrudFilters, type HttpError, type useTableProps as useTablePropsCore, type useTableReturnType as useTableCoreReturnType } from "@refinedev/core";
export type useTableProps<TQueryFnData, TError, TSearchVariables, TData> = useTablePropsCore<TQueryFnData, TError, TData> & {
    onSearch?: (data: TSearchVariables) => CrudFilters | Promise<CrudFilters>;
};
export type useTableReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown> = useTableCoreReturnType<TData, TError> & {
    searchFormProps: FormProps<TSearchVariables>;
    tableProps: TableProps<TData>;
};
/**
 * By using useTable, you are able to get properties that are compatible with
 * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.
 * All features such as sorting, filtering and pagination comes as out of box.
 *
 * @see {@link https://refine.dev/docs/api-reference/antd/hooks/table/useTable/} for more details.
 *
 * @typeParam TQueryFnData - Result data returned by the query function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}
 * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#httperror `HttpError`}
 * @typeParam TSearchVariables - Values for search params
 * @typeParam TData - Result data returned by the `select` function. Extends {@link https://refine.dev/docs/api-reference/core/interfaceReferences#baserecord `BaseRecord`}. Defaults to `TQueryFnData`
 *
 */
export declare const useTable: <TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown, TData extends BaseRecord = TQueryFnData>({ onSearch, initialCurrent, initialPageSize, hasPagination, pagination, initialSorter, permanentSorter, initialFilter, permanentFilter, defaultSetFilterBehavior, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation, resource, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, }?: useTableProps<TQueryFnData, TError, TSearchVariables, TData>) => useTableReturnType<TData, TError, TSearchVariables>;
//# sourceMappingURL=useTable.d.ts.map