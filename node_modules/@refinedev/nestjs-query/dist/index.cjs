var E=Object.create;var h=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var U=(t,e)=>{for(var n in e)h(t,n,{get:e[n],enumerable:!0})},x=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of A(e))!T.call(t,i)&&i!==n&&h(t,i,{get:()=>e[i],enumerable:!(r=P(e,i))||r.enumerable});return t};var w=(t,e,n)=>(n=t!=null?E(G(t)):{},x(e||!t||!t.__esModule?h(n,"default",{value:t,enumerable:!0}):n,t)),j=t=>x(h({},"__esModule",{value:!0}),t);var ee={};U(ee,{GraphQLClient:()=>y.GraphQLClient,batchRequests:()=>y.batchRequests,default:()=>m,gql:()=>y.gql,graphqlWS:()=>te,liveProvider:()=>Z,qqlQueryBuilder:()=>re,rawRequest:()=>y.rawRequest,request:()=>y.request,resolveRequestDocument:()=>y.resolveRequestDocument});module.exports=j(ee);var p=w(require("camelcase")),$=w(require("gql-query-builder")),O=w(require("graphql-tag")),f=require("pluralize");var g=w(require("camelcase")),F=w(require("gql-query-builder")),M=w(require("lodash/set")),b=require("pluralize");var S=require("graphql"),z=t=>{var e,n;return(n=(e=t==null?void 0:t.selectionSet)==null?void 0:e.selections)==null?void 0:n.find(r=>r.kind==="Field"&&r.name.value==="nodes")},R=t=>{let e=[],n=!0,r=0,i=!1;return(0,S.visit)(t,{Field:{enter(s){if(n){n=!1;let u=z(s)??s;if(typeof u.selectionSet>"u")throw new Error("Operation must have a selection set");return u.selectionSet}e.push(`${r>0?"  ".repeat(i?r:r-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(r++,i=!0)},leave(s){s.selectionSet&&(r--,e.push(`${"  ".repeat(r)}}`),i=!1)}}}),e.join(`
`).trim()},Q=t=>{let e=!1;return(0,S.visit)(t,{OperationDefinition:{enter(n){n.operation==="mutation"&&(e=!0)}}}),e};var N=(t,{callback:e,params:n,meta:r},i)=>{let s={created:J,updated:K,deleted:X},{resource:o,filters:u,subscriptionType:l,id:a,ids:d}=n??{},q=s[i],{operation:c,query:C,variables:L,operationName:D}=q({ids:d,id:a,resource:o,filters:u,meta:r,subscriptionType:l}),k=I=>{e(I.data[c])};return t.subscribe({query:C,variables:L,operationName:D},{next:k,error:console.error,complete:()=>null})},W={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},H=(t,e)=>{if(t==="contains")return{iLike:`%${e}%`};if(t==="ncontains")return{notILike:`%${e}%`};if(t==="containss")return{like:`%${e}%`};if(t==="ncontainss")return{notLike:`%${e}%`};if(t==="startswith")return{iLike:`${e}%`};if(t==="nstartswith")return{notILike:`${e}%`};if(t==="startswiths")return{like:`${e}%`};if(t==="nstartswiths")return{notLike:`${e}%`};if(t==="endswith")return{iLike:`%${e}`};if(t==="nendswith")return{notILike:`%${e}`};if(t==="endswiths")return{like:`%${e}`};if(t==="nendswiths")return{notLike:`%${e}`};if(t==="null")return{is:null};if(t==="nnull")return{isNot:null};if(t==="between"){if(!Array.isArray(e))throw new Error("Between operator requires an array");return e.length!==2?{}:{between:{lower:e[0],upper:e[1]}}}if(t==="nbetween"){if(!Array.isArray(e))throw new Error("NBetween operator requires an array");return e.length!==2?{}:{notBetween:{lower:e[0],upper:e[1]}}}return{[W[t]]:e}},v=t=>{let e={};return t.filter(n=>Array.isArray(n.value)&&n.value.length===0?!1:!!n.value).map(n=>n.operator==="and"||n.operator==="or"?(0,M.default)(e,n.operator,[v(n.value)]):"field"in n?(0,M.default)(e,n.field,H(n.operator,n.value)):{}),e},B=t=>t.map(e=>({field:e.field,direction:e.order.toUpperCase()})),V=t=>{if(t.mode==="off")return{limit:2147483647};if(t.mode==="server"&&!(!t.current||!t.pageSize))return{limit:t.pageSize,offset:(t.current-1)*t.pageSize}},J=({resource:t,filters:e,meta:n})=>{let r=(n==null?void 0:n.gqlQuery)??(n==null?void 0:n.gqlMutation);if(r){let l=(0,g.default)((0,b.singular)(t),{pascalCase:!0}),a=`Created${l}`,d=`created${l}`,q=`
            subscription ${a}($input: Create${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                    ${R(r)}
                }
            }
        `,c={};return e&&(c.input={filter:v(e.filter(C=>!C.field.includes(".")))}),{query:q,variables:c,operation:d,operationName:a}}let i=`created${(0,g.default)((0,b.singular)(t),{pascalCase:!0})}`,s={};e&&(s.input={type:(0,g.default)(`create_${(0,b.singular)(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(e.filter(l=>!l.field.includes(".")))}});let{query:o,variables:u}=F.subscription({operation:i,fields:n.fields,variables:s});return{query:o,variables:u,operation:i}},K=({id:t,resource:e,filters:n,meta:r})=>{let i=(r==null?void 0:r.gqlQuery)??(r==null?void 0:r.gqlMutation);if(i){let a=(0,g.default)((0,b.singular)(e),{pascalCase:!0}),d=`Updated${a}`,q=`updatedOne${a}`,c=`
            subscription ${d}($input: UpdateOne${a}SubscriptionFilterInput) {
                ${q}(input: $input) {
                   ${R(i)}
                }
            }
        `,C={};return n&&(C.input={filter:v(n.filter(L=>!L.field.includes(".")))}),t&&(C.input={filter:{id:{eq:t}}}),{query:c,variables:C,operation:q,operationName:d}}let s=`updatedOne${(0,g.default)((0,b.singular)(e),{pascalCase:!0})}`,o={};n&&(o.input={type:(0,g.default)(`update_one_${(0,b.singular)(e)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(n.filter(a=>!a.field.includes(".")))}}),t&&(o.input={type:(0,g.default)(`update_one_${(0,b.singular)(e)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:t}}}});let{query:u,variables:l}=F.subscription({operation:s,fields:r.fields,variables:o});return{query:u,variables:l,operation:s}},X=({resource:t,filters:e,meta:n})=>{if(n!=null&&n.gqlQuery){let u=(0,g.default)((0,b.singular)(t),{pascalCase:!0}),l=`Deleted${u}`,a=`deletedOne${u}`,d=`
            subscription ${l}($input: DeleteOne${u}SubscriptionFilterInput) {
                ${a}(input: $input) {
                    id
                }
            }
        `,q={};return e&&(q.input={filter:v(e.filter(c=>!c.field.includes(".")))}),{query:d,variables:q,operation:a,operationName:l}}let r=`deletedOne${(0,g.default)((0,b.singular)(t),{pascalCase:!0})}`,i={};e&&(i.input={type:(0,g.default)(`delete_one_${(0,b.singular)(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(e.filter(u=>!u.field.includes(".")))}});let{query:s,variables:o}=F.subscription({operation:r,fields:n.fields.filter(u=>typeof u!="object"),variables:i});return{query:s,variables:o,operation:r}};var Y=t=>({getList:async({resource:e,pagination:n,sorters:r,filters:i,meta:s})=>{let o=(0,p.default)(e),u=V(n||{}),l={},a,d;if(s!=null&&s.gqlQuery)a=s==null?void 0:s.gqlQuery,d={filter:i?v(i):{},sorting:r?B(r):[],paging:u};else{i&&(l.filter={type:(0,p.default)(`${(0,f.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:v(i)}),r&&(l.sorting={type:(0,p.default)(`${(0,f.singular)(e)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:B(r)}),u&&(l.paging={type:"OffsetPaging",required:!0,value:u});let c=$.query({operation:o,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:l});a=c.query,d=c.variables}let q=await t.request(a,d);return{data:q[o].nodes,total:q[o].totalCount}},getMany:async({resource:e,ids:n,meta:r})=>{let i=(0,p.default)(e);if(r!=null&&r.gqlQuery)return{data:(await t.request(r.gqlQuery,{filter:{id:{in:n}}}))[i].nodes};let{query:s,variables:o}=$.query({operation:i,fields:[{nodes:(r==null?void 0:r.fields)||["id"]}],variables:{filter:{type:(0,p.default)(`${(0,f.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});return{data:(await t.request(s,o))[i].nodes}},create:async({resource:e,variables:n,meta:r})=>{let i=`createOne${(0,p.default)((0,f.singular)(e),{pascalCase:!0})}`,s=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(s)return{data:(await t.request(s,{input:{[(0,p.default)((0,f.singular)(e))]:n}}))[i]};let{query:o,variables:u}=$.mutation({operation:i,fields:(r==null?void 0:r.fields)||["id"],variables:{input:{type:`CreateOne${(0,p.default)((0,f.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{[(0,p.default)((0,f.singular)(e))]:n}}}});return{data:(await t.request(o,u))[i]}},createMany:async({resource:e,variables:n,meta:r})=>{let s=`createMany${(0,p.default)(e,{pascalCase:!0})}`,o=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(o)return{data:(await t.request(o,{input:{[(0,p.default)(e)]:n}}))[s]};let{query:u,variables:l}=$.mutation({operation:s,fields:(r==null?void 0:r.fields)||["id"],variables:{input:{type:`CreateMany${(0,p.default)(e,{pascalCase:!0})}Input`,required:!0,value:{[(0,p.default)(e)]:n}}}});return{data:(await t.request(u,l))[s]}},update:async({resource:e,id:n,variables:r,meta:i})=>{let s=`updateOne${(0,p.default)((0,f.singular)(e),{pascalCase:!0})}`,o=(i==null?void 0:i.gqlMutation)??(i==null?void 0:i.gqlQuery);if(o)return{data:(await t.request(o,{input:{id:n,update:r}}))[s]};let{query:u,variables:l}=$.mutation({operation:s,fields:(i==null?void 0:i.fields)||["id"],variables:{input:{type:`UpdateOne${(0,p.default)((0,f.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:n,update:r}}}});return{data:(await t.request(u,l))[s]}},updateMany:async({resource:e,ids:n,variables:r,meta:i})=>{let s=(0,p.default)(e,{pascalCase:!0}),o=`updateMany${s}`,u=O.default`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${o}(input: $input) {
                        updatedCount
                    }
                }
            `;await t.request(u,{input:{filter:{id:{in:n}},update:r}});let l=(0,p.default)(e),a,d;if(i!=null&&i.fields){let c=$.query({operation:l,fields:[{nodes:(i==null?void 0:i.fields)||["id"]}],variables:{filter:{type:(0,p.default)(`${(0,f.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});a=c.query,d=c.variables}else a=O.default`
                    query GetMany${s}($filter: ${(0,f.singular)(s)}Filter!) {
                        ${l}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,d={filter:{id:{in:n}}};return{data:(await t.request(a,d))[l].nodes}},getOne:async({resource:e,id:n,meta:r})=>{let i=(0,p.default)((0,f.singular)(e)),s=(r==null?void 0:r.gqlQuery)??(r==null?void 0:r.gqlMutation);if(s){let a=s,d={id:n};if(Q(s)){let c=R(s);a=O.default`
                        query Get${(0,p.default)((0,f.singular)(e),{pascalCase:!0})}($id: ID!) {
                            ${i}(id: $id) {
                            ${c}
                            }
                        }
                    `}return{data:(await t.request(a,d))[i]}}let{query:o,variables:u}=$.query({operation:i,fields:(r==null?void 0:r.fields)||["id"],variables:{id:{type:"ID",required:!0,value:n}}});return{data:(await t.request(o,u))[i]}},deleteOne:async({resource:e,id:n,meta:r})=>{let i=(0,p.default)((0,f.singular)(e),{pascalCase:!0}),s=`deleteOne${i}`;if(r!=null&&r.gqlMutation)return{data:(await t.request(r.gqlMutation,{input:{id:n}}))[s]};let o=O.default`
                    mutation DeleteOne${i}($input: DeleteOne${i}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await t.request(o,{input:{id:n}}))[s]}},deleteMany:async({resource:e,ids:n})=>{let r=(0,p.default)(e,{pascalCase:!0}),i=`deleteMany${r}`,s=O.default`
                mutation DeleteMany${r}($input: DeleteMany${r}Input!) {
                    ${i}(input: $input) {
                        deletedCount
                    }
                }
            `,o={input:{filter:{id:{in:n}}}};return await t.request(s,o),{data:[]}},getApiUrl:()=>t.url,custom:async({url:e,method:n,headers:r,meta:i})=>{e&&t.setEndpoint(e),r&&t.setHeaders(r);let s=(i==null?void 0:i.gqlMutation)??(i==null?void 0:i.gqlQuery);if(s)return{data:await t.request(s,(i==null?void 0:i.variables)??{})};if(i!=null&&i.rawQuery)return{data:await t.request(i.rawQuery,i.variables)};if(i){if(i.operation){let o,u;if(n==="get"){let a=$.query({operation:i.operation,fields:i.fields,variables:i.variables});o=a.query,u=a.variables}else{let a=$.mutation({operation:i.operation,fields:i.fields,variables:i.variables});o=a.query,u=a.variables}return{data:(await t.request(o,u))[i.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),_=Y;var Z=t=>{let e=(n,r,i,s,o,u,l)=>{let a=N(n,{callback:r,params:i,meta:s},o);l.push(a)};return{subscribe({callback:n,params:r,meta:i}){let{resource:s,subscriptionType:o}=r??{};if(!i||!o||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let u=[];return(r==null?void 0:r.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(a=>e(t,n,r,i,a,s,u)),(r==null?void 0:r.subscriptionType)==="useOne"&&e(t,n,r,i,"updated",s,u),()=>{u.forEach(a=>a())}},unsubscribe(n){n()}}};var re=w(require("gql-query-builder")),y=require("graphql-request"),te=w(require("graphql-ws")),m=_;
//# sourceMappingURL=index.cjs.map