import Conf from "conf";
import type { RefinePackageInstalledVersionData } from "@definitions/package";
export interface Store {
    key: string;
    lastUpdated: number;
    packages: RefinePackageInstalledVersionData[];
}
export declare const store: Conf<Store>;
export declare const updateNotifier: () => Promise<void>;
/**
 * @returns `null` It's mean something went wrong while checking key or cache. so we should not update cache.
 * @returns `boolean` if cache should be updated or not
 *   if cache is expired or key is invalid, update cache in background and not show warning
 */
export declare const shouldUpdatePackagesCache: () => Promise<boolean | null>;
/**
 * @returns `null` something went wrong
 * @returns `packages` if packages updated
 */
export declare const updatePackagesCache: () => Promise<RefinePackageInstalledVersionData[] | null>;
export declare const isPackagesCacheExpired: () => boolean;
/**
 * @returns `true` if key is valid
 * @returns `false` if key is invalid
 * @returns `null` if there is an error
 */
export declare const validateKey: () => Promise<boolean | null>;
/**
 * @returns `null` if there is an error
 * @returns `string` if key is generated
 */
export declare const generateKeyFromPackages: () => Promise<string | null>;
export declare const isUpdateNotifierDisabled: () => boolean;
//# sourceMappingURL=index.d.ts.map