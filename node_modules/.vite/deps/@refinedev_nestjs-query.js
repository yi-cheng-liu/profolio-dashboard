import {
  require_pluralize
} from "./chunk-2F4BPO6M.js";
import {
  lib_default
} from "./chunk-247QJHEQ.js";
import {
  lib_exports
} from "./chunk-GBPIZBDE.js";
import {
  parse,
  print,
  visit
} from "./chunk-GCQU3AVC.js";
import "./chunk-SNOW6QPT.js";
import {
  __commonJS,
  __toESM
} from "./chunk-GFT2G5UO.js";

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports, module) {
    "use strict";
    var UPPERCASE = /[\p{Lu}]/u;
    var LOWERCASE = /[\p{Ll}]/u;
    var LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
    var IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
    var SEPARATORS = /[_.\- ]+/;
    var LEADING_SEPARATORS = new RegExp("^" + SEPARATORS.source);
    var SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, "gu");
    var NUMBERS_AND_IDENTIFIER = new RegExp("\\d+" + IDENTIFIER.source, "gu");
    var preserveCamelCase = (string, toLowerCase, toUpperCase) => {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < string.length; i++) {
        const character = string[i];
        if (isLastCharLower && UPPERCASE.test(character)) {
          string = string.slice(0, i) + "-" + string.slice(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
          string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
        }
      }
      return string;
    };
    var preserveConsecutiveUppercase = (input, toLowerCase) => {
      LEADING_CAPITAL.lastIndex = 0;
      return input.replace(LEADING_CAPITAL, (m1) => toLowerCase(m1));
    };
    var postProcess = (input, toUpperCase) => {
      SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
      NUMBERS_AND_IDENTIFIER.lastIndex = 0;
      return input.replace(SEPARATORS_AND_IDENTIFIER, (_2, identifier) => toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m) => toUpperCase(m));
    };
    var camelCase = (input, options) => {
      if (!(typeof input === "string" || Array.isArray(input))) {
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      options = {
        pascalCase: false,
        preserveConsecutiveUppercase: false,
        ...options
      };
      if (Array.isArray(input)) {
        input = input.map((x2) => x2.trim()).filter((x2) => x2.length).join("-");
      } else {
        input = input.trim();
      }
      if (input.length === 0) {
        return "";
      }
      const toLowerCase = options.locale === false ? (string) => string.toLowerCase() : (string) => string.toLocaleLowerCase(options.locale);
      const toUpperCase = options.locale === false ? (string) => string.toUpperCase() : (string) => string.toLocaleUpperCase(options.locale);
      if (input.length === 1) {
        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
      }
      const hasUpperCase = input !== toLowerCase(input);
      if (hasUpperCase) {
        input = preserveCamelCase(input, toLowerCase, toUpperCase);
      }
      input = input.replace(LEADING_SEPARATORS, "");
      if (options.preserveConsecutiveUppercase) {
        input = preserveConsecutiveUppercase(input, toLowerCase);
      } else {
        input = toLowerCase(input);
      }
      if (options.pascalCase) {
        input = toUpperCase(input.charAt(0)) + input.slice(1);
      }
      return postProcess(input, toUpperCase);
    };
    module.exports = camelCase;
    module.exports.default = camelCase;
  }
});

// node_modules/gql-query-builder/build/OperationType.js
var require_OperationType = __commonJS({
  "node_modules/gql-query-builder/build/OperationType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType;
    (function(OperationType2) {
      OperationType2["Mutation"] = "mutation";
      OperationType2["Query"] = "query";
      OperationType2["Subscription"] = "subscription";
    })(OperationType || (OperationType = {}));
    exports.default = OperationType;
  }
});

// node_modules/gql-query-builder/build/NestedField.js
var require_NestedField = __commonJS({
  "node_modules/gql-query-builder/build/NestedField.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNestedField = void 0;
    function isNestedField(object) {
      return typeof object === "object" && object.hasOwnProperty("operation") && object.hasOwnProperty("variables") && object.hasOwnProperty("fields") || typeof object === "object" && object.hasOwnProperty("operation") && object.hasOwnProperty("fragment") && object.hasOwnProperty("fields");
    }
    exports.isNestedField = isNestedField;
  }
});

// node_modules/gql-query-builder/build/Utils.js
var require_Utils = __commonJS({
  "node_modules/gql-query-builder/build/Utils.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p2 in s)
            if (Object.prototype.hasOwnProperty.call(s, p2))
              t[p2] = s[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var NestedField_1 = require_NestedField();
    var Utils = (
      /** @class */
      function() {
        function Utils2() {
        }
        Utils2.resolveVariables = function(operations) {
          var ret = {};
          for (var _i = 0, operations_1 = operations; _i < operations_1.length; _i++) {
            var _a = operations_1[_i], variables = _a.variables, fields = _a.fields;
            ret = __assign(__assign(__assign({}, ret), variables), fields && Utils2.getNestedVariables(fields) || {});
          }
          return ret;
        };
        Utils2.queryDataNameAndArgumentMap = function(variables) {
          return variables && Object.keys(variables).length ? "(".concat(Object.entries(variables).reduce(function(dataString, _a, i) {
            var key = _a[0], value = _a[1];
            return "".concat(dataString).concat(i !== 0 ? ", " : "").concat(value && value.name ? value.name : key, ": $").concat(key);
          }, ""), ")") : "";
        };
        Utils2.queryFieldsMap = function(fields) {
          var _this = this;
          return fields ? fields.map(function(field) {
            if ((0, NestedField_1.isNestedField)(field)) {
              return Utils2.queryNestedFieldMap(field);
            } else if (typeof field === "object") {
              var result_1 = "";
              Object.entries(field).forEach(function(_a, index, array) {
                var key = _a[0], values = _a[1];
                result_1 += "".concat(key, " ").concat(values.length > 0 ? "{ " + _this.queryFieldsMap(values) + " }" : "");
                if (index < array.length - 1) {
                  result_1 += ", ";
                }
              });
              return result_1;
            } else {
              return "".concat(field);
            }
          }).join(", ") : "";
        };
        Utils2.operationOrAlias = function(operation) {
          return typeof operation === "string" ? operation : "".concat(operation.alias, ": ").concat(operation.name);
        };
        Utils2.isFragment = function(field) {
          var _a;
          return (_a = (field === null || field === void 0 ? void 0 : field.fragment) === true) !== null && _a !== void 0 ? _a : false;
        };
        Utils2.operationOrFragment = function(field) {
          return Utils2.isFragment(field) ? field.operation : Utils2.operationOrAlias(field.operation);
        };
        Utils2.getFragment = function(field) {
          return Utils2.isFragment(field) ? "... on " : "";
        };
        Utils2.queryNestedFieldMap = function(field) {
          return "".concat(Utils2.getFragment(field)).concat(Utils2.operationOrFragment(field), " ").concat(this.isFragment(field) ? "" : this.queryDataNameAndArgumentMap(field.variables), " ").concat(field.fields.length > 0 ? "{ " + this.queryFieldsMap(field.fields) + " }" : "");
        };
        Utils2.queryVariablesMap = function(variables, fields) {
          var variablesMapped = {};
          var update = function(vars) {
            if (vars) {
              Object.keys(vars).map(function(key) {
                variablesMapped[key] = typeof vars[key] === "object" ? vars[key].value : vars[key];
              });
            }
          };
          update(variables);
          if (fields && typeof fields === "object") {
            update(Utils2.getNestedVariables(fields));
          }
          return variablesMapped;
        };
        Utils2.getNestedVariables = function(fields) {
          var variables = {};
          function getDeepestVariables(innerFields) {
            innerFields === null || innerFields === void 0 ? void 0 : innerFields.forEach(function(field) {
              if ((0, NestedField_1.isNestedField)(field)) {
                variables = __assign(__assign(__assign({}, field.variables), variables), field.fields && getDeepestVariables(field.fields));
              } else {
                if (typeof field === "object") {
                  for (var _i = 0, _a = Object.entries(field); _i < _a.length; _i++) {
                    var _b = _a[_i], value = _b[1];
                    getDeepestVariables(value);
                  }
                }
              }
            });
            return variables;
          }
          getDeepestVariables(fields);
          return variables;
        };
        Utils2.queryDataType = function(variable) {
          var type = "String";
          var value = typeof variable === "object" ? variable.value : variable;
          if ((variable === null || variable === void 0 ? void 0 : variable.type) != null) {
            type = variable.type;
          } else {
            var candidateValue = Array.isArray(value) ? value[0] : value;
            switch (typeof candidateValue) {
              case "object":
                type = "Object";
                break;
              case "boolean":
                type = "Boolean";
                break;
              case "number":
                type = candidateValue % 1 === 0 ? "Int" : "Float";
                break;
            }
          }
          if (typeof variable === "object") {
            if (variable.list === true) {
              type = "[".concat(type, "]");
            } else if (Array.isArray(variable.list)) {
              type = "[".concat(type).concat(variable.list[0] ? "!" : "", "]");
            }
            if (variable.required) {
              type += "!";
            }
          }
          return type;
        };
        return Utils2;
      }()
    );
    exports.default = Utils;
  }
});

// node_modules/gql-query-builder/build/adapters/DefaultAppSyncMutationAdapter.js
var require_DefaultAppSyncMutationAdapter = __commonJS({
  "node_modules/gql-query-builder/build/adapters/DefaultAppSyncMutationAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType_1 = require_OperationType();
    var Utils_1 = require_Utils();
    var DefaultAppSyncMutationAdapter = (
      /** @class */
      function() {
        function DefaultAppSyncMutationAdapter2(options) {
          if (Array.isArray(options)) {
            this.variables = Utils_1.default.resolveVariables(options);
          } else {
            this.variables = options.variables;
            this.fields = options.fields;
            this.operation = options.operation;
          }
        }
        DefaultAppSyncMutationAdapter2.prototype.mutationBuilder = function() {
          return this.operationWrapperTemplate(this.variables, this.operationTemplate(this.operation));
        };
        DefaultAppSyncMutationAdapter2.prototype.mutationsBuilder = function(mutations) {
          var _this = this;
          var content = mutations.map(function(opts) {
            _this.operation = opts.operation;
            _this.variables = opts.variables;
            _this.fields = opts.fields;
            return _this.operationTemplate(opts.operation);
          });
          return this.operationWrapperTemplate(Utils_1.default.resolveVariables(mutations), content.join("\n  "));
        };
        DefaultAppSyncMutationAdapter2.prototype.queryDataNameAndArgumentMap = function() {
          return this.variables && Object.keys(this.variables).length ? "(".concat(Object.keys(this.variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "").concat(key, ": $").concat(key);
          }, ""), ")") : "";
        };
        DefaultAppSyncMutationAdapter2.prototype.queryDataArgumentAndTypeMap = function(variables) {
          return Object.keys(variables).length ? "(".concat(Object.keys(variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "", "$").concat(key, ": ").concat(Utils_1.default.queryDataType(variables[key]));
          }, ""), ")") : "";
        };
        DefaultAppSyncMutationAdapter2.prototype.operationWrapperTemplate = function(variables, content) {
          var operation = typeof this.operation === "string" ? this.operation : this.operation.name;
          return {
            query: "".concat(OperationType_1.default.Mutation, " ").concat(operation.charAt(0).toUpperCase() + operation.slice(1), " ").concat(this.queryDataArgumentAndTypeMap(variables), " {\n  ").concat(content, "\n}"),
            variables: Utils_1.default.queryVariablesMap(variables)
          };
        };
        DefaultAppSyncMutationAdapter2.prototype.operationTemplate = function(operation) {
          var operationName = typeof operation === "string" ? operation : "".concat(operation.alias, ": ").concat(operation.name);
          return "".concat(operationName, " ").concat(this.queryDataNameAndArgumentMap(), " {\n    ").concat(this.queryFieldsMap(this.fields), "\n  }");
        };
        DefaultAppSyncMutationAdapter2.prototype.queryFieldsMap = function(fields) {
          var _this = this;
          return Array.isArray(fields) ? fields.map(function(field) {
            return typeof field === "object" ? "".concat(Object.keys(field)[0], " { ").concat(_this.queryFieldsMap(Object.values(field)[0]), " }") : "".concat(field);
          }).join(", ") : "";
        };
        return DefaultAppSyncMutationAdapter2;
      }()
    );
    exports.default = DefaultAppSyncMutationAdapter;
  }
});

// node_modules/gql-query-builder/build/adapters/DefaultAppSyncQueryAdapter.js
var require_DefaultAppSyncQueryAdapter = __commonJS({
  "node_modules/gql-query-builder/build/adapters/DefaultAppSyncQueryAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType_1 = require_OperationType();
    var Utils_1 = require_Utils();
    var DefaultAppSyncQueryAdapter = (
      /** @class */
      function() {
        function DefaultAppSyncQueryAdapter2(options) {
          this.queryDataType = function(variable) {
            var type = "String";
            var value = typeof variable === "object" ? variable.value : variable;
            if (variable.type !== void 0) {
              type = variable.type;
            } else {
              switch (typeof value) {
                case "object":
                  type = "Object";
                  break;
                case "boolean":
                  type = "Boolean";
                  break;
                case "number":
                  type = value % 1 === 0 ? "Int" : "Float";
                  break;
              }
            }
            if (typeof variable === "object" && variable.required) {
              type += "!";
            }
            return type;
          };
          if (Array.isArray(options)) {
            this.variables = Utils_1.default.resolveVariables(options);
          } else {
            this.variables = options.variables;
            this.fields = options.fields || [];
            this.operation = options.operation;
          }
        }
        DefaultAppSyncQueryAdapter2.prototype.queryBuilder = function() {
          return this.operationWrapperTemplate(this.operationTemplate());
        };
        DefaultAppSyncQueryAdapter2.prototype.queriesBuilder = function(queries) {
          var _this = this;
          var content = function() {
            var tmpl = [];
            queries.forEach(function(query2) {
              if (query2) {
                _this.operation = query2.operation;
                _this.fields = query2.fields;
                _this.variables = query2.variables;
                tmpl.push(_this.operationTemplate());
              }
            });
            return tmpl.join(" ");
          };
          return this.operationWrapperTemplate(content());
        };
        DefaultAppSyncQueryAdapter2.prototype.queryDataNameAndArgumentMap = function() {
          return this.variables && Object.keys(this.variables).length ? "(".concat(Object.keys(this.variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "").concat(key, ": $").concat(key);
          }, ""), ")") : "";
        };
        DefaultAppSyncQueryAdapter2.prototype.queryDataArgumentAndTypeMap = function() {
          var _this = this;
          return this.variables && Object.keys(this.variables).length ? "(".concat(Object.keys(this.variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "", "$").concat(key, ": ").concat(_this.queryDataType(_this.variables[key]));
          }, ""), ")") : "";
        };
        DefaultAppSyncQueryAdapter2.prototype.operationWrapperTemplate = function(content) {
          var operation = typeof this.operation === "string" ? this.operation : this.operation.name;
          return {
            query: "".concat(OperationType_1.default.Query, " ").concat(operation.charAt(0).toUpperCase()).concat(operation.slice(1), " ").concat(this.queryDataArgumentAndTypeMap(), " { ").concat(content, " }"),
            variables: Utils_1.default.queryVariablesMap(this.variables)
          };
        };
        DefaultAppSyncQueryAdapter2.prototype.operationTemplate = function() {
          var operation = typeof this.operation === "string" ? this.operation : "".concat(this.operation.alias, ": ").concat(this.operation.name);
          return "".concat(operation, " ").concat(this.queryDataNameAndArgumentMap(), " { nodes { ").concat(Utils_1.default.queryFieldsMap(this.fields), " } }");
        };
        return DefaultAppSyncQueryAdapter2;
      }()
    );
    exports.default = DefaultAppSyncQueryAdapter;
  }
});

// node_modules/gql-query-builder/build/adapters/index.js
var require_adapters = __commonJS({
  "node_modules/gql-query-builder/build/adapters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DefaultAppSyncMutationAdapter_1 = require_DefaultAppSyncMutationAdapter();
    var DefaultAppSyncQueryAdapter_1 = require_DefaultAppSyncQueryAdapter();
    exports.default = { DefaultAppSyncQueryAdapter: DefaultAppSyncQueryAdapter_1.default, DefaultAppSyncMutationAdapter: DefaultAppSyncMutationAdapter_1.default };
  }
});

// node_modules/gql-query-builder/build/adapters/DefaultMutationAdapter.js
var require_DefaultMutationAdapter = __commonJS({
  "node_modules/gql-query-builder/build/adapters/DefaultMutationAdapter.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p2 in s)
            if (Object.prototype.hasOwnProperty.call(s, p2))
              t[p2] = s[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType_1 = require_OperationType();
    var Utils_1 = require_Utils();
    var DefaultMutationAdapter = (
      /** @class */
      function() {
        function DefaultMutationAdapter2(options, configuration) {
          var _this = this;
          if (Array.isArray(options)) {
            this.variables = Utils_1.default.resolveVariables(options);
          } else {
            this.variables = options.variables;
            this.fields = options.fields;
            this.operation = options.operation;
          }
          this.config = {
            operationName: ""
          };
          if (configuration) {
            Object.entries(configuration).forEach(function(_a) {
              var key = _a[0], value = _a[1];
              _this.config[key] = value;
            });
          }
        }
        DefaultMutationAdapter2.prototype.mutationBuilder = function() {
          return this.operationWrapperTemplate(OperationType_1.default.Mutation, this.variables, this.operationTemplate(this.operation));
        };
        DefaultMutationAdapter2.prototype.mutationsBuilder = function(mutations) {
          var _this = this;
          var content = mutations.map(function(opts) {
            _this.operation = opts.operation;
            _this.variables = opts.variables;
            _this.fields = opts.fields;
            return _this.operationTemplate(opts.operation);
          });
          return this.operationWrapperTemplate(OperationType_1.default.Mutation, Utils_1.default.resolveVariables(mutations), content.join("\n  "));
        };
        DefaultMutationAdapter2.prototype.queryDataArgumentAndTypeMap = function(variablesUsed) {
          if (this.fields && typeof this.fields === "object") {
            variablesUsed = __assign(__assign({}, Utils_1.default.getNestedVariables(this.fields)), variablesUsed);
          }
          return variablesUsed && Object.keys(variablesUsed).length > 0 ? "(".concat(Object.keys(variablesUsed).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "", "$").concat(key, ": ").concat(Utils_1.default.queryDataType(variablesUsed[key]));
          }, ""), ")") : "";
        };
        DefaultMutationAdapter2.prototype.operationWrapperTemplate = function(type, variables, content) {
          var query2 = "".concat(type, " ").concat(this.queryDataArgumentAndTypeMap(variables), " {\n      ").concat(content, "\n    }");
          if (this.config.operationName) {
            query2 = query2.replace("mutation", "mutation ".concat(this.config.operationName));
          }
          return {
            query: query2,
            variables: Utils_1.default.queryVariablesMap(variables, this.fields)
          };
        };
        DefaultMutationAdapter2.prototype.operationTemplate = function(operation) {
          var operationName = typeof operation === "string" ? operation : "".concat(operation.alias, ": ").concat(operation.name);
          return "".concat(operationName, " ").concat(Utils_1.default.queryDataNameAndArgumentMap(this.variables), " ").concat(this.fields && this.fields.length > 0 ? "{\n    ".concat(Utils_1.default.queryFieldsMap(this.fields), "\n  }") : "");
        };
        return DefaultMutationAdapter2;
      }()
    );
    exports.default = DefaultMutationAdapter;
  }
});

// node_modules/gql-query-builder/build/adapters/DefaultQueryAdapter.js
var require_DefaultQueryAdapter = __commonJS({
  "node_modules/gql-query-builder/build/adapters/DefaultQueryAdapter.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p2 in s)
            if (Object.prototype.hasOwnProperty.call(s, p2))
              t[p2] = s[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType_1 = require_OperationType();
    var Utils_1 = require_Utils();
    var DefaultQueryAdapter = (
      /** @class */
      function() {
        function DefaultQueryAdapter2(options, configuration) {
          var _this = this;
          this.config = {
            operationName: ""
          };
          if (configuration) {
            Object.entries(configuration).forEach(function(_a) {
              var key = _a[0], value = _a[1];
              _this.config[key] = value;
            });
          }
          if (Array.isArray(options)) {
            this.variables = Utils_1.default.resolveVariables(options);
          } else {
            this.variables = options.variables;
            this.fields = options.fields || [];
            this.operation = options.operation;
          }
        }
        DefaultQueryAdapter2.prototype.queryBuilder = function() {
          return this.operationWrapperTemplate(this.operationTemplate(this.variables));
        };
        DefaultQueryAdapter2.prototype.queriesBuilder = function(queries) {
          var _this = this;
          var content = function() {
            var tmpl = [];
            queries.forEach(function(query2) {
              if (query2) {
                _this.operation = query2.operation;
                _this.fields = query2.fields;
                tmpl.push(_this.operationTemplate(query2.variables));
              }
            });
            return tmpl.join(" ");
          };
          return this.operationWrapperTemplate(content());
        };
        DefaultQueryAdapter2.prototype.queryDataArgumentAndTypeMap = function() {
          var variablesUsed = this.variables;
          if (this.fields && typeof this.fields === "object") {
            variablesUsed = __assign(__assign({}, Utils_1.default.getNestedVariables(this.fields)), variablesUsed);
          }
          return variablesUsed && Object.keys(variablesUsed).length > 0 ? "(".concat(Object.keys(variablesUsed).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "", "$").concat(key, ": ").concat(Utils_1.default.queryDataType(variablesUsed[key]));
          }, ""), ")") : "";
        };
        DefaultQueryAdapter2.prototype.operationWrapperTemplate = function(content) {
          var query2 = "".concat(OperationType_1.default.Query, " ").concat(this.queryDataArgumentAndTypeMap(), " { ").concat(content, " }");
          query2 = query2.replace("query", "query".concat(this.config.operationName !== "" ? " " + this.config.operationName : ""));
          return {
            query: query2,
            variables: Utils_1.default.queryVariablesMap(this.variables, this.fields)
          };
        };
        DefaultQueryAdapter2.prototype.operationTemplate = function(variables) {
          var operation = typeof this.operation === "string" ? this.operation : "".concat(this.operation.alias, ": ").concat(this.operation.name);
          return "".concat(operation, " ").concat(variables ? Utils_1.default.queryDataNameAndArgumentMap(variables) : "", " ").concat(this.fields && this.fields.length > 0 ? "{ " + Utils_1.default.queryFieldsMap(this.fields) + " }" : "");
        };
        return DefaultQueryAdapter2;
      }()
    );
    exports.default = DefaultQueryAdapter;
  }
});

// node_modules/gql-query-builder/build/adapters/DefaultSubscriptionAdapter.js
var require_DefaultSubscriptionAdapter = __commonJS({
  "node_modules/gql-query-builder/build/adapters/DefaultSubscriptionAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OperationType_1 = require_OperationType();
    var Utils_1 = require_Utils();
    var DefaultSubscriptionAdapter = (
      /** @class */
      function() {
        function DefaultSubscriptionAdapter2(options) {
          if (Array.isArray(options)) {
            this.variables = Utils_1.default.resolveVariables(options);
          } else {
            this.variables = options.variables;
            this.fields = options.fields;
            this.operation = options.operation;
          }
        }
        DefaultSubscriptionAdapter2.prototype.subscriptionBuilder = function() {
          return this.operationWrapperTemplate(OperationType_1.default.Subscription, this.variables, this.operationTemplate(this.operation));
        };
        DefaultSubscriptionAdapter2.prototype.subscriptionsBuilder = function(subscriptions) {
          var _this = this;
          var content = subscriptions.map(function(opts) {
            _this.operation = opts.operation;
            _this.variables = opts.variables;
            _this.fields = opts.fields;
            return _this.operationTemplate(opts.operation);
          });
          return this.operationWrapperTemplate(OperationType_1.default.Subscription, Utils_1.default.resolveVariables(subscriptions), content.join("\n  "));
        };
        DefaultSubscriptionAdapter2.prototype.queryDataNameAndArgumentMap = function() {
          return this.variables && Object.keys(this.variables).length ? "(".concat(Object.keys(this.variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "").concat(key, ": $").concat(key);
          }, ""), ")") : "";
        };
        DefaultSubscriptionAdapter2.prototype.queryDataArgumentAndTypeMap = function(variables) {
          return Object.keys(variables).length ? "(".concat(Object.keys(variables).reduce(function(dataString, key, i) {
            return "".concat(dataString).concat(i !== 0 ? ", " : "", "$").concat(key, ": ").concat(Utils_1.default.queryDataType(variables[key]));
          }, ""), ")") : "";
        };
        DefaultSubscriptionAdapter2.prototype.operationWrapperTemplate = function(type, variables, content) {
          return {
            query: "".concat(type, " ").concat(this.queryDataArgumentAndTypeMap(variables), " {\n  ").concat(content, "\n}"),
            variables: Utils_1.default.queryVariablesMap(variables)
          };
        };
        DefaultSubscriptionAdapter2.prototype.operationTemplate = function(operation) {
          var operationName = typeof this.operation === "string" ? this.operation : "".concat(this.operation.alias, ": ").concat(this.operation.name);
          return "".concat(operationName, " ").concat(this.queryDataNameAndArgumentMap(), " {\n    ").concat(this.queryFieldsMap(this.fields), "\n  }");
        };
        DefaultSubscriptionAdapter2.prototype.queryFieldsMap = function(fields) {
          var _this = this;
          return fields ? fields.map(function(field) {
            return typeof field === "object" ? "".concat(Object.keys(field)[0], " { ").concat(_this.queryFieldsMap(Object.values(field)[0]), " }") : "".concat(field);
          }).join(", ") : "";
        };
        return DefaultSubscriptionAdapter2;
      }()
    );
    exports.default = DefaultSubscriptionAdapter;
  }
});

// node_modules/gql-query-builder/build/index.js
var require_build = __commonJS({
  "node_modules/gql-query-builder/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.adapters = exports.query = exports.mutation = exports.subscription = void 0;
    var adapters_1 = require_adapters();
    exports.adapters = adapters_1.default;
    var DefaultMutationAdapter_1 = require_DefaultMutationAdapter();
    var DefaultQueryAdapter_1 = require_DefaultQueryAdapter();
    var DefaultSubscriptionAdapter_1 = require_DefaultSubscriptionAdapter();
    function queryOperation(options, adapter, config) {
      var defaultAdapter;
      if (Array.isArray(options)) {
        if (adapter) {
          var customAdapter = new adapter(options, config);
          return customAdapter.queriesBuilder(options);
        }
        defaultAdapter = new DefaultQueryAdapter_1.default(options, config);
        return defaultAdapter.queriesBuilder(options);
      }
      if (adapter) {
        var customAdapter = new adapter(options, config);
        return customAdapter.queryBuilder();
      }
      defaultAdapter = new DefaultQueryAdapter_1.default(options, config);
      return defaultAdapter.queryBuilder();
    }
    exports.query = queryOperation;
    function mutationOperation(options, adapter, config) {
      var customAdapter;
      var defaultAdapter;
      if (Array.isArray(options)) {
        if (adapter) {
          customAdapter = new adapter(options, config);
          return customAdapter.mutationsBuilder(options);
        }
        defaultAdapter = new DefaultMutationAdapter_1.default(options, config);
        return defaultAdapter.mutationsBuilder(options);
      }
      if (adapter) {
        customAdapter = new adapter(options, config);
        return customAdapter.mutationBuilder();
      }
      defaultAdapter = new DefaultMutationAdapter_1.default(options, config);
      return defaultAdapter.mutationBuilder();
    }
    exports.mutation = mutationOperation;
    function subscriptionOperation(options, adapter) {
      var customAdapter;
      var defaultAdapter;
      if (Array.isArray(options)) {
        if (adapter) {
          customAdapter = new adapter(options);
          return customAdapter.subscriptionsBuilder(options);
        }
        defaultAdapter = new DefaultSubscriptionAdapter_1.default(options);
        return defaultAdapter.subscriptionsBuilder(options);
      }
      if (adapter) {
        customAdapter = new adapter(options);
        return customAdapter.subscriptionBuilder();
      }
      defaultAdapter = new DefaultSubscriptionAdapter_1.default(options);
      return defaultAdapter.subscriptionBuilder();
    }
    exports.subscription = subscriptionOperation;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/set.js
var require_set = __commonJS({
  "node_modules/lodash/set.js"(exports, module) {
    var baseSet = require_baseSet();
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    module.exports = set;
  }
});

// node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/ReactNativeFile.js
var require_ReactNativeFile = __commonJS({
  "node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/ReactNativeFile.js"(exports, module) {
    "use strict";
    module.exports = function ReactNativeFile(_ref) {
      var uri = _ref.uri, name = _ref.name, type = _ref.type;
      this.uri = uri;
      this.name = name;
      this.type = type;
    };
  }
});

// node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/isExtractableFile.js
var require_isExtractableFile = __commonJS({
  "node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/isExtractableFile.js"(exports, module) {
    "use strict";
    var ReactNativeFile = require_ReactNativeFile();
    module.exports = function isExtractableFile(value) {
      return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
    };
  }
});

// node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/extractFiles.js
var require_extractFiles = __commonJS({
  "node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/extractFiles.js"(exports, module) {
    "use strict";
    var defaultIsExtractableFile = require_isExtractableFile();
    module.exports = function extractFiles(value, path, isExtractableFile) {
      if (path === void 0) {
        path = "";
      }
      if (isExtractableFile === void 0) {
        isExtractableFile = defaultIsExtractableFile;
      }
      var clone;
      var files = /* @__PURE__ */ new Map();
      function addFile(paths, file) {
        var storedPaths = files.get(file);
        if (storedPaths)
          storedPaths.push.apply(storedPaths, paths);
        else
          files.set(file, paths);
      }
      if (isExtractableFile(value)) {
        clone = null;
        addFile([path], value);
      } else {
        var prefix = path ? path + "." : "";
        if (typeof FileList !== "undefined" && value instanceof FileList)
          clone = Array.prototype.map.call(value, function(file, i2) {
            addFile(["" + prefix + i2], file);
            return null;
          });
        else if (Array.isArray(value))
          clone = value.map(function(child, i2) {
            var result2 = extractFiles(child, "" + prefix + i2, isExtractableFile);
            result2.files.forEach(addFile);
            return result2.clone;
          });
        else if (value && value.constructor === Object) {
          clone = {};
          for (var i in value) {
            var result = extractFiles(value[i], "" + prefix + i, isExtractableFile);
            result.files.forEach(addFile);
            clone[i] = result.clone;
          }
        } else
          clone = value;
      }
      return {
        clone,
        files
      };
    };
  }
});

// node_modules/@refinedev/nestjs-query/node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/@refinedev/nestjs-query/node_modules/form-data/lib/browser.js"(exports, module) {
    module.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var global2 = typeof self !== "undefined" ? self : exports;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global2.DOMException;
      }
      F.prototype = global2;
      return new F();
    }();
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers3(headers) {
          this.map = {};
          if (headers instanceof Headers3) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers3.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers3.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers3.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers3.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers3.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers3.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers3.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers3.prototype[Symbol.iterator] = Headers3.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers3(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers3(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers3();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers3(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers3(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch(input, init) {
          return new Promise(function(resolve, reject) {
            var request2 = new Request(input, init);
            if (request2.signal && request2.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request2.method, request2.url, true);
            if (request2.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request2.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request2.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request2.signal) {
              request2.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request2.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
          });
        }
        fetch.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch;
          self2.Headers = Headers3;
          self2.Request = Request;
          self2.Response = Response;
        }
        exports2.Headers = Headers3;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@refinedev/nestjs-query/dist/index.mjs
var import_camelcase = __toESM(require_camelcase(), 1);
var y = __toESM(require_build(), 1);
var import_pluralize = __toESM(require_pluralize(), 1);
var import_camelcase2 = __toESM(require_camelcase(), 1);
var O = __toESM(require_build(), 1);
var import_set = __toESM(require_set(), 1);
var import_pluralize2 = __toESM(require_pluralize(), 1);
var pe = __toESM(require_build(), 1);

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/defaultJsonSerializer.js
var defaultJsonSerializer = {
  parse: JSON.parse,
  stringify: JSON.stringify
};

// node_modules/@refinedev/nestjs-query/node_modules/extract-files/public/index.mjs
var import_ReactNativeFile = __toESM(require_ReactNativeFile(), 1);
var import_extractFiles = __toESM(require_extractFiles(), 1);
var import_isExtractableFile = __toESM(require_isExtractableFile(), 1);

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/createRequestBody.js
var import_form_data = __toESM(require_browser(), 1);
var isExtractableFileEnhanced = (value) => (0, import_isExtractableFile.default)(value) || value !== null && typeof value === `object` && typeof value.pipe === `function`;
var createRequestBody = (query2, variables, operationName, jsonSerializer = defaultJsonSerializer) => {
  const { clone, files } = (0, import_extractFiles.default)({ query: query2, variables, operationName }, ``, isExtractableFileEnhanced);
  if (files.size === 0) {
    if (!Array.isArray(query2)) {
      return jsonSerializer.stringify(clone);
    }
    if (typeof variables !== `undefined` && !Array.isArray(variables)) {
      throw new Error(`Cannot create request body with given variable type, array expected`);
    }
    const payload = query2.reduce((accu, currentQuery, index) => {
      accu.push({ query: currentQuery, variables: variables ? variables[index] : void 0 });
      return accu;
    }, []);
    return jsonSerializer.stringify(payload);
  }
  const Form = typeof FormData === `undefined` ? import_form_data.default : FormData;
  const form = new Form();
  form.append(`operations`, jsonSerializer.stringify(clone));
  const map = {};
  let i = 0;
  files.forEach((paths) => {
    map[++i] = paths;
  });
  form.append(`map`, jsonSerializer.stringify(map));
  i = 0;
  files.forEach((paths, file) => {
    form.append(`${++i}`, file);
  });
  return form;
};
var createRequestBody_default = createRequestBody;

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/helpers.js
var uppercase = (str) => str.toUpperCase();
var HeadersInstanceToPlainObject = (headers) => {
  const o = {};
  headers.forEach((v, k2) => {
    o[k2] = v;
  });
  return o;
};

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/parseArgs.js
var parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {
  return documentOrOptions.document ? documentOrOptions : {
    document: documentOrOptions,
    variables,
    requestHeaders,
    signal: void 0
  };
};
var parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {
  return queryOrOptions.query ? queryOrOptions : {
    query: queryOrOptions,
    variables,
    requestHeaders,
    signal: void 0
  };
};
var parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {
  return documentsOrOptions.documents ? documentsOrOptions : {
    documents: documentsOrOptions,
    requestHeaders,
    signal: void 0
  };
};
var parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders) => {
  const [variables, requestHeaders] = variablesAndRequestHeaders;
  return urlOrOptions.document ? urlOrOptions : {
    url: urlOrOptions,
    document,
    variables,
    requestHeaders,
    signal: void 0
  };
};
var parseRawRequestExtendedArgs = (urlOrOptions, query2, ...variablesAndRequestHeaders) => {
  const [variables, requestHeaders] = variablesAndRequestHeaders;
  return urlOrOptions.query ? urlOrOptions : {
    url: urlOrOptions,
    query: query2,
    variables,
    requestHeaders,
    signal: void 0
  };
};

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/resolveRequestDocument.js
var extractOperationName = (document) => {
  var _a, _b;
  let operationName = void 0;
  const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);
  if (operationDefinitions.length === 1) {
    operationName = (_b = (_a = operationDefinitions[0]) == null ? void 0 : _a.name) == null ? void 0 : _b.value;
  }
  return operationName;
};
var resolveRequestDocument = (document) => {
  if (typeof document === `string`) {
    let operationName2 = void 0;
    try {
      const parsedDocument = parse(document);
      operationName2 = extractOperationName(parsedDocument);
    } catch (err) {
    }
    return { query: document, operationName: operationName2 };
  }
  const operationName = extractOperationName(document);
  return { query: print(document), operationName };
};

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/types.js
var ClientError = class _ClientError extends Error {
  constructor(response, request2) {
    const message = `${_ClientError.extractMessage(response)}: ${JSON.stringify({
      response,
      request: request2
    })}`;
    super(message);
    Object.setPrototypeOf(this, _ClientError.prototype);
    this.response = response;
    this.request = request2;
    if (typeof Error.captureStackTrace === `function`) {
      Error.captureStackTrace(this, _ClientError);
    }
  }
  static extractMessage(response) {
    var _a, _b;
    return ((_b = (_a = response.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) ?? `GraphQL Error (Code: ${response.status})`;
  }
};

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/index.js
var CrossFetch = __toESM(require_browser_ponyfill());

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/graphql-ws.js
var CONNECTION_INIT = `connection_init`;
var CONNECTION_ACK = `connection_ack`;
var PING = `ping`;
var PONG = `pong`;
var SUBSCRIBE = `subscribe`;
var NEXT = `next`;
var ERROR = `error`;
var COMPLETE = `complete`;
var GraphQLWebSocketMessage = class _GraphQLWebSocketMessage {
  get type() {
    return this._type;
  }
  get id() {
    return this._id;
  }
  get payload() {
    return this._payload;
  }
  constructor(type, payload, id) {
    this._type = type;
    this._payload = payload;
    this._id = id;
  }
  get text() {
    const result = { type: this.type };
    if (this.id != null && this.id != void 0)
      result.id = this.id;
    if (this.payload != null && this.payload != void 0)
      result.payload = this.payload;
    return JSON.stringify(result);
  }
  static parse(data, f) {
    const { type, payload, id } = JSON.parse(data);
    return new _GraphQLWebSocketMessage(type, f(payload), id);
  }
};
var GraphQLWebSocketClient = class {
  constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {
    this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };
    this.socket = socket;
    socket.onopen = async (e) => {
      this.socketState.acknowledged = false;
      this.socketState.subscriptions = {};
      socket.send(ConnectionInit(onInit ? await onInit() : null).text);
    };
    socket.onclose = (e) => {
      this.socketState.acknowledged = false;
      this.socketState.subscriptions = {};
    };
    socket.onerror = (e) => {
      console.error(e);
    };
    socket.onmessage = (e) => {
      try {
        const message = parseMessage(e.data);
        switch (message.type) {
          case CONNECTION_ACK: {
            if (this.socketState.acknowledged) {
              console.warn(`Duplicate CONNECTION_ACK message ignored`);
            } else {
              this.socketState.acknowledged = true;
              if (onAcknowledged)
                onAcknowledged(message.payload);
            }
            return;
          }
          case PING: {
            if (onPing)
              onPing(message.payload).then((r) => socket.send(Pong(r).text));
            else
              socket.send(Pong(null).text);
            return;
          }
          case PONG: {
            if (onPong)
              onPong(message.payload);
            return;
          }
        }
        if (!this.socketState.acknowledged) {
          return;
        }
        if (message.id === void 0 || message.id === null || !this.socketState.subscriptions[message.id]) {
          return;
        }
        const { query: query2, variables, subscriber } = this.socketState.subscriptions[message.id];
        switch (message.type) {
          case NEXT: {
            if (!message.payload.errors && message.payload.data) {
              subscriber.next && subscriber.next(message.payload.data);
            }
            if (message.payload.errors) {
              subscriber.error && subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query: query2, variables }));
            } else {
            }
            return;
          }
          case ERROR: {
            subscriber.error && subscriber.error(new ClientError({ errors: message.payload, status: 200 }, { query: query2, variables }));
            return;
          }
          case COMPLETE: {
            subscriber.complete && subscriber.complete();
            delete this.socketState.subscriptions[message.id];
            return;
          }
        }
      } catch (e2) {
        console.error(e2);
        socket.close(1006);
      }
      socket.close(4400, `Unknown graphql-ws message.`);
    };
  }
  makeSubscribe(query2, operationName, subscriber, variables) {
    const subscriptionId = (this.socketState.lastRequestId++).toString();
    this.socketState.subscriptions[subscriptionId] = { query: query2, variables, subscriber };
    this.socket.send(Subscribe(subscriptionId, { query: query2, operationName, variables }).text);
    return () => {
      this.socket.send(Complete(subscriptionId).text);
      delete this.socketState.subscriptions[subscriptionId];
    };
  }
  rawRequest(query2, variables) {
    return new Promise((resolve, reject) => {
      let result;
      this.rawSubscribe(query2, {
        next: (data, extensions) => result = { data, extensions },
        error: reject,
        complete: () => resolve(result)
      }, variables);
    });
  }
  request(document, variables) {
    return new Promise((resolve, reject) => {
      let result;
      this.subscribe(document, {
        next: (data) => result = data,
        error: reject,
        complete: () => resolve(result)
      }, variables);
    });
  }
  subscribe(document, subscriber, variables) {
    const { query: query2, operationName } = resolveRequestDocument(document);
    return this.makeSubscribe(query2, operationName, subscriber, variables);
  }
  rawSubscribe(query2, subscriber, variables) {
    return this.makeSubscribe(query2, void 0, subscriber, variables);
  }
  ping(payload) {
    this.socket.send(Ping(payload).text);
  }
  close() {
    this.socket.close(1e3);
  }
};
GraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;
function parseMessage(data, f = (a) => a) {
  const m = GraphQLWebSocketMessage.parse(data, f);
  return m;
}
function ConnectionInit(payload) {
  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);
}
function Ping(payload) {
  return new GraphQLWebSocketMessage(PING, payload, void 0);
}
function Pong(payload) {
  return new GraphQLWebSocketMessage(PONG, payload, void 0);
}
function Subscribe(id, payload) {
  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);
}
function Complete(id) {
  return new GraphQLWebSocketMessage(COMPLETE, void 0, id);
}

// node_modules/@refinedev/nestjs-query/node_modules/graphql-request/build/esm/index.js
var resolveHeaders = (headers) => {
  let oHeaders = {};
  if (headers) {
    if (typeof Headers !== `undefined` && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {
      oHeaders = HeadersInstanceToPlainObject(headers);
    } else if (Array.isArray(headers)) {
      headers.forEach(([name, value]) => {
        if (name && value !== void 0) {
          oHeaders[name] = value;
        }
      });
    } else {
      oHeaders = headers;
    }
  }
  return oHeaders;
};
var cleanQuery = (str) => str.replace(/([\s,]|#[^\n\r]+)+/g, ` `).trim();
var buildRequestConfig = (params) => {
  if (!Array.isArray(params.query)) {
    const params_2 = params;
    const search = [`query=${encodeURIComponent(cleanQuery(params_2.query))}`];
    if (params.variables) {
      search.push(`variables=${encodeURIComponent(params_2.jsonSerializer.stringify(params_2.variables))}`);
    }
    if (params_2.operationName) {
      search.push(`operationName=${encodeURIComponent(params_2.operationName)}`);
    }
    return search.join(`&`);
  }
  if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {
    throw new Error(`Cannot create query with given variable type, array expected`);
  }
  const params_ = params;
  const payload = params.query.reduce((acc, currentQuery, index) => {
    acc.push({
      query: cleanQuery(currentQuery),
      variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : void 0
    });
    return acc;
  }, []);
  return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;
};
var createHttpMethodFetcher = (method) => async (params) => {
  const { url, query: query2, variables, operationName, fetch, fetchOptions, middleware } = params;
  const headers = { ...params.headers };
  let queryParams = ``;
  let body = void 0;
  if (method === `POST`) {
    body = createRequestBody_default(query2, variables, operationName, fetchOptions.jsonSerializer);
    if (typeof body === `string`) {
      headers[`Content-Type`] = `application/json`;
    }
  } else {
    queryParams = buildRequestConfig({
      query: query2,
      variables,
      operationName,
      jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer
    });
  }
  const init = {
    method,
    headers,
    body,
    ...fetchOptions
  };
  let urlResolved = url;
  let initResolved = init;
  if (middleware) {
    const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));
    const { url: urlNew, ...initNew } = result;
    urlResolved = urlNew;
    initResolved = initNew;
  }
  if (queryParams) {
    urlResolved = `${urlResolved}?${queryParams}`;
  }
  return await fetch(urlResolved, initResolved);
};
var GraphQLClient = class {
  constructor(url, requestConfig = {}) {
    this.url = url;
    this.requestConfig = requestConfig;
    this.rawRequest = async (...args) => {
      const [queryOrOptions, variables, requestHeaders] = args;
      const rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
      const { headers, fetch = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
      const { url: url2 } = this;
      if (rawRequestOptions.signal !== void 0) {
        fetchOptions.signal = rawRequestOptions.signal;
      }
      const { operationName } = resolveRequestDocument(rawRequestOptions.query);
      return makeRequest({
        url: url2,
        query: rawRequestOptions.query,
        variables: rawRequestOptions.variables,
        headers: {
          ...resolveHeaders(callOrIdentity(headers)),
          ...resolveHeaders(rawRequestOptions.requestHeaders)
        },
        operationName,
        fetch,
        method,
        fetchOptions,
        middleware: requestMiddleware
      }).then((response) => {
        if (responseMiddleware) {
          responseMiddleware(response);
        }
        return response;
      }).catch((error) => {
        if (responseMiddleware) {
          responseMiddleware(error);
        }
        throw error;
      });
    };
  }
  async request(documentOrOptions, ...variablesAndRequestHeaders) {
    const [variables, requestHeaders] = variablesAndRequestHeaders;
    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);
    const { headers, fetch = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
    const { url } = this;
    if (requestOptions.signal !== void 0) {
      fetchOptions.signal = requestOptions.signal;
    }
    const { query: query2, operationName } = resolveRequestDocument(requestOptions.document);
    return makeRequest({
      url,
      query: query2,
      variables: requestOptions.variables,
      headers: {
        ...resolveHeaders(callOrIdentity(headers)),
        ...resolveHeaders(requestOptions.requestHeaders)
      },
      operationName,
      fetch,
      method,
      fetchOptions,
      middleware: requestMiddleware
    }).then((response) => {
      if (responseMiddleware) {
        responseMiddleware(response);
      }
      return response.data;
    }).catch((error) => {
      if (responseMiddleware) {
        responseMiddleware(error);
      }
      throw error;
    });
  }
  // prettier-ignore
  batchRequests(documentsOrOptions, requestHeaders) {
    const batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);
    const { headers, ...fetchOptions } = this.requestConfig;
    if (batchRequestOptions.signal !== void 0) {
      fetchOptions.signal = batchRequestOptions.signal;
    }
    const queries = batchRequestOptions.documents.map(({ document }) => resolveRequestDocument(document).query);
    const variables = batchRequestOptions.documents.map(({ variables: variables2 }) => variables2);
    return makeRequest({
      url: this.url,
      query: queries,
      // @ts-expect-error TODO reconcile batch variables into system.
      variables,
      headers: {
        ...resolveHeaders(callOrIdentity(headers)),
        ...resolveHeaders(batchRequestOptions.requestHeaders)
      },
      operationName: void 0,
      fetch: this.requestConfig.fetch ?? CrossFetch.default,
      method: this.requestConfig.method || `POST`,
      fetchOptions,
      middleware: this.requestConfig.requestMiddleware
    }).then((response) => {
      if (this.requestConfig.responseMiddleware) {
        this.requestConfig.responseMiddleware(response);
      }
      return response.data;
    }).catch((error) => {
      if (this.requestConfig.responseMiddleware) {
        this.requestConfig.responseMiddleware(error);
      }
      throw error;
    });
  }
  setHeaders(headers) {
    this.requestConfig.headers = headers;
    return this;
  }
  /**
   * Attach a header to the client. All subsequent requests will have this header.
   */
  setHeader(key, value) {
    const { headers } = this.requestConfig;
    if (headers) {
      headers[key] = value;
    } else {
      this.requestConfig.headers = { [key]: value };
    }
    return this;
  }
  /**
   * Change the client endpoint. All subsequent requests will send to this endpoint.
   */
  setEndpoint(value) {
    this.url = value;
    return this;
  }
};
var makeRequest = async (params) => {
  const { query: query2, variables, fetchOptions } = params;
  const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`));
  const isBatchingQuery = Array.isArray(params.query);
  const response = await fetcher(params);
  const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer);
  const successfullyReceivedData = Array.isArray(result) ? !result.some(({ data }) => !data) : Boolean(result.data);
  const successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === `all` || fetchOptions.errorPolicy === `ignore`;
  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {
    const { errors, ...rest } = Array.isArray(result) ? result : result;
    const data = fetchOptions.errorPolicy === `ignore` ? rest : result;
    const dataEnvelope = isBatchingQuery ? { data } : data;
    return {
      ...dataEnvelope,
      headers: response.headers,
      status: response.status
    };
  } else {
    const errorResult = typeof result === `string` ? {
      error: result
    } : result;
    throw new ClientError(
      // @ts-expect-error TODO
      { ...errorResult, status: response.status, headers: response.headers },
      { query: query2, variables }
    );
  }
};
var rawRequest = async (...args) => {
  const [urlOrOptions, query2, ...variablesAndRequestHeaders] = args;
  const requestOptions = parseRawRequestExtendedArgs(urlOrOptions, query2, ...variablesAndRequestHeaders);
  const client = new GraphQLClient(requestOptions.url);
  return client.rawRequest({
    ...requestOptions
  });
};
async function request(urlOrOptions, document, ...variablesAndRequestHeaders) {
  const requestOptions = parseRequestExtendedArgs(urlOrOptions, document, ...variablesAndRequestHeaders);
  const client = new GraphQLClient(requestOptions.url);
  return client.request({
    ...requestOptions
  });
}
var batchRequests = async (...args) => {
  const params = parseBatchRequestsArgsExtended(args);
  const client = new GraphQLClient(params.url);
  return client.batchRequests(params);
};
var parseBatchRequestsArgsExtended = (args) => {
  if (args.length === 1) {
    return args[0];
  } else {
    return {
      url: args[0],
      documents: args[1],
      requestHeaders: args[2],
      signal: void 0
    };
  }
};
var getResult = async (response, jsonSerializer) => {
  let contentType;
  response.headers.forEach((value, key) => {
    if (key.toLowerCase() === `content-type`) {
      contentType = value;
    }
  });
  if (contentType && (contentType.toLowerCase().startsWith(`application/json`) || contentType.toLowerCase().startsWith(`application/graphql+json`) || contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {
    return jsonSerializer.parse(await response.text());
  } else {
    return response.text();
  }
};
var callOrIdentity = (value) => {
  return typeof value === `function` ? value() : value;
};
var gql = (chunks, ...variables) => {
  return chunks.reduce((accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ``}`, ``);
};

// node_modules/@refinedev/nestjs-query/dist/index.mjs
var _ = (i) => {
  var r, n;
  return (n = (r = i == null ? void 0 : i.selectionSet) == null ? void 0 : r.selections) == null ? void 0 : n.find((e) => e.kind === "Field" && e.name.value === "nodes");
};
var w = (i) => {
  let r = [], n = true, e = 0, t = false;
  return visit(i, { Field: { enter(s) {
    if (n) {
      n = false;
      let u = _(s) ?? s;
      if (typeof u.selectionSet > "u")
        throw new Error("Operation must have a selection set");
      return u.selectionSet;
    }
    r.push(`${e > 0 ? "  ".repeat(t ? e : e - 1) : ""}${s.name.value}${s.selectionSet ? " {" : ""}`), s.selectionSet && (e++, t = true);
  }, leave(s) {
    s.selectionSet && (e--, r.push(`${"  ".repeat(e)}}`), t = false);
  } } }), r.join(`
`).trim();
};
var L = (i) => {
  let r = false;
  return visit(i, { OperationDefinition: { enter(n) {
    n.operation === "mutation" && (r = true);
  } } }), r;
};
var M = (i, { callback: r, params: n, meta: e }, t) => {
  let s = { created: I, updated: E, deleted: P }, { resource: o, filters: u, subscriptionType: l, id: a, ids: d } = n ?? {}, f = s[t], { operation: c, query: v, variables: R, operationName: Q } = f({ ids: d, id: a, resource: o, filters: u, meta: e, subscriptionType: l }), N = (V) => {
    r(V.data[c]);
  };
  return i.subscribe({ query: v, variables: R, operationName: Q }, { next: N, error: console.error, complete: () => null });
};
var D = { eq: "eq", ne: "neq", lt: "lt", gt: "gt", lte: "lte", gte: "gte", in: "in", nin: "notIn" };
var k = (i, r) => {
  if (i === "contains")
    return { iLike: `%${r}%` };
  if (i === "ncontains")
    return { notILike: `%${r}%` };
  if (i === "containss")
    return { like: `%${r}%` };
  if (i === "ncontainss")
    return { notLike: `%${r}%` };
  if (i === "startswith")
    return { iLike: `${r}%` };
  if (i === "nstartswith")
    return { notILike: `${r}%` };
  if (i === "startswiths")
    return { like: `${r}%` };
  if (i === "nstartswiths")
    return { notLike: `${r}%` };
  if (i === "endswith")
    return { iLike: `%${r}` };
  if (i === "nendswith")
    return { notILike: `%${r}` };
  if (i === "endswiths")
    return { like: `%${r}` };
  if (i === "nendswiths")
    return { notLike: `%${r}` };
  if (i === "null")
    return { is: null };
  if (i === "nnull")
    return { isNot: null };
  if (i === "between") {
    if (!Array.isArray(r))
      throw new Error("Between operator requires an array");
    return r.length !== 2 ? {} : { between: { lower: r[0], upper: r[1] } };
  }
  if (i === "nbetween") {
    if (!Array.isArray(r))
      throw new Error("NBetween operator requires an array");
    return r.length !== 2 ? {} : { notBetween: { lower: r[0], upper: r[1] } };
  }
  return { [D[i]]: r };
};
var $ = (i) => {
  let r = {};
  return i.filter((n) => Array.isArray(n.value) && n.value.length === 0 ? false : !!n.value).map((n) => n.operator === "and" || n.operator === "or" ? (0, import_set.default)(r, n.operator, [$(n.value)]) : "field" in n ? (0, import_set.default)(r, n.field, k(n.operator, n.value)) : {}), r;
};
var h = (i) => i.map((r) => ({ field: r.field, direction: r.order.toUpperCase() }));
var B = (i) => {
  if (i.mode === "off")
    return { limit: 2147483647 };
  if (i.mode === "server" && !(!i.current || !i.pageSize))
    return { limit: i.pageSize, offset: (i.current - 1) * i.pageSize };
};
var I = ({ resource: i, filters: r, meta: n }) => {
  let e = (n == null ? void 0 : n.gqlQuery) ?? (n == null ? void 0 : n.gqlMutation);
  if (e) {
    let l = (0, import_camelcase2.default)((0, import_pluralize2.singular)(i), { pascalCase: true }), a = `Created${l}`, d = `created${l}`, f = `
            subscription ${a}($input: Create${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                    ${w(e)}
                }
            }
        `, c = {};
    return r && (c.input = { filter: $(r.filter((v) => !v.field.includes("."))) }), { query: f, variables: c, operation: d, operationName: a };
  }
  let t = `created${(0, import_camelcase2.default)((0, import_pluralize2.singular)(i), { pascalCase: true })}`, s = {};
  r && (s.input = { type: (0, import_camelcase2.default)(`create_${(0, import_pluralize2.singular)(i)}_subscription_filter_input`, { pascalCase: true }), required: true, value: { filter: $(r.filter((l) => !l.field.includes("."))) } });
  let { query: o, variables: u } = O.subscription({ operation: t, fields: n.fields, variables: s });
  return { query: o, variables: u, operation: t };
};
var E = ({ id: i, resource: r, filters: n, meta: e }) => {
  let t = (e == null ? void 0 : e.gqlQuery) ?? (e == null ? void 0 : e.gqlMutation);
  if (t) {
    let a = (0, import_camelcase2.default)((0, import_pluralize2.singular)(r), { pascalCase: true }), d = `Updated${a}`, f = `updatedOne${a}`, c = `
            subscription ${d}($input: UpdateOne${a}SubscriptionFilterInput) {
                ${f}(input: $input) {
                   ${w(t)}
                }
            }
        `, v = {};
    return n && (v.input = { filter: $(n.filter((R) => !R.field.includes("."))) }), i && (v.input = { filter: { id: { eq: i } } }), { query: c, variables: v, operation: f, operationName: d };
  }
  let s = `updatedOne${(0, import_camelcase2.default)((0, import_pluralize2.singular)(r), { pascalCase: true })}`, o = {};
  n && (o.input = { type: (0, import_camelcase2.default)(`update_one_${(0, import_pluralize2.singular)(r)}_subscription_filter_input`, { pascalCase: true }), required: true, value: { filter: $(n.filter((a) => !a.field.includes("."))) } }), i && (o.input = { type: (0, import_camelcase2.default)(`update_one_${(0, import_pluralize2.singular)(r)}_subscription_filter_input`, { pascalCase: true }), required: true, value: { filter: { id: { eq: i } } } });
  let { query: u, variables: l } = O.subscription({ operation: s, fields: e.fields, variables: o });
  return { query: u, variables: l, operation: s };
};
var P = ({ resource: i, filters: r, meta: n }) => {
  if (n != null && n.gqlQuery) {
    let u = (0, import_camelcase2.default)((0, import_pluralize2.singular)(i), { pascalCase: true }), l = `Deleted${u}`, a = `deletedOne${u}`, d = `
            subscription ${l}($input: DeleteOne${u}SubscriptionFilterInput) {
                ${a}(input: $input) {
                    id
                }
            }
        `, f = {};
    return r && (f.input = { filter: $(r.filter((c) => !c.field.includes("."))) }), { query: d, variables: f, operation: a, operationName: l };
  }
  let e = `deletedOne${(0, import_camelcase2.default)((0, import_pluralize2.singular)(i), { pascalCase: true })}`, t = {};
  r && (t.input = { type: (0, import_camelcase2.default)(`delete_one_${(0, import_pluralize2.singular)(i)}_subscription_filter_input`, { pascalCase: true }), required: true, value: { filter: $(r.filter((u) => !u.field.includes("."))) } });
  let { query: s, variables: o } = O.subscription({ operation: e, fields: n.fields.filter((u) => typeof u != "object"), variables: t });
  return { query: s, variables: o, operation: e };
};
var A = (i) => ({ getList: async ({ resource: r, pagination: n, sorters: e, filters: t, meta: s }) => {
  let o = (0, import_camelcase.default)(r), u = B(n || {}), l = {}, a, d;
  if (s != null && s.gqlQuery)
    a = s == null ? void 0 : s.gqlQuery, d = { filter: t ? $(t) : {}, sorting: e ? h(e) : [], paging: u };
  else {
    t && (l.filter = { type: (0, import_camelcase.default)(`${(0, import_pluralize.singular)(r)}Filter`, { pascalCase: true }), required: true, value: $(t) }), e && (l.sorting = { type: (0, import_camelcase.default)(`${(0, import_pluralize.singular)(r)}Sort`, { pascalCase: true }), required: true, list: [true], value: h(e) }), u && (l.paging = { type: "OffsetPaging", required: true, value: u });
    let c = y.query({ operation: o, fields: [{ nodes: s == null ? void 0 : s.fields }, "totalCount"], variables: l });
    a = c.query, d = c.variables;
  }
  let f = await i.request(a, d);
  return { data: f[o].nodes, total: f[o].totalCount };
}, getMany: async ({ resource: r, ids: n, meta: e }) => {
  let t = (0, import_camelcase.default)(r);
  if (e != null && e.gqlQuery)
    return { data: (await i.request(e.gqlQuery, { filter: { id: { in: n } } }))[t].nodes };
  let { query: s, variables: o } = y.query({ operation: t, fields: [{ nodes: (e == null ? void 0 : e.fields) || ["id"] }], variables: { filter: { type: (0, import_camelcase.default)(`${(0, import_pluralize.singular)(r)}Filter`, { pascalCase: true }), required: true, value: { id: { in: n } } } } });
  return { data: (await i.request(s, o))[t].nodes };
}, create: async ({ resource: r, variables: n, meta: e }) => {
  let t = `createOne${(0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true })}`, s = (e == null ? void 0 : e.gqlMutation) ?? (e == null ? void 0 : e.gqlQuery);
  if (s)
    return { data: (await i.request(s, { input: { [(0, import_camelcase.default)((0, import_pluralize.singular)(r))]: n } }))[t] };
  let { query: o, variables: u } = y.mutation({ operation: t, fields: (e == null ? void 0 : e.fields) || ["id"], variables: { input: { type: `CreateOne${(0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true })}Input`, required: true, value: { [(0, import_camelcase.default)((0, import_pluralize.singular)(r))]: n } } } });
  return { data: (await i.request(o, u))[t] };
}, createMany: async ({ resource: r, variables: n, meta: e }) => {
  let s = `createMany${(0, import_camelcase.default)(r, { pascalCase: true })}`, o = (e == null ? void 0 : e.gqlMutation) ?? (e == null ? void 0 : e.gqlQuery);
  if (o)
    return { data: (await i.request(o, { input: { [(0, import_camelcase.default)(r)]: n } }))[s] };
  let { query: u, variables: l } = y.mutation({ operation: s, fields: (e == null ? void 0 : e.fields) || ["id"], variables: { input: { type: `CreateMany${(0, import_camelcase.default)(r, { pascalCase: true })}Input`, required: true, value: { [(0, import_camelcase.default)(r)]: n } } } });
  return { data: (await i.request(u, l))[s] };
}, update: async ({ resource: r, id: n, variables: e, meta: t }) => {
  let s = `updateOne${(0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true })}`, o = (t == null ? void 0 : t.gqlMutation) ?? (t == null ? void 0 : t.gqlQuery);
  if (o)
    return { data: (await i.request(o, { input: { id: n, update: e } }))[s] };
  let { query: u, variables: l } = y.mutation({ operation: s, fields: (t == null ? void 0 : t.fields) || ["id"], variables: { input: { type: `UpdateOne${(0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true })}Input`, required: true, value: { id: n, update: e } } } });
  return { data: (await i.request(u, l))[s] };
}, updateMany: async ({ resource: r, ids: n, variables: e, meta: t }) => {
  let s = (0, import_camelcase.default)(r, { pascalCase: true }), o = `updateMany${s}`, u = lib_default`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${o}(input: $input) {
                        updatedCount
                    }
                }
            `;
  await i.request(u, { input: { filter: { id: { in: n } }, update: e } });
  let l = (0, import_camelcase.default)(r), a, d;
  if (t != null && t.fields) {
    let c = y.query({ operation: l, fields: [{ nodes: (t == null ? void 0 : t.fields) || ["id"] }], variables: { filter: { type: (0, import_camelcase.default)(`${(0, import_pluralize.singular)(r)}Filter`, { pascalCase: true }), required: true, value: { id: { in: n } } } } });
    a = c.query, d = c.variables;
  } else
    a = lib_default`
                    query GetMany${s}($filter: ${(0, import_pluralize.singular)(s)}Filter!) {
                        ${l}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `, d = { filter: { id: { in: n } } };
  return { data: (await i.request(a, d))[l].nodes };
}, getOne: async ({ resource: r, id: n, meta: e }) => {
  let t = (0, import_camelcase.default)((0, import_pluralize.singular)(r)), s = (e == null ? void 0 : e.gqlQuery) ?? (e == null ? void 0 : e.gqlMutation);
  if (s) {
    let a = s, d = { id: n };
    if (L(s)) {
      let c = w(s);
      a = lib_default`
                        query Get${(0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true })}($id: ID!) {
                            ${t}(id: $id) {
                            ${c}
                            }
                        }
                    `;
    }
    return { data: (await i.request(a, d))[t] };
  }
  let { query: o, variables: u } = y.query({ operation: t, fields: (e == null ? void 0 : e.fields) || ["id"], variables: { id: { type: "ID", required: true, value: n } } });
  return { data: (await i.request(o, u))[t] };
}, deleteOne: async ({ resource: r, id: n, meta: e }) => {
  let t = (0, import_camelcase.default)((0, import_pluralize.singular)(r), { pascalCase: true }), s = `deleteOne${t}`;
  if (e != null && e.gqlMutation)
    return { data: (await i.request(e.gqlMutation, { input: { id: n } }))[s] };
  let o = lib_default`
                    mutation DeleteOne${t}($input: DeleteOne${t}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;
  return { data: (await i.request(o, { input: { id: n } }))[s] };
}, deleteMany: async ({ resource: r, ids: n }) => {
  let e = (0, import_camelcase.default)(r, { pascalCase: true }), t = `deleteMany${e}`, s = lib_default`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${t}(input: $input) {
                        deletedCount
                    }
                }
            `, o = { input: { filter: { id: { in: n } } } };
  return await i.request(s, o), { data: [] };
}, getApiUrl: () => i.url, custom: async ({ url: r, method: n, headers: e, meta: t }) => {
  r && i.setEndpoint(r), e && i.setHeaders(e);
  let s = (t == null ? void 0 : t.gqlMutation) ?? (t == null ? void 0 : t.gqlQuery);
  if (s)
    return { data: await i.request(s, (t == null ? void 0 : t.variables) ?? {}) };
  if (t != null && t.rawQuery)
    return { data: await i.request(t.rawQuery, t.variables) };
  if (t) {
    if (t.operation) {
      let o, u;
      if (n === "get") {
        let a = y.query({ operation: t.operation, fields: t.fields, variables: t.variables });
        o = a.query, u = a.variables;
      } else {
        let a = y.mutation({ operation: t.operation, fields: t.fields, variables: t.variables });
        o = a.query, u = a.variables;
      }
      return { data: (await i.request(o, u))[t.operation] };
    }
    throw Error("GraphQL operation name required.");
  }
  throw Error("GraphQL needs operation, fields and variables values in meta object.");
} });
var x = A;
var te = (i) => {
  let r = (n, e, t, s, o, u, l) => {
    let a = M(n, { callback: e, params: t, meta: s }, o);
    l.push(a);
  };
  return { subscribe({ callback: n, params: e, meta: t }) {
    let { resource: s, subscriptionType: o } = e ?? {};
    if (!t || !o || !s)
      throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");
    let u = [];
    return (e == null ? void 0 : e.subscriptionType) === "useList" && ["created", "updated", "deleted"].forEach((a) => r(i, n, e, t, a, s, u)), (e == null ? void 0 : e.subscriptionType) === "useOne" && r(i, n, e, t, "updated", s, u), () => {
      u.forEach((a) => a());
    };
  }, unsubscribe(n) {
    n();
  } };
};
var se = x;
export {
  GraphQLClient,
  batchRequests,
  se as default,
  gql,
  lib_exports as graphqlWS,
  te as liveProvider,
  pe as qqlQueryBuilder,
  rawRequest,
  request,
  resolveRequestDocument
};
//# sourceMappingURL=@refinedev_nestjs-query.js.map
