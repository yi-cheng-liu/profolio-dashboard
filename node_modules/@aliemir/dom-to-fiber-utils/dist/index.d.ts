import type { Fiber, Source } from "react-reconciler";
/**
 * Given a dom element, return the fiber associated with it.
 */
export declare const getFiberFromElement: (element: HTMLElement) => Fiber | null;
/**
 * Given a fiber, return the name of the component.
 */
export declare const getNameFromFiber: (fiber: Fiber | null) => string | null;
/**
 * Given a fiber, return the parent fiber. Looks up the tree.
 */
export declare const getParentOfFiber: (fiber: Fiber) => Fiber | null;
/**
 * Given a fiber, return the first fiber with a state node. Looks up the tree.
 */
export declare const getFirstStateNodeFiber: (fiber: Fiber | null) => Fiber | null;
/**
 * Given a fiber, return the owner fiber.
 */
export declare const getDebugOwner: (fiber: Fiber) => Fiber | null;
/**
 * Given a fiber, return the source of the component.
 */
export declare const getDebugSource: (fiber: Fiber) => Source | null;
/**
 * Given a fiber, return the nth parent of the fiber.
 */
export declare const getNthParentOfFiber: (fiber: Fiber, n: number) => Fiber | null;
/**
 * Given a fiber, return the dom element associated with it.
 */
export declare const getElementFromFiber: (fiber: Fiber) => HTMLElement | null;
/**
 * Given a fiber, return the first fiber with a name. Looks up the tree.
 */
export declare const getFirstFiberHasName: (fiber: Fiber | null) => Fiber | null;
/**
 * Given a fiber, return the name of the first fiber with a name. Looks up the tree.
 */
export declare const getNameOfFirstFiberHasName: (fiber: Fiber | null) => string | null;
//# sourceMappingURL=index.d.ts.map